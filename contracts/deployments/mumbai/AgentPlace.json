{
  "address": "0x0294e2aC7043c7d2D861F5C921ccec8f7A559188",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract IUnlockV12",
          "name": "_unlockContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "agentID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "UnlockSubscriptionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "KeyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "categories",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "name": "agentRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "agentID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "agentSubscriptionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "agentID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentVersionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "agentVersionID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "agentVersionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "rewardDistributions",
          "type": "uint8[]"
        }
      ],
      "name": "rewardMechanismRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sourceName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sourceCode",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_functionForwader",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_rewardDistributions",
          "type": "uint8[]"
        }
      ],
      "name": "addRewardMechanism",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "functionsForwarders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_agentID",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "purchaseSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "agentName",
              "type": "string"
            },
            {
              "internalType": "uint16",
              "name": "agentID",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "keyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisPoint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "lockName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lockSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseTokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isOpenForContributions",
              "type": "bool"
            }
          ],
          "internalType": "struct AgentPlace.AgentInitConfig",
          "name": "agentConfig",
          "type": "tuple"
        }
      ],
      "name": "registerAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_agentID",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_agentVersionID",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_agentVersionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "registerAgentVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToSource",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDistributions",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestID",
          "type": "bytes32"
        }
      ],
      "name": "rewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sources",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_agentID",
          "type": "uint16"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0ef56241e98a21b0539e62223632f8fe60ff1ac8e8485292f16eee8150cc74a4",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x0294e2aC7043c7d2D861F5C921ccec8f7A559188",
    "transactionIndex": 0,
    "gasUsed": "3658999",
    "logsBloom": "0x00000000000000000000000000000000000000000000040000800000000000004000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000000100100000004000000000020000000000000000000800000000000000000080008000000000400000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000800000000000000000004000000000000080000001000000000000000000000000000000100040000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x36ab236ad4cfdd68aaf7894a9f3eeb559f271bfe93eab38f35c45fc9382c16f4",
    "transactionHash": "0x0ef56241e98a21b0539e62223632f8fe60ff1ac8e8485292f16eee8150cc74a4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 42987275,
        "transactionHash": "0x0ef56241e98a21b0539e62223632f8fe60ff1ac8e8485292f16eee8150cc74a4",
        "address": "0x0294e2aC7043c7d2D861F5C921ccec8f7A559188",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x36ab236ad4cfdd68aaf7894a9f3eeb559f271bfe93eab38f35c45fc9382c16f4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 42987275,
        "transactionHash": "0x0ef56241e98a21b0539e62223632f8fe60ff1ac8e8485292f16eee8150cc74a4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000207f99bb123f000000000000000000000000000000000000000000000000000efdf6d6ae20373d00000000000000000000000000000000000000000000355bdc6d5f6a219d3f670000000000000000000000000000000000000000000000000edd773cf30df83d00000000000000000000000000000000000000000000355bdc8ddf03dcaf7e67",
        "logIndex": 1,
        "blockHash": "0x36ab236ad4cfdd68aaf7894a9f3eeb559f271bfe93eab38f35c45fc9382c16f4"
      }
    ],
    "blockNumber": 42987275,
    "cumulativeGasUsed": "3658999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C",
    "0x1FF7e338d5E582138C46044dc238543Ce555C963",
    "0x66756e2d706f6c79676f6e2d6d756d6261692d31000000000000000000000000",
    785
  ],
  "numDeployments": 7,
  "solcInputHash": "3db8ad898c5ee648055159832c7c1260",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IUnlockV12\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"agentID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"UnlockSubscriptionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"KeyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"categories\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"name\":\"agentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"agentID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"agentSubscriptionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"agentID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentVersionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"agentVersionID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentMetadataCID\",\"type\":\"string\"}],\"name\":\"agentVersionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"rewardDistributions\",\"type\":\"uint8[]\"}],\"name\":\"rewardMechanismRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sourceName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sourceCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_functionForwader\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_rewardDistributions\",\"type\":\"uint8[]\"}],\"name\":\"addRewardMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"functionsForwarders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_agentID\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"purchaseSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"agentID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lockName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"internalType\":\"struct AgentPlace.AgentInitConfig\",\"name\":\"agentConfig\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_agentID\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_agentVersionID\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_agentVersionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_agentMetadataCID\",\"type\":\"string\"}],\"name\":\"registerAgentVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToSource\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDistributions\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"}],\"name\":\"rewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_agentID\",\"type\":\"uint16\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addRewardMechanism(string,string,address,uint8[])\":{\"details\":\"Only callable by the owner\",\"params\":{\"_functionForwader\":\"the address to set\",\"_rewardDistributions\":\"the reward distributions for the topK agents\",\"_sourceCode\":\"sourceID to Forwarder address\",\"_sourceName\":\"sourceID to Forwarder address\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_donID\":\"Chainlink's contract chainID => donID \",\"_oracle\":\"The address of the Chainlink Function oracle\",\"_subscriptionId\":\"The subscription ID for Chainlink Functions\",\"_unlockContract\":\"The address of the Chainlink oracle Automation Forwarder\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseSubscription(uint16,uint256)\":{\"details\":\"PurchaseSubscription function for an agentID\",\"params\":{\"_agentID\":\"to subscribe\",\"_value\":\"array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendRequest(bytes32)\":{\"params\":{\"sourceID\":\"The ID of the source to send the request to\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint16)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_agentID\":\"to withdraw money from the lock contract\"}}},\"title\":\"AgentPlace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewardMechanism(string,string,address,uint8[])\":{\"notice\":\"Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder\"},\"constructor\":{\"notice\":\"Initializes the contract\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"sendRequest(bytes32)\":{\"notice\":\"Sends an HTTP request for character information\"},\"withdraw(uint16)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgentPlace.sol\":\"AgentPlace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/AgentPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { ChainlinkConsumer } from \\\"./ChainlinkConsumer.sol\\\";\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title AgentPlace\\n * @notice \\n * @dev \\n */\\ncontract AgentPlace is ChainlinkConsumer {\\n\\n    IUnlockV12 unlockContract;\\n\\n    struct AgentInitConfig {\\n        string agentName;\\n        uint16 agentID;\\n        address tokenAddress;\\n        uint keyPrice;\\n        uint basisPoint; \\n        string lockName;\\n        string lockSymbol;\\n        string baseTokenURI;\\n        string category;\\n        bool isOpenForContributions;\\n    }\\n\\n    event agentRegistered(\\n        string agentName,\\n        uint16 agentID, \\n        address creator, \\n        address UnlockSubscriptionContract,\\n        uint KeyPrice,\\n        uint basisPoint,\\n        string categories, \\n        bool isOpenForContributions\\n    );\\n\\n    event agentVersionRegistered(\\n        uint16 agentID, \\n        string agentVersionName,\\n        uint16 agentVersionID, \\n        address creator, \\n        string agentMetadataCID\\n    );\\n\\n    event agentSubscriptionPurchased(\\n        uint16 agentID, \\n        address agentCreator,\\n        address subscriber\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _unlockContract The address of the Chainlink oracle Automation Forwarder\\n    /// @param _donID Chainlink's contract chainID => donID \\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        IUnlockV12 _unlockContract,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) ChainlinkConsumer(\\n        _oracle,\\n        _donID,\\n        _subscriptionId\\n    ){\\n        unlockContract =  _unlockContract;\\n    }\\n\\n    function registerAgent(\\n        AgentInitConfig calldata agentConfig\\n    ) external{\\n        require(agents[agentConfig.agentID].creator == address(0), \\\"agent already exists\\\");\\n \\n        address newLockAddress = unlockContract.createLock(\\n            // Expiration duration of subscription\\n            31 days,\\n            agentConfig.tokenAddress,\\n            agentConfig.keyPrice,\\n            type(uint).max,\\n            agentConfig.lockName,\\n            bytes12(0)\\n        );\\n        IPublicLockV12(newLockAddress).setLockMetadata(agentConfig.lockName,agentConfig.lockSymbol, agentConfig.baseTokenURI);\\n        if(agentConfig.basisPoint > 0 ) IPublicLockV12(newLockAddress).setReferrerFee(address(0), agentConfig.basisPoint);\\n        IPublicLockV12(newLockAddress).setEventHooks(address(this),address(0),address(0),address(0),address(0),address(0),address(0));\\n        agents[agentConfig.agentID] = AgentStruct({\\n            creator : msg.sender,\\n            lockAddress: newLockAddress,\\n            isOpenForContributions: agentConfig.isOpenForContributions\\n        });\\n        \\n        emit agentRegistered(\\n            agentConfig.agentName, \\n            agentConfig.agentID, \\n            msg.sender, \\n            newLockAddress, \\n            agentConfig.keyPrice,\\n            agentConfig.basisPoint,\\n            agentConfig.category,\\n            agentConfig.isOpenForContributions\\n        );\\n    }\\n\\n    function registerAgentVersion(\\n        uint16 _agentID, \\n        uint16 _agentVersionID,\\n        string memory _agentVersionName,\\n        string memory _agentMetadataCID\\n    )external {\\n        require(agents[_agentID].isOpenForContributions, \\\"agent is not open for contributions\\\");\\n        // Check Subscription plan\\n        agents[_agentVersionID] = AgentStruct({\\n            creator : msg.sender,\\n            lockAddress: agents[_agentID].lockAddress,\\n            isOpenForContributions: false\\n        });\\n\\n        emit agentVersionRegistered(\\n            _agentID, \\n            _agentVersionName, \\n            _agentVersionID, \\n            msg.sender, \\n            _agentMetadataCID\\n        );\\n\\n        agentVersions[_agentVersionID] = _agentID;\\n    } \\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _agentID to subscribe\\n     * @param _value array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n    */\\n    function purchaseSubscription(\\n        uint16 _agentID,\\n        uint256 _value\\n    ) external payable{\\n        \\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        // If the agent that we want to subscribe is a subVersion then \\n        // Pay the main agentID and give a referre fee to the contributor\\n        // Of this new agent Version. Referre fee is defined in the registerAgent function.\\n        if(!agents[_agentID].isOpenForContributions){\\n            address referrer = agents[_agentID].creator;\\n             _referrers[0] = referrer;\\n        }\\n        _values[0] = _value;\\n        _recipients[0] = msg.sender;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n            IPublicLockV12(agentLockAddress).purchase(_values,_recipients,_referrers,_keyManagers,_data);\\n        }else{\\n            IPublicLockV12(agentLockAddress).purchase{value:msg.value}(_values,_recipients,_referrers,_keyManagers,_data);\\n        }\\n\\n        emit agentSubscriptionPurchased(\\n            _agentID, \\n            agents[_agentID].creator,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _agentID to withdraw money from the lock contract\\n    */\\n    function withdraw(uint16 _agentID) external {\\n        AgentStruct memory _agent = agents[_agentID];\\n        IPublicLockV12 AgentLockContract = IPublicLockV12(_agent.lockAddress);\\n        uint balance = address(_agent.lockAddress).balance;\\n        uint amountToTransfer = (balance / 10 ) * 7;\\n        address tokenAddress = AgentLockContract.tokenAddress();\\n        AgentLockContract.withdraw(\\n            tokenAddress,\\n            payable(address(this)),\\n            balance\\n        );\\n        address payable withdrawer = payable(_agent.creator);\\n        // IF Payment token is in Ethers\\n        if(tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, amountToTransfer);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, amountToTransfer);\\n        }\\n    }\\n\\n    // Function to receive Ethers\\n    receive()external payable{}\\n\\n    // Function to withdraw the platform income\\n    function withdraw(address tokenAddress)external onlyOwner{\\n        address payable withdrawer = payable(msg.sender);\\n        // IF Payment token is in Ethers\\n        if(tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, address(this).balance);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view{\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(    \\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice){\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n}\",\"keccak256\":\"0x30e6bc131c379fdcf742387b3de8fae60be947f673648ce0e5e4ba0e8d3bb98b\",\"license\":\"MIT\"},\"contracts/ChainlinkConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./library/Helpers.sol\\\";\\n\\n/**\\n * @title ChainlinkConsumer\\n * @notice \\n * @dev \\n */\\nabstract contract ChainlinkConsumer is FunctionsClient, Ownable , ERC20 {\\n\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    uint64 subscriptionId;\\n\\n    uint256 agentPlaceTreasury;\\n\\n    // Router address Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n    address oracle;\\n    // JavaScript source code\\n    string source;\\n    //Callback gas limit\\n    uint32 gasLimit = 300000;\\n    // donID\\n    bytes32 donID;\\n\\n    struct AgentStruct {\\n        address creator;\\n        address lockAddress;\\n        bool isOpenForContributions;\\n    }\\n\\n    // Mapping from agentID to agentStruct\\n    mapping(uint16 => AgentStruct) public agents;\\n\\n    // Mapping from agentID to agentVersionID\\n    mapping(uint16 => uint16) agentVersions;\\n\\n    // Mapping from requestID to response containing the topK agents\\n    mapping(bytes32 => bytes) private round_winners;\\n\\n    // JavaScript source codes for the reward mechanisms\\n    mapping(bytes32 => string) public sources;\\n\\n    // Reward distributions for the reward mechanisms\\n    mapping(bytes32 => uint8[]) public rewardDistributions;\\n\\n    // Mapping from requestID to sourceID \\n    mapping(bytes32 => bytes32) public requestToSource;\\n\\n    // Mapping from sourceID to functionForwarder that can call the performUpkeep\\n    mapping(bytes32 => address) public functionsForwarders;\\n    \\n    // Custom error type\\n    error UnexpectedRequestID(bytes32 requestId);\\n\\n    // Event to log responses\\n    event Response(\\n        bytes32 indexed requestId,\\n        bytes response\\n    );\\n\\n    event rewardMechanismRegistered(\\n        string sourceName,\\n        string sourceCode,\\n        bytes32 sourceID,\\n        uint8[] rewardDistributions\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _donID Chainlink's contract chainID => donID \\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) FunctionsClient(_oracle) ERC20(\\\"DAI AGENTS\\\", \\\"DAIA\\\"){\\n\\n        subscriptionId = _subscriptionId;\\n\\n        donID = _donID;\\n    }\\n\\n    /// @notice Set the setRewardMechanism that `performUpkeep` is called from\\n    /// a trusted address the chainlink forwarder\\n    /// @dev Only callable by the owner\\n    /// @param _sourceName sourceID to Forwarder address\\n    /// @param _sourceCode sourceID to Forwarder address\\n    /// @param _functionForwader the address to set\\n    /// @param _rewardDistributions the reward distributions for the topK agents\\n    function addRewardMechanism(\\n        string memory _sourceName, \\n        string memory _sourceCode, \\n        address _functionForwader,\\n        uint8[] memory _rewardDistributions\\n    ) external onlyOwner {\\n        bytes32 _sourceID = createSourceID(_sourceName);\\n        functionsForwarders[_sourceID] = _functionForwader;\\n        sources[_sourceID] = _sourceCode;\\n        for(uint8 i = 0; i < _rewardDistributions.length; i++){\\n            rewardDistributions[_sourceID].push(_rewardDistributions[i]);\\n        }\\n        emit rewardMechanismRegistered(_sourceName, _sourceCode, _sourceID, _rewardDistributions);\\n    }\\n\\n    /**\\n     * @notice Sends an HTTP request for character information\\n     * @param sourceID The ID of the source to send the request to\\n     */\\n    function sendRequest(\\n        bytes32 sourceID\\n    ) external {\\n        require(functionsForwarders[sourceID] == msg.sender);\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(sources[sourceID]); // Initialize the request with JS code\\n\\n        // Send the request and store the request ID\\n        bytes32 reqID = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donID\\n        );\\n\\n        requestToSource[reqID] = sourceID;\\n    }\\n\\n    /**\\n     * @notice Callback function for fulfilling a request\\n     * @param requestId The ID of the request to fulfill\\n     * @param response The HTTP response data\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory /* err */\\n    ) internal override {\\n\\n        round_winners[requestId] = response;\\n        // Emit an event to log the response\\n        emit Response(requestId, response);\\n    }\\n\\n    function rewardsDistribution(bytes32 _requestID) external{\\n        string memory winners = string(round_winners[_requestID]);\\n\\n        bytes memory decodedResponse = Helpers.stringToBytes(winners);\\n\\n        uint16[] memory topkAgents = Helpers.decodeUint16ArrayRLE(decodedResponse);\\n\\n        bytes32 rewardMechanismID = requestToSource[_requestID];\\n\\n        for(uint8 i = 0; i < rewardDistributions[rewardMechanismID].length; i++){\\n            address tempWinner = agents[topkAgents[i]].creator;\\n            uint256 tempReward = rewardDistributions[rewardMechanismID][i];\\n            // Minting tokens to the topK agents \\n            _mint(tempWinner, tempReward * 10 ** 18);\\n        }\\n    }\\n     \\n    function createSourceID(string memory _sourceID) internal pure returns(bytes32){\\n        return keccak256(abi.encode(_sourceID));\\n    }\\n}\",\"keccak256\":\"0x15a5ad9c182eb58d8ee343f17f654ded7597fbe8fee71c6e935e4f125426afbc\",\"license\":\"MIT\"},\"contracts/library/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary Helpers {\\n\\n    function stringToBytes(string memory input) internal pure returns (bytes memory) {\\n        bytes memory temp = bytes(input);\\n        require(temp.length >= 2, \\\"Source string not properly formatted.\\\");\\n        require(temp[0] == '0' && (temp[1] == 'x' || temp[1] == 'X'), \\\"Source string must start with '0x'.\\\");\\n\\n        if (temp.length == 2) {\\n            // String is only '0x'\\n            return new bytes(0);\\n        }\\n\\n        uint256 byteLength = (temp.length - 2) / 2;\\n        bytes memory byteArray = new bytes(byteLength);\\n        \\n        for (uint256 i = 2; i < temp.length; i += 2) {\\n            byteArray[(i - 2) / 2] = bytes1(toByte(temp[i]) * 16 + toByte(temp[i + 1]));\\n        }\\n\\n        return byteArray;\\n    }\\n\\n    function toByte(bytes1 char) internal pure returns (uint8) {\\n        uint8 byteValue = uint8(char);\\n        if (byteValue >= 48 && byteValue <= 57) {  // '0' - '9'\\n            return byteValue - 48;\\n        }\\n        if (byteValue >= 97 && byteValue <= 102) { // 'a' - 'f'\\n            return byteValue - 97 + 10;\\n        }\\n        if (byteValue >= 65 && byteValue <= 70) {  // 'A' - 'F'\\n            return byteValue - 65 + 10;\\n        }\\n        revert(\\\"Invalid character in string\\\");\\n    }\\n\\n    function decodeUint16ArrayRLE(bytes memory data) internal pure returns (uint16[] memory) {\\n        require(data.length % 4 == 0, \\\"Data length must be a multiple of 4\\\");\\n\\n        uint256 decodedSize = 0;\\n\\n        // First pass: calculate the total size of the decoded array\\n        for (uint256 i = 0; i < data.length; i += 4) {\\n            uint16 count = toUint16(data, i);\\n            decodedSize += count;\\n        }\\n\\n        uint16[] memory decodedArray = new uint16[](decodedSize);\\n        uint256 decodedIndex = 0;\\n\\n        // Second pass: decode the RLE data\\n        for (uint256 i = 0; i < data.length; i += 4) {\\n            uint16 count = toUint16(data, i);\\n            uint16 value = toUint16(data, i + 2);\\n            for (uint16 j = 0; j < count; j++) {\\n                decodedArray[decodedIndex++] = value;\\n            }\\n        }\\n\\n        return decodedArray;\\n    }\\n\\n    function toUint16(bytes memory data, uint256 startIndex) internal pure returns (uint16) {\\n        require(startIndex + 2 <= data.length, \\\"Index out of bounds\\\");\\n        uint16 value;\\n        assembly {\\n            value := mload(add(add(data, 0x2), startIndex))\\n        }\\n        return value;\\n    }\\n}\",\"keccak256\":\"0x4c63e4fa03b539042803be08ca5e92612664c78a240ab14f60aaa9f8024e391f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600a805463ffffffff1916620493e01790553480156200002357600080fd5b506040516200419038038062004190833981016040819052620000469162000179565b604080518082018252600a815269444149204147454e545360b01b602080830191909152825180840190935260048352634441494160e01b908301526001600160a01b038616608052859184918491620000a03362000110565b6004620000ae838262000285565b506005620000bd828262000285565b5050600680546001600160401b0319166001600160401b03939093169290921790915550600b555050601380546001600160a01b0319166001600160a01b03939093169290921790915550620003519050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200017657600080fd5b50565b600080600080608085870312156200019057600080fd5b84516200019d8162000160565b6020860151909450620001b08162000160565b6040860151606087015191945092506001600160401b0381168114620001d557600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020b57607f821691505b6020821081036200022c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028057600081815260208120601f850160051c810160208610156200025b5750805b601f850160051c820191505b818110156200027c5782815560010162000267565b5050505b505050565b81516001600160401b03811115620002a157620002a1620001e0565b620002b981620002b28454620001f6565b8462000232565b602080601f831160018114620002f15760008415620002d85750858301515b600019600386901b1c1916600185901b1785556200027c565b600085815260208120601f198616915b82811015620003225788860151825594840194600190910190840162000301565b5085821015620003415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613e1c6200037460003960008181610a1201526128410152613e1c6000f3fe6080604052600436106101d15760003560e01c80635e895f29116100f7578063a457c2d711610095578063f2fde38b11610064578063f2fde38b146105a2578063f803812d146105c2578063facd969a146105e2578063fb6ce32c1461061857600080fd5b8063a457c2d71461052f578063a9059cbb1461054f578063ad67325d1461056f578063dd62ed3e1461058257600080fd5b8063715018a6116100d1578063715018a6146104b35780638c3d86b4146104c85780638da5cb5b146104e857806395d89b411461051a57600080fd5b80635e895f291461043d5780635f1d78ae1461045d57806370a082311461047d57600080fd5b806318160ddd1161016f578063395093511161013e57806339509351146103bd5780633d972839146103dd5780634025f436146103fd57806351cff8d91461041d57600080fd5b806318160ddd14610346578063221c1fd11461035b57806323b872dd1461037b578063313ce5671461039b57600080fd5b806307e32904116101ab57806307e3290414610261578063095ea7b3146102815780630ca76175146102b1578063140b3eff146102d157600080fd5b806301fe5977146101dd57806304d470bd146101ff57806306fdde031461023f57600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004613050565b610638565b005b34801561020b57600080fd5b5061022c61021a3660046130d4565b60116020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024b57600080fd5b506102546107a9565b6040516102369190613133565b34801561026d57600080fd5b506101fd61027c3660046130d4565b61083b565b34801561028d57600080fd5b506102a161029c36600461315b565b6109ed565b6040519015158152602001610236565b3480156102bd57600080fd5b506101fd6102cc366004613187565b610a07565b3480156102dd57600080fd5b5061031e6102ec3660046131f3565b600c60205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b900460ff1683565b604080516001600160a01b039485168152939092166020840152151590820152606001610236565b34801561035257600080fd5b5060035461022c565b34801561036757600080fd5b5061022c610376366004613256565b610a8b565b34801561038757600080fd5b506102a16103963660046132d1565b610af9565b3480156103a757600080fd5b5060125b60405160ff9091168152602001610236565b3480156103c957600080fd5b506102a16103d836600461315b565b610b1d565b3480156103e957600080fd5b506101fd6103f83660046131f3565b610b3f565b34801561040957600080fd5b506103ab610418366004613312565b610d1d565b34801561042957600080fd5b506101fd610438366004613334565b610d60565b34801561044957600080fd5b506101fd610458366004613351565b610e6e565b34801561046957600080fd5b506102546104783660046130d4565b610e8d565b34801561048957600080fd5b5061022c610498366004613334565b6001600160a01b031660009081526001602052604090205490565b3480156104bf57600080fd5b506101fd610f27565b3480156104d457600080fd5b506101fd6104e33660046130d4565b610f3b565b3480156104f457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610236565b34801561052657600080fd5b50610254611091565b34801561053b57600080fd5b506102a161054a36600461315b565b6110a0565b34801561055b57600080fd5b506102a161056a36600461315b565b61111b565b6101fd61057d3660046133e4565b611129565b34801561058e57600080fd5b5061022c61059d366004613400565b611576565b3480156105ae57600080fd5b506101fd6105bd366004613334565b6115a1565b3480156105ce57600080fd5b506101fd6105dd36600461345c565b61161a565b3480156105ee57600080fd5b506105026105fd3660046130d4565b6012602052600090815260409020546001600160a01b031681565b34801561062457600080fd5b506101fd61063336600461355f565b611738565b61ffff84166000908152600c6020526040902060010154600160a01b900460ff166106b65760405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b60648201526084015b60405180910390fd5b604080516060810182523380825261ffff8088166000908152600c60208181528683206001908101546001600160a01b03908116838901908152888a01868152968d1686529390925292879020955186549082166001600160a01b0319909116178655905194909101805492511515600160a01b026001600160a81b031990931694909116939093171790915590517fb424121bd0b8c47446bd1b78766e14b5ea0296a02d034d6b92702c8e9f377cc4916107799187918691889190879061359a565b60405180910390a1505061ffff9081166000908152600d6020526040902080549190921661ffff19909116179055565b6060600480546107b8906135ee565b80601f01602080910402602001604051908101604052809291908181526020018280546107e4906135ee565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b6000818152600e602052604081208054610854906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610880906135ee565b80156108cd5780601f106108a2576101008083540402835291602001916108cd565b820191906000526020600020905b8154815290600101906020018083116108b057829003601f168201915b5050505050905060006108df82611b0c565b905060006108ec82611d9c565b6000858152601160205260408120549192505b60008281526010602052604090205460ff821610156109e5576000600c6000858460ff168151811061093357610933613628565b602002602001015161ffff1661ffff16815260200190815260200160002060000160009054906101000a90046001600160a01b031690506000601060008581526020019081526020016000208360ff168154811061099357610993613628565b60009182526020918290209181049091015460ff601f9092166101000a90041690506109d0826109cb83670de0b6b3a7640000613654565b611f35565b505080806109dd9061366b565b9150506108ff565b505050505050565b6000336109fb818585611ff6565b60019150505b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a505760405163c6829f8360e01b815260040160405180910390fd5b610a5b83838361211a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6000336001600160a01b03166310e569736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef919061368a565b9695505050505050565b600033610b07858285612170565b610b128585856121e4565b506001949350505050565b6000336109fb818585610b308383611576565b610b3a91906136a3565b611ff6565b61ffff81166000908152600c60209081526040808320815160608101835281546001600160a01b039081168252600190920154918216938101849052600160a01b90910460ff1615159181019190915291813190610b9e600a836136cc565b610ba9906007613654565b90506000836001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906136e0565b604051636ce5768960e11b81526001600160a01b038083166004830152306024830152604482018690529192509085169063d9caed1290606401600060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505086519150506001600160a01b038216610c9b57610c96818461238f565b610d14565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820185905283919082169063a9059cbb906044016020604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d11919061370b565b50505b50505050505050565b60106020528160005260406000208181548110610d3957600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b610d686124ad565b336001600160a01b038216610d8557610d81814761238f565b5050565b6040516370a0823160e01b815230600482015282906001600160a01b0382169063a9059cbb90849083906370a0823190602401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df9919061368a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e68919061370b565b50505050565b6001600160a01b0387163014610e8357600080fd5b5050505050505050565b600f6020526000908152604090208054610ea6906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed2906135ee565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505081565b610f2f6124ad565b610f396000612507565b565b6000818152601260205260409020546001600160a01b03163314610f5e57600080fd5b610f9f6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6000828152600f60205260409020805461104a9190610fbd906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe9906135ee565b80156110365780601f1061100b57610100808354040283529160200191611036565b820191906000526020600020905b81548152906001019060200180831161101957829003601f168201915b50505050508261255790919063ffffffff16565b600061107b61105883612564565b600654600a54600b546001600160401b039092169163ffffffff9091169061283c565b6000908152601160205260409020929092555050565b6060600580546107b8906135ee565b600033816110ae8286611576565b90508381101561110e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106ad565b610b128286868403611ff6565b6000336109fb8185856121e4565b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b60608152602001906001900390816111cc5790505061ffff88166000908152600c60205260409020600101549091506001600160a01b03811690600160a01b900460ff166112695761ffff88166000908152600c602052604081205487516001600160a01b0390911691829189919061124757611247613628565b60200260200101906001600160a01b031690816001600160a01b031681525050505b868360008151811061127d5761127d613628565b602002602001018181525050338560008151811061129d5761129d613628565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132191906136e0565b90506000826001600160a01b03166310e569736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611387919061368a565b90506001600160a01b03821615611491576040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f919061370b565b50604051633381899760e01b81526001600160a01b038416906333818997906114449088908b908d908c908b9060040161376c565b6000604051808303816000875af1158015611463573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148b9190810190613844565b50611510565b604051633381899760e01b81526001600160a01b0384169063338189979034906114c79089908c908e908d908c9060040161376c565b60006040518083038185885af11580156114e5573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261150e9190810190613844565b505b61ffff8a166000818152600c60209081526040918290205482519384526001600160a01b0316908301523382820152517fd6df7e7836dcad6338c5ef9f97973d038946a27d9c62e290a1fccf4a55a84c0b9181900360600190a150505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6115a96124ad565b6001600160a01b03811661160e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ad565b61161781612507565b50565b6116226124ad565b600061162d8561290e565b600081815260126020908152604080832080546001600160a01b0319166001600160a01b038916179055600f909152902090915061166b858261391a565b5060005b82518160ff1610156116f35760008281526010602052604090208351849060ff84169081106116a0576116a0613628565b6020908102919091018101518254600181018455600093845292829020918304909101805460ff928316601f9094166101000a9384029290930219909216179055806116eb8161366b565b91505061166f565b507fe31e0fb04d5e988b710ab2bf552b370b340ccf34049a4e9f406defc2868b74858585838560405161172994939291906139d9565b60405180910390a15050505050565b6000600c8161174d60408501602086016131f3565b61ffff1681526020810191909152604001600020546001600160a01b0316146117af5760405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b60448201526064016106ad565b6013546000906001600160a01b03166342d921066228de806117d76060860160408701613334565b60608601356000196117ec60a0890189613a4d565b6040516001600160e01b031960e089901b16815261181596959493929190600090600401613abc565b6020604051808303816000875af1158015611834573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185891906136e0565b90506001600160a01b03811663d1b8759b61187660a0850185613a4d565b61188360c0870187613a4d565b61189060e0890189613a4d565b6040518763ffffffff1660e01b81526004016118b196959493929190613b15565b600060405180830381600087803b1580156118cb57600080fd5b505af11580156118df573d6000803e3d6000fd5b505050506080820135156119525760405163debe2b0d60e01b815260006004820152608083013560248201526001600160a01b0382169063debe2b0d90604401600060405180830381600087803b15801561193957600080fd5b505af115801561194d573d6000803e3d6000fd5b505050505b6040516374cac47d60e01b815230600482015260006024820181905260448201819052606482018190526084820181905260a4820181905260c48201526001600160a01b038216906374cac47d9060e401600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b5050604080516060810182523381526001600160a01b0385166020820152925082019050611a0761014085016101208601613b51565b15159052600c6000611a1f60408601602087016131f3565b61ffff1681526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039182161782559284015160019091018054949092015192166001600160a81b031990931692909217600160a01b911515919091021790557f9bd97d9870b377402b7bb6ae42ef6263369f374498bdcf0f6f65ba00f5f28fb4611aae8380613a4d565b611abe60408601602087016131f3565b338560608801356080890135611ad86101008b018b613a4d565b611aea6101408d016101208e01613b51565b604051611b009a99989796959493929190613b6e565b60405180910390a15050565b60606000829050600281511015611b735760405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b60648201526084016106ad565b80600081518110611b8657611b86613628565b6020910101516001600160f81b031916600360fc1b148015611bfc575080600181518110611bb657611bb6613628565b6020910101516001600160f81b031916600f60fb1b1480611bfc575080600181518110611be557611be5613628565b6020910101516001600160f81b031916600b60fb1b145b611c545760405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b60648201526084016106ad565b8051600203611c73575050604080516000815260208101909152919050565b60006002808351611c849190613be1565b611c8e91906136cc565b90506000816001600160401b03811115611caa57611caa612f9b565b6040519080825280601f01601f191660200182016040528015611cd4576020820181803683370190505b50905060025b8351811015611d9357611d1684611cf28360016136a3565b81518110611d0257611d02613628565b01602001516001600160f81b03191661293e565b611d2b858381518110611d0257611d02613628565b611d36906010613bf4565b611d409190613c17565b60f81b826002611d508185613be1565b611d5a91906136cc565b81518110611d6a57611d6a613628565b60200101906001600160f81b031916908160001a905350611d8c6002826136a3565b9050611cda565b50949350505050565b606060048251611dac9190613c30565b15611e055760405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b60648201526084016106ad565b6000805b8351811015611e44576000611e1e8583612a14565b9050611e2e61ffff8216846136a3565b9250611e3d90506004826136a3565b9050611e09565b506000816001600160401b03811115611e5f57611e5f612f9b565b604051908082528060200260200182016040528015611e88578160200160208202803683370190505b5090506000805b8551811015611f2b576000611ea48783612a14565b90506000611ebc88611eb78560026136a3565b612a14565b905060005b8261ffff168161ffff161015611f1457818686611edd81613c44565b975081518110611eef57611eef613628565b61ffff9092166020928302919091019091015280611f0c81613c5d565b915050611ec1565b505050600481611f2491906136a3565b9050611e8f565b5090949350505050565b6001600160a01b038216611f8b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ad565b8060036000828254611f9d91906136a3565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0383166120585760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106ad565b6001600160a01b0382166120b95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106ad565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000838152600e60205260409020612132838261391a565b50827f9f87a8bdffc6b3f1a785d49b122c82d1202938cbecfdd5b26fc975ff923a892a836040516121639190613133565b60405180910390a2505050565b600061217c8484611576565b90506000198114610e6857818110156121d75760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106ad565b610e688484848403611ff6565b6001600160a01b0383166122485760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106ad565b6001600160a01b0382166122aa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106ad565b6001600160a01b038316600090815260016020526040902054818110156123225760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106ad565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906123829086815260200190565b60405180910390a3610e68565b804710156123df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ad565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461242c576040519150601f19603f3d011682016040523d82523d6000602084013e612431565b606091505b50509050806124a85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ad565b505050565b6000546001600160a01b03163314610f395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d818260008084612a71565b60606000612573610100612aef565b90506125ac6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082612b1090919063ffffffff16565b82516125ca9060028111156125c3576125c3613c7e565b8290612b29565b6040805180820190915260088152676c616e677561676560c01b60208201526125f4908290612b10565b604083015161260b9080156125c3576125c3613c7e565b604080518082019091526006815265736f7572636560d01b6020820152612633908290612b10565b6060830151612643908290612b10565b60a083015151156126d7576040805180820190915260048152636172677360e01b6020820152612674908290612b10565b61267d81612b62565b60005b8360a00151518110156126cd576126bd8460a0015182815181106126a6576126a6613628565b602002602001015183612b1090919063ffffffff16565b6126c681613c44565b9050612680565b506126d781612b86565b6080830151511561279b576000836020015160028111156126fa576126fa613c7e565b036127185760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152612749908290612b10565b612762836020015160028111156125c3576125c3613c7e565b6040805180820190915260078152667365637265747360c81b602082015261278b908290612b10565b608083015161279b908290612ba4565b60c083015151156128345760408051808201909152600981526862797465734172677360b81b60208201526127d1908290612b10565b6127da81612b62565b60005b8360c001515181101561282a5761281a8460c00151828151811061280357612803613628565b602002602001015183612ba490919063ffffffff16565b61282381613c44565b90506127dd565b5061283481612b86565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612894959493929190613c94565b6020604051808303816000875af11580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d7919061368a565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6000816040516020016129219190613133565b604051602081830303815290604052805190602001209050919050565b600060f882901c6030811080159061295a575060398160ff1611155b156129715761296a603082613cdd565b9392505050565b60618160ff1610158015612989575060668160ff1611155b156129a457612999606182613cdd565b61296a90600a613c17565b60418160ff16101580156129bc575060468160ff1611155b156129cc57612999604182613cdd565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e67000000000060448201526064016106ad565b8151600090612a248360026136a3565b1115612a685760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106ad565b50016002015190565b8051600003612a93576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115612aa657612aa6613c7e565b90816002811115612ab957612ab9613c7e565b90525060408401828015612acf57612acf613c7e565b90818015612adf57612adf613c7e565b9052506060909301929092525050565b612af7612f4f565b8051612b039083612bb1565b5060006020820152919050565b612b1d8260038351612c28565b81516124a89082612d41565b8151612b369060c2612d62565b50610d818282604051602001612b4e91815260200190565b604051602081830303815290604052612ba4565b612b6d816004612dcb565b600181602001818151612b8091906136a3565b90525050565b612b91816007612dcb565b600181602001818151612b809190613be1565b612b1d8260028351612c28565b604080518082019091526060815260006020820152612bd1602083613c30565b15612bf957612be1602083613c30565b612bec906020613be1565b612bf690836136a3565b91505b602080840183905260405180855260008152908184010181811015612c1d57600080fd5b604052509192915050565b6017816001600160401b031611612c4e578251610e689060e0600585901b168317612d62565b60ff816001600160401b031611612c8e578251612c76906018611fe0600586901b1617612d62565b508251610e68906001600160401b0383166001612de2565b61ffff816001600160401b031611612ccf578251612cb7906019611fe0600586901b1617612d62565b508251610e68906001600160401b0383166002612de2565b63ffffffff816001600160401b031611612d12578251612cfa90601a611fe0600586901b1617612d62565b508251610e68906001600160401b0383166004612de2565b8251612d2990601b611fe0600586901b1617612d62565b508251610e68906001600160401b0383166008612de2565b60408051808201909152606081526000602082015261296a83838451612e67565b6040805180820190915260608152600060208201528251516000612d878260016136a3565b905084602001518210612da857612da885612da3836002613654565b612f38565b8451602083820101858153508051821115612dc1578181525b5093949350505050565b81516124a890601f611fe0600585901b1617612d62565b6040805180820190915260608152600060208201528351516000612e0682856136a3565b90508560200151811115612e2357612e2386612da3836002613654565b60006001612e3386610100613dda565b612e3d9190613be1565b90508651828101878319825116178152508051831115612e5b578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115612e8a57600080fd5b8351516000612e9984836136a3565b90508560200151811115612eb657612eb686612da3836002613654565b855180518382016020019160009180851115612ed0578482525b505050602086015b60208610612f105780518252612eef6020836136a3565b9150612efc6020826136a3565b9050612f09602087613be1565b9550612ed8565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151612f448383612bb1565b50610e688382612d41565b6040518060400160405280612f77604051806040016040528060608152602001600081525090565b8152602001600081525090565b803561ffff81168114612f9657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612fd957612fd9612f9b565b604052919050565b600082601f830112612ff257600080fd5b81356001600160401b0381111561300b5761300b612f9b565b61301e601f8201601f1916602001612fb1565b81815284602083860101111561303357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561306657600080fd5b61306f85612f84565b935061307d60208601612f84565b925060408501356001600160401b038082111561309957600080fd5b6130a588838901612fe1565b935060608701359150808211156130bb57600080fd5b506130c887828801612fe1565b91505092959194509250565b6000602082840312156130e657600080fd5b5035919050565b6000815180845260005b81811015613113576020818501810151868301820152016130f7565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061296a60208301846130ed565b6001600160a01b038116811461161757600080fd5b6000806040838503121561316e57600080fd5b823561317981613146565b946020939093013593505050565b60008060006060848603121561319c57600080fd5b8335925060208401356001600160401b03808211156131ba57600080fd5b6131c687838801612fe1565b935060408601359150808211156131dc57600080fd5b506131e986828701612fe1565b9150509250925092565b60006020828403121561320557600080fd5b61296a82612f84565b60008083601f84011261322057600080fd5b5081356001600160401b0381111561323757600080fd5b60208301915083602082850101111561324f57600080fd5b9250929050565b60008060008060006080868803121561326e57600080fd5b853561327981613146565b9450602086013561328981613146565b9350604086013561329981613146565b925060608601356001600160401b038111156132b457600080fd5b6132c08882890161320e565b969995985093965092949392505050565b6000806000606084860312156132e657600080fd5b83356132f181613146565b9250602084013561330181613146565b929592945050506040919091013590565b6000806040838503121561332557600080fd5b50508035926020909101359150565b60006020828403121561334657600080fd5b813561296a81613146565b60008060008060008060008060e0898b03121561336d57600080fd5b88359750602089013561337f81613146565b9650604089013561338f81613146565b9550606089013561339f81613146565b945060808901356001600160401b038111156133ba57600080fd5b6133c68b828c0161320e565b999c989b5096999598969760a08701359660c0013595509350505050565b600080604083850312156133f757600080fd5b61317983612f84565b6000806040838503121561341357600080fd5b823561341e81613146565b9150602083013561342e81613146565b809150509250929050565b60006001600160401b0382111561345257613452612f9b565b5060051b60200190565b6000806000806080858703121561347257600080fd5b84356001600160401b038082111561348957600080fd5b61349588838901612fe1565b95506020915081870135818111156134ac57600080fd5b6134b889828a01612fe1565b95505060408701356134c981613146565b93506060870135818111156134dd57600080fd5b87019050601f810188136134f057600080fd5b80356135036134fe82613439565b612fb1565b81815260059190911b8201830190838101908a83111561352257600080fd5b928401925b8284101561355057833560ff811681146135415760008081fd5b82529284019290840190613527565b979a9699509497505050505050565b60006020828403121561357157600080fd5b81356001600160401b0381111561358757600080fd5b8201610140818503121561296a57600080fd5b600061ffff808816835260a060208401526135b860a08401886130ed565b86821660408501526001600160a01b038616606085015283810360808501526135e181866130ed565b9998505050505050505050565b600181811c9082168061360257607f821691505b60208210810361362257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a0157610a0161363e565b600060ff821660ff81036136815761368161363e565b60010192915050565b60006020828403121561369c57600080fd5b5051919050565b80820180821115610a0157610a0161363e565b634e487b7160e01b600052601260045260246000fd5b6000826136db576136db6136b6565b500490565b6000602082840312156136f257600080fd5b815161296a81613146565b801515811461161757600080fd5b60006020828403121561371d57600080fd5b815161296a816136fd565b600081518084526020808501945080840160005b838110156137615781516001600160a01b03168752958201959082019060010161373c565b509495945050505050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156137a557815184529284019290840190600101613789565b505050838103828501526137b98189613728565b905083810360408501526137cd8188613728565b905083810360608501526137e18187613728565b905083810360808501528085518083528383019150838160051b84010184880160005b8381101561383257601f198684030185526138208383516130ed565b94870194925090860190600101613804565b50909c9b505050505050505050505050565b6000602080838503121561385757600080fd5b82516001600160401b0381111561386d57600080fd5b8301601f8101851361387e57600080fd5b805161388c6134fe82613439565b81815260059190911b820183019083810190878311156138ab57600080fd5b928401925b828410156138c9578351825292840192908401906138b0565b979650505050505050565b601f8211156124a857600081815260208120601f850160051c810160208610156138fb5750805b601f850160051c820191505b818110156109e557828155600101613907565b81516001600160401b0381111561393357613933612f9b565b6139478161394184546135ee565b846138d4565b602080601f83116001811461397c57600084156139645750858301515b600019600386901b1c1916600185901b1785556109e5565b600085815260208120601f198616915b828110156139ab5788860151825594840194600190910190840161398c565b50858210156139c95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006139ec60808301876130ed565b6020838203818501526139ff82886130ed565b604085018790528481036060860152855180825282870193509082019060005b81811015613a3e57845160ff1683529383019391830191600101613a1f565b50909998505050505050505050565b6000808335601e19843603018112613a6457600080fd5b8301803591506001600160401b03821115613a7e57600080fd5b60200191503681900382131561324f57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815260018060a01b038716602082015285604082015284606082015260c060808201526000613af060c083018587613a93565b90506bffffffffffffffffffffffff60a01b831660a083015298975050505050505050565b606081526000613b2960608301888a613a93565b8281036020840152613b3c818789613a93565b905082810360408401526135e1818587613a93565b600060208284031215613b6357600080fd5b813561296a816136fd565b6000610100808352613b838184018d8f613a93565b61ffff8c1660208501526001600160a01b038b811660408601528a1660608501526080840189905260a0840188905283810360c08501529050613bc7818688613a93565b91505082151560e08301529b9a5050505050505050505050565b81810381811115610a0157610a0161363e565b60ff8181168382160290811690818114613c1057613c1061363e565b5092915050565b60ff8181168382160190811115610a0157610a0161363e565b600082613c3f57613c3f6136b6565b500690565b600060018201613c5657613c5661363e565b5060010190565b600061ffff808316818103613c7457613c7461363e565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038616815260a060208201526000613cb660a08301876130ed565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60ff8281168282160390811115610a0157610a0161363e565b600181815b80851115613d31578160001904821115613d1757613d1761363e565b80851615613d2457918102915b93841c9390800290613cfb565b509250929050565b600082613d4857506001610a01565b81613d5557506000610a01565b8160018114613d6b5760028114613d7557613d91565b6001915050610a01565b60ff841115613d8657613d8661363e565b50506001821b610a01565b5060208310610133831016604e8410600b8410161715613db4575081810a610a01565b613dbe8383613cf6565b8060001904821115613dd257613dd261363e565b029392505050565b600061296a8383613d3956fea26469706673582212200a1dab118808bd969ee7f459fbecc5961fa3a507e35d7ba33814fbcb5bba4d1564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c80635e895f29116100f7578063a457c2d711610095578063f2fde38b11610064578063f2fde38b146105a2578063f803812d146105c2578063facd969a146105e2578063fb6ce32c1461061857600080fd5b8063a457c2d71461052f578063a9059cbb1461054f578063ad67325d1461056f578063dd62ed3e1461058257600080fd5b8063715018a6116100d1578063715018a6146104b35780638c3d86b4146104c85780638da5cb5b146104e857806395d89b411461051a57600080fd5b80635e895f291461043d5780635f1d78ae1461045d57806370a082311461047d57600080fd5b806318160ddd1161016f578063395093511161013e57806339509351146103bd5780633d972839146103dd5780634025f436146103fd57806351cff8d91461041d57600080fd5b806318160ddd14610346578063221c1fd11461035b57806323b872dd1461037b578063313ce5671461039b57600080fd5b806307e32904116101ab57806307e3290414610261578063095ea7b3146102815780630ca76175146102b1578063140b3eff146102d157600080fd5b806301fe5977146101dd57806304d470bd146101ff57806306fdde031461023f57600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004613050565b610638565b005b34801561020b57600080fd5b5061022c61021a3660046130d4565b60116020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024b57600080fd5b506102546107a9565b6040516102369190613133565b34801561026d57600080fd5b506101fd61027c3660046130d4565b61083b565b34801561028d57600080fd5b506102a161029c36600461315b565b6109ed565b6040519015158152602001610236565b3480156102bd57600080fd5b506101fd6102cc366004613187565b610a07565b3480156102dd57600080fd5b5061031e6102ec3660046131f3565b600c60205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b900460ff1683565b604080516001600160a01b039485168152939092166020840152151590820152606001610236565b34801561035257600080fd5b5060035461022c565b34801561036757600080fd5b5061022c610376366004613256565b610a8b565b34801561038757600080fd5b506102a16103963660046132d1565b610af9565b3480156103a757600080fd5b5060125b60405160ff9091168152602001610236565b3480156103c957600080fd5b506102a16103d836600461315b565b610b1d565b3480156103e957600080fd5b506101fd6103f83660046131f3565b610b3f565b34801561040957600080fd5b506103ab610418366004613312565b610d1d565b34801561042957600080fd5b506101fd610438366004613334565b610d60565b34801561044957600080fd5b506101fd610458366004613351565b610e6e565b34801561046957600080fd5b506102546104783660046130d4565b610e8d565b34801561048957600080fd5b5061022c610498366004613334565b6001600160a01b031660009081526001602052604090205490565b3480156104bf57600080fd5b506101fd610f27565b3480156104d457600080fd5b506101fd6104e33660046130d4565b610f3b565b3480156104f457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610236565b34801561052657600080fd5b50610254611091565b34801561053b57600080fd5b506102a161054a36600461315b565b6110a0565b34801561055b57600080fd5b506102a161056a36600461315b565b61111b565b6101fd61057d3660046133e4565b611129565b34801561058e57600080fd5b5061022c61059d366004613400565b611576565b3480156105ae57600080fd5b506101fd6105bd366004613334565b6115a1565b3480156105ce57600080fd5b506101fd6105dd36600461345c565b61161a565b3480156105ee57600080fd5b506105026105fd3660046130d4565b6012602052600090815260409020546001600160a01b031681565b34801561062457600080fd5b506101fd61063336600461355f565b611738565b61ffff84166000908152600c6020526040902060010154600160a01b900460ff166106b65760405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b60648201526084015b60405180910390fd5b604080516060810182523380825261ffff8088166000908152600c60208181528683206001908101546001600160a01b03908116838901908152888a01868152968d1686529390925292879020955186549082166001600160a01b0319909116178655905194909101805492511515600160a01b026001600160a81b031990931694909116939093171790915590517fb424121bd0b8c47446bd1b78766e14b5ea0296a02d034d6b92702c8e9f377cc4916107799187918691889190879061359a565b60405180910390a1505061ffff9081166000908152600d6020526040902080549190921661ffff19909116179055565b6060600480546107b8906135ee565b80601f01602080910402602001604051908101604052809291908181526020018280546107e4906135ee565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b6000818152600e602052604081208054610854906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610880906135ee565b80156108cd5780601f106108a2576101008083540402835291602001916108cd565b820191906000526020600020905b8154815290600101906020018083116108b057829003601f168201915b5050505050905060006108df82611b0c565b905060006108ec82611d9c565b6000858152601160205260408120549192505b60008281526010602052604090205460ff821610156109e5576000600c6000858460ff168151811061093357610933613628565b602002602001015161ffff1661ffff16815260200190815260200160002060000160009054906101000a90046001600160a01b031690506000601060008581526020019081526020016000208360ff168154811061099357610993613628565b60009182526020918290209181049091015460ff601f9092166101000a90041690506109d0826109cb83670de0b6b3a7640000613654565b611f35565b505080806109dd9061366b565b9150506108ff565b505050505050565b6000336109fb818585611ff6565b60019150505b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a505760405163c6829f8360e01b815260040160405180910390fd5b610a5b83838361211a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6000336001600160a01b03166310e569736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef919061368a565b9695505050505050565b600033610b07858285612170565b610b128585856121e4565b506001949350505050565b6000336109fb818585610b308383611576565b610b3a91906136a3565b611ff6565b61ffff81166000908152600c60209081526040808320815160608101835281546001600160a01b039081168252600190920154918216938101849052600160a01b90910460ff1615159181019190915291813190610b9e600a836136cc565b610ba9906007613654565b90506000836001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906136e0565b604051636ce5768960e11b81526001600160a01b038083166004830152306024830152604482018690529192509085169063d9caed1290606401600060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505086519150506001600160a01b038216610c9b57610c96818461238f565b610d14565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820185905283919082169063a9059cbb906044016020604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d11919061370b565b50505b50505050505050565b60106020528160005260406000208181548110610d3957600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b610d686124ad565b336001600160a01b038216610d8557610d81814761238f565b5050565b6040516370a0823160e01b815230600482015282906001600160a01b0382169063a9059cbb90849083906370a0823190602401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df9919061368a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e68919061370b565b50505050565b6001600160a01b0387163014610e8357600080fd5b5050505050505050565b600f6020526000908152604090208054610ea6906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed2906135ee565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505081565b610f2f6124ad565b610f396000612507565b565b6000818152601260205260409020546001600160a01b03163314610f5e57600080fd5b610f9f6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6000828152600f60205260409020805461104a9190610fbd906135ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe9906135ee565b80156110365780601f1061100b57610100808354040283529160200191611036565b820191906000526020600020905b81548152906001019060200180831161101957829003601f168201915b50505050508261255790919063ffffffff16565b600061107b61105883612564565b600654600a54600b546001600160401b039092169163ffffffff9091169061283c565b6000908152601160205260409020929092555050565b6060600580546107b8906135ee565b600033816110ae8286611576565b90508381101561110e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106ad565b610b128286868403611ff6565b6000336109fb8185856121e4565b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b60608152602001906001900390816111cc5790505061ffff88166000908152600c60205260409020600101549091506001600160a01b03811690600160a01b900460ff166112695761ffff88166000908152600c602052604081205487516001600160a01b0390911691829189919061124757611247613628565b60200260200101906001600160a01b031690816001600160a01b031681525050505b868360008151811061127d5761127d613628565b602002602001018181525050338560008151811061129d5761129d613628565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132191906136e0565b90506000826001600160a01b03166310e569736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611387919061368a565b90506001600160a01b03821615611491576040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f919061370b565b50604051633381899760e01b81526001600160a01b038416906333818997906114449088908b908d908c908b9060040161376c565b6000604051808303816000875af1158015611463573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148b9190810190613844565b50611510565b604051633381899760e01b81526001600160a01b0384169063338189979034906114c79089908c908e908d908c9060040161376c565b60006040518083038185885af11580156114e5573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261150e9190810190613844565b505b61ffff8a166000818152600c60209081526040918290205482519384526001600160a01b0316908301523382820152517fd6df7e7836dcad6338c5ef9f97973d038946a27d9c62e290a1fccf4a55a84c0b9181900360600190a150505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6115a96124ad565b6001600160a01b03811661160e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ad565b61161781612507565b50565b6116226124ad565b600061162d8561290e565b600081815260126020908152604080832080546001600160a01b0319166001600160a01b038916179055600f909152902090915061166b858261391a565b5060005b82518160ff1610156116f35760008281526010602052604090208351849060ff84169081106116a0576116a0613628565b6020908102919091018101518254600181018455600093845292829020918304909101805460ff928316601f9094166101000a9384029290930219909216179055806116eb8161366b565b91505061166f565b507fe31e0fb04d5e988b710ab2bf552b370b340ccf34049a4e9f406defc2868b74858585838560405161172994939291906139d9565b60405180910390a15050505050565b6000600c8161174d60408501602086016131f3565b61ffff1681526020810191909152604001600020546001600160a01b0316146117af5760405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b60448201526064016106ad565b6013546000906001600160a01b03166342d921066228de806117d76060860160408701613334565b60608601356000196117ec60a0890189613a4d565b6040516001600160e01b031960e089901b16815261181596959493929190600090600401613abc565b6020604051808303816000875af1158015611834573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185891906136e0565b90506001600160a01b03811663d1b8759b61187660a0850185613a4d565b61188360c0870187613a4d565b61189060e0890189613a4d565b6040518763ffffffff1660e01b81526004016118b196959493929190613b15565b600060405180830381600087803b1580156118cb57600080fd5b505af11580156118df573d6000803e3d6000fd5b505050506080820135156119525760405163debe2b0d60e01b815260006004820152608083013560248201526001600160a01b0382169063debe2b0d90604401600060405180830381600087803b15801561193957600080fd5b505af115801561194d573d6000803e3d6000fd5b505050505b6040516374cac47d60e01b815230600482015260006024820181905260448201819052606482018190526084820181905260a4820181905260c48201526001600160a01b038216906374cac47d9060e401600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b5050604080516060810182523381526001600160a01b0385166020820152925082019050611a0761014085016101208601613b51565b15159052600c6000611a1f60408601602087016131f3565b61ffff1681526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039182161782559284015160019091018054949092015192166001600160a81b031990931692909217600160a01b911515919091021790557f9bd97d9870b377402b7bb6ae42ef6263369f374498bdcf0f6f65ba00f5f28fb4611aae8380613a4d565b611abe60408601602087016131f3565b338560608801356080890135611ad86101008b018b613a4d565b611aea6101408d016101208e01613b51565b604051611b009a99989796959493929190613b6e565b60405180910390a15050565b60606000829050600281511015611b735760405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b60648201526084016106ad565b80600081518110611b8657611b86613628565b6020910101516001600160f81b031916600360fc1b148015611bfc575080600181518110611bb657611bb6613628565b6020910101516001600160f81b031916600f60fb1b1480611bfc575080600181518110611be557611be5613628565b6020910101516001600160f81b031916600b60fb1b145b611c545760405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b60648201526084016106ad565b8051600203611c73575050604080516000815260208101909152919050565b60006002808351611c849190613be1565b611c8e91906136cc565b90506000816001600160401b03811115611caa57611caa612f9b565b6040519080825280601f01601f191660200182016040528015611cd4576020820181803683370190505b50905060025b8351811015611d9357611d1684611cf28360016136a3565b81518110611d0257611d02613628565b01602001516001600160f81b03191661293e565b611d2b858381518110611d0257611d02613628565b611d36906010613bf4565b611d409190613c17565b60f81b826002611d508185613be1565b611d5a91906136cc565b81518110611d6a57611d6a613628565b60200101906001600160f81b031916908160001a905350611d8c6002826136a3565b9050611cda565b50949350505050565b606060048251611dac9190613c30565b15611e055760405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b60648201526084016106ad565b6000805b8351811015611e44576000611e1e8583612a14565b9050611e2e61ffff8216846136a3565b9250611e3d90506004826136a3565b9050611e09565b506000816001600160401b03811115611e5f57611e5f612f9b565b604051908082528060200260200182016040528015611e88578160200160208202803683370190505b5090506000805b8551811015611f2b576000611ea48783612a14565b90506000611ebc88611eb78560026136a3565b612a14565b905060005b8261ffff168161ffff161015611f1457818686611edd81613c44565b975081518110611eef57611eef613628565b61ffff9092166020928302919091019091015280611f0c81613c5d565b915050611ec1565b505050600481611f2491906136a3565b9050611e8f565b5090949350505050565b6001600160a01b038216611f8b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ad565b8060036000828254611f9d91906136a3565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0383166120585760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106ad565b6001600160a01b0382166120b95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106ad565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000838152600e60205260409020612132838261391a565b50827f9f87a8bdffc6b3f1a785d49b122c82d1202938cbecfdd5b26fc975ff923a892a836040516121639190613133565b60405180910390a2505050565b600061217c8484611576565b90506000198114610e6857818110156121d75760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106ad565b610e688484848403611ff6565b6001600160a01b0383166122485760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106ad565b6001600160a01b0382166122aa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106ad565b6001600160a01b038316600090815260016020526040902054818110156123225760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106ad565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906123829086815260200190565b60405180910390a3610e68565b804710156123df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ad565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461242c576040519150601f19603f3d011682016040523d82523d6000602084013e612431565b606091505b50509050806124a85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ad565b505050565b6000546001600160a01b03163314610f395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d818260008084612a71565b60606000612573610100612aef565b90506125ac6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082612b1090919063ffffffff16565b82516125ca9060028111156125c3576125c3613c7e565b8290612b29565b6040805180820190915260088152676c616e677561676560c01b60208201526125f4908290612b10565b604083015161260b9080156125c3576125c3613c7e565b604080518082019091526006815265736f7572636560d01b6020820152612633908290612b10565b6060830151612643908290612b10565b60a083015151156126d7576040805180820190915260048152636172677360e01b6020820152612674908290612b10565b61267d81612b62565b60005b8360a00151518110156126cd576126bd8460a0015182815181106126a6576126a6613628565b602002602001015183612b1090919063ffffffff16565b6126c681613c44565b9050612680565b506126d781612b86565b6080830151511561279b576000836020015160028111156126fa576126fa613c7e565b036127185760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152612749908290612b10565b612762836020015160028111156125c3576125c3613c7e565b6040805180820190915260078152667365637265747360c81b602082015261278b908290612b10565b608083015161279b908290612ba4565b60c083015151156128345760408051808201909152600981526862797465734172677360b81b60208201526127d1908290612b10565b6127da81612b62565b60005b8360c001515181101561282a5761281a8460c00151828151811061280357612803613628565b602002602001015183612ba490919063ffffffff16565b61282381613c44565b90506127dd565b5061283481612b86565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612894959493929190613c94565b6020604051808303816000875af11580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d7919061368a565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6000816040516020016129219190613133565b604051602081830303815290604052805190602001209050919050565b600060f882901c6030811080159061295a575060398160ff1611155b156129715761296a603082613cdd565b9392505050565b60618160ff1610158015612989575060668160ff1611155b156129a457612999606182613cdd565b61296a90600a613c17565b60418160ff16101580156129bc575060468160ff1611155b156129cc57612999604182613cdd565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e67000000000060448201526064016106ad565b8151600090612a248360026136a3565b1115612a685760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106ad565b50016002015190565b8051600003612a93576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115612aa657612aa6613c7e565b90816002811115612ab957612ab9613c7e565b90525060408401828015612acf57612acf613c7e565b90818015612adf57612adf613c7e565b9052506060909301929092525050565b612af7612f4f565b8051612b039083612bb1565b5060006020820152919050565b612b1d8260038351612c28565b81516124a89082612d41565b8151612b369060c2612d62565b50610d818282604051602001612b4e91815260200190565b604051602081830303815290604052612ba4565b612b6d816004612dcb565b600181602001818151612b8091906136a3565b90525050565b612b91816007612dcb565b600181602001818151612b809190613be1565b612b1d8260028351612c28565b604080518082019091526060815260006020820152612bd1602083613c30565b15612bf957612be1602083613c30565b612bec906020613be1565b612bf690836136a3565b91505b602080840183905260405180855260008152908184010181811015612c1d57600080fd5b604052509192915050565b6017816001600160401b031611612c4e578251610e689060e0600585901b168317612d62565b60ff816001600160401b031611612c8e578251612c76906018611fe0600586901b1617612d62565b508251610e68906001600160401b0383166001612de2565b61ffff816001600160401b031611612ccf578251612cb7906019611fe0600586901b1617612d62565b508251610e68906001600160401b0383166002612de2565b63ffffffff816001600160401b031611612d12578251612cfa90601a611fe0600586901b1617612d62565b508251610e68906001600160401b0383166004612de2565b8251612d2990601b611fe0600586901b1617612d62565b508251610e68906001600160401b0383166008612de2565b60408051808201909152606081526000602082015261296a83838451612e67565b6040805180820190915260608152600060208201528251516000612d878260016136a3565b905084602001518210612da857612da885612da3836002613654565b612f38565b8451602083820101858153508051821115612dc1578181525b5093949350505050565b81516124a890601f611fe0600585901b1617612d62565b6040805180820190915260608152600060208201528351516000612e0682856136a3565b90508560200151811115612e2357612e2386612da3836002613654565b60006001612e3386610100613dda565b612e3d9190613be1565b90508651828101878319825116178152508051831115612e5b578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115612e8a57600080fd5b8351516000612e9984836136a3565b90508560200151811115612eb657612eb686612da3836002613654565b855180518382016020019160009180851115612ed0578482525b505050602086015b60208610612f105780518252612eef6020836136a3565b9150612efc6020826136a3565b9050612f09602087613be1565b9550612ed8565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151612f448383612bb1565b50610e688382612d41565b6040518060400160405280612f77604051806040016040528060608152602001600081525090565b8152602001600081525090565b803561ffff81168114612f9657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612fd957612fd9612f9b565b604052919050565b600082601f830112612ff257600080fd5b81356001600160401b0381111561300b5761300b612f9b565b61301e601f8201601f1916602001612fb1565b81815284602083860101111561303357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561306657600080fd5b61306f85612f84565b935061307d60208601612f84565b925060408501356001600160401b038082111561309957600080fd5b6130a588838901612fe1565b935060608701359150808211156130bb57600080fd5b506130c887828801612fe1565b91505092959194509250565b6000602082840312156130e657600080fd5b5035919050565b6000815180845260005b81811015613113576020818501810151868301820152016130f7565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061296a60208301846130ed565b6001600160a01b038116811461161757600080fd5b6000806040838503121561316e57600080fd5b823561317981613146565b946020939093013593505050565b60008060006060848603121561319c57600080fd5b8335925060208401356001600160401b03808211156131ba57600080fd5b6131c687838801612fe1565b935060408601359150808211156131dc57600080fd5b506131e986828701612fe1565b9150509250925092565b60006020828403121561320557600080fd5b61296a82612f84565b60008083601f84011261322057600080fd5b5081356001600160401b0381111561323757600080fd5b60208301915083602082850101111561324f57600080fd5b9250929050565b60008060008060006080868803121561326e57600080fd5b853561327981613146565b9450602086013561328981613146565b9350604086013561329981613146565b925060608601356001600160401b038111156132b457600080fd5b6132c08882890161320e565b969995985093965092949392505050565b6000806000606084860312156132e657600080fd5b83356132f181613146565b9250602084013561330181613146565b929592945050506040919091013590565b6000806040838503121561332557600080fd5b50508035926020909101359150565b60006020828403121561334657600080fd5b813561296a81613146565b60008060008060008060008060e0898b03121561336d57600080fd5b88359750602089013561337f81613146565b9650604089013561338f81613146565b9550606089013561339f81613146565b945060808901356001600160401b038111156133ba57600080fd5b6133c68b828c0161320e565b999c989b5096999598969760a08701359660c0013595509350505050565b600080604083850312156133f757600080fd5b61317983612f84565b6000806040838503121561341357600080fd5b823561341e81613146565b9150602083013561342e81613146565b809150509250929050565b60006001600160401b0382111561345257613452612f9b565b5060051b60200190565b6000806000806080858703121561347257600080fd5b84356001600160401b038082111561348957600080fd5b61349588838901612fe1565b95506020915081870135818111156134ac57600080fd5b6134b889828a01612fe1565b95505060408701356134c981613146565b93506060870135818111156134dd57600080fd5b87019050601f810188136134f057600080fd5b80356135036134fe82613439565b612fb1565b81815260059190911b8201830190838101908a83111561352257600080fd5b928401925b8284101561355057833560ff811681146135415760008081fd5b82529284019290840190613527565b979a9699509497505050505050565b60006020828403121561357157600080fd5b81356001600160401b0381111561358757600080fd5b8201610140818503121561296a57600080fd5b600061ffff808816835260a060208401526135b860a08401886130ed565b86821660408501526001600160a01b038616606085015283810360808501526135e181866130ed565b9998505050505050505050565b600181811c9082168061360257607f821691505b60208210810361362257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a0157610a0161363e565b600060ff821660ff81036136815761368161363e565b60010192915050565b60006020828403121561369c57600080fd5b5051919050565b80820180821115610a0157610a0161363e565b634e487b7160e01b600052601260045260246000fd5b6000826136db576136db6136b6565b500490565b6000602082840312156136f257600080fd5b815161296a81613146565b801515811461161757600080fd5b60006020828403121561371d57600080fd5b815161296a816136fd565b600081518084526020808501945080840160005b838110156137615781516001600160a01b03168752958201959082019060010161373c565b509495945050505050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156137a557815184529284019290840190600101613789565b505050838103828501526137b98189613728565b905083810360408501526137cd8188613728565b905083810360608501526137e18187613728565b905083810360808501528085518083528383019150838160051b84010184880160005b8381101561383257601f198684030185526138208383516130ed565b94870194925090860190600101613804565b50909c9b505050505050505050505050565b6000602080838503121561385757600080fd5b82516001600160401b0381111561386d57600080fd5b8301601f8101851361387e57600080fd5b805161388c6134fe82613439565b81815260059190911b820183019083810190878311156138ab57600080fd5b928401925b828410156138c9578351825292840192908401906138b0565b979650505050505050565b601f8211156124a857600081815260208120601f850160051c810160208610156138fb5750805b601f850160051c820191505b818110156109e557828155600101613907565b81516001600160401b0381111561393357613933612f9b565b6139478161394184546135ee565b846138d4565b602080601f83116001811461397c57600084156139645750858301515b600019600386901b1c1916600185901b1785556109e5565b600085815260208120601f198616915b828110156139ab5788860151825594840194600190910190840161398c565b50858210156139c95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006139ec60808301876130ed565b6020838203818501526139ff82886130ed565b604085018790528481036060860152855180825282870193509082019060005b81811015613a3e57845160ff1683529383019391830191600101613a1f565b50909998505050505050505050565b6000808335601e19843603018112613a6457600080fd5b8301803591506001600160401b03821115613a7e57600080fd5b60200191503681900382131561324f57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815260018060a01b038716602082015285604082015284606082015260c060808201526000613af060c083018587613a93565b90506bffffffffffffffffffffffff60a01b831660a083015298975050505050505050565b606081526000613b2960608301888a613a93565b8281036020840152613b3c818789613a93565b905082810360408401526135e1818587613a93565b600060208284031215613b6357600080fd5b813561296a816136fd565b6000610100808352613b838184018d8f613a93565b61ffff8c1660208501526001600160a01b038b811660408601528a1660608501526080840189905260a0840188905283810360c08501529050613bc7818688613a93565b91505082151560e08301529b9a5050505050505050505050565b81810381811115610a0157610a0161363e565b60ff8181168382160290811690818114613c1057613c1061363e565b5092915050565b60ff8181168382160190811115610a0157610a0161363e565b600082613c3f57613c3f6136b6565b500690565b600060018201613c5657613c5661363e565b5060010190565b600061ffff808316818103613c7457613c7461363e565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038616815260a060208201526000613cb660a08301876130ed565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60ff8281168282160390811115610a0157610a0161363e565b600181815b80851115613d31578160001904821115613d1757613d1761363e565b80851615613d2457918102915b93841c9390800290613cfb565b509250929050565b600082613d4857506001610a01565b81613d5557506000610a01565b8160018114613d6b5760028114613d7557613d91565b6001915050610a01565b60ff841115613d8657613d8661363e565b50506001821b610a01565b5060208310610133831016604e8410600b8410161715613db4575081810a610a01565b613dbe8383613cf6565b8060001904821115613dd257613dd261363e565b029392505050565b600061296a8383613d3956fea26469706673582212200a1dab118808bd969ee7f459fbecc5961fa3a507e35d7ba33814fbcb5bba4d1564736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addRewardMechanism(string,string,address,uint8[])": {
        "details": "Only callable by the owner",
        "params": {
          "_functionForwader": "the address to set",
          "_rewardDistributions": "the reward distributions for the topK agents",
          "_sourceCode": "sourceID to Forwarder address",
          "_sourceName": "sourceID to Forwarder address"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_donID": "Chainlink's contract chainID => donID ",
          "_oracle": "The address of the Chainlink Function oracle",
          "_subscriptionId": "The subscription ID for Chainlink Functions",
          "_unlockContract": "The address of the Chainlink oracle Automation Forwarder"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseSubscription(uint16,uint256)": {
        "details": "PurchaseSubscription function for an agentID",
        "params": {
          "_agentID": "to subscribe",
          "_value": "array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendRequest(bytes32)": {
        "params": {
          "sourceID": "The ID of the source to send the request to"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint16)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_agentID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "AgentPlace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewardMechanism(string,string,address,uint8[])": {
        "notice": "Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder"
      },
      "constructor": {
        "notice": "Initializes the contract"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "sendRequest(bytes32)": {
        "notice": "Sends an HTTP request for character information"
      },
      "withdraw(uint16)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2508,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2629,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2635,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2637,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 6530,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 6532,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "agentPlaceTreasury",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6534,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "oracle",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6536,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "source",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 6539,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "gasLimit",
        "offset": 0,
        "slot": "10",
        "type": "t_uint32"
      },
      {
        "astId": 6541,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "donID",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 6553,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "agents",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint16,t_struct(AgentStruct)6548_storage)"
      },
      {
        "astId": 6557,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "agentVersions",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 6561,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "round_winners",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 6565,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "sources",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 6570,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "rewardDistributions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_array(t_uint8)dyn_storage)"
      },
      {
        "astId": 6574,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "requestToSource",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 6578,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "functionsForwarders",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5848,
        "contract": "contracts/AgentPlace.sol:AgentPlace",
        "label": "unlockContract",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IUnlockV12)5830"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUnlockV12)5830": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_struct(AgentStruct)6548_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ChainlinkConsumer.AgentStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentStruct)6548_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentStruct)6548_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.AgentStruct",
        "members": [
          {
            "astId": 6543,
            "contract": "contracts/AgentPlace.sol:AgentPlace",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6545,
            "contract": "contracts/AgentPlace.sol:AgentPlace",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6547,
            "contract": "contracts/AgentPlace.sol:AgentPlace",
            "label": "isOpenForContributions",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}