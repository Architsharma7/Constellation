{
  "address": "0x207D00FA80edcC976d678Ce5d1BC3F90B9edb827",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract IUnlockV12",
          "name": "_unlockContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "topkAgents",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "topkUsers",
          "type": "address[]"
        }
      ],
      "name": "RoundRewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "RoundWinners",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockSubscriptionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rewardCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "actualCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "name": "agentRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "threadID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "agentSubscriptionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentVersionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentVersionID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "agentVersionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardDistributions",
          "type": "uint256[]"
        }
      ],
      "name": "rewardMechanismRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sourceName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sourceCode",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_functionForwader",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardDistributions",
          "type": "uint256[]"
        }
      ],
      "name": "addRewardMechanism",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agentVersions",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "txHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "topics",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILogAutomation.Log",
          "name": "log",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkLog",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "extendSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "functionData",
      "outputs": [
        {
          "internalType": "address",
          "name": "functionForwarder",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "numberOfWinners",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "usersOrAgents",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_threadID",
          "type": "string"
        }
      ],
      "name": "purchaseSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "agentName",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "agentID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionExpirationDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "keyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisPoint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "lockName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lockSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseTokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rewardCategory",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "actualCategory",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isOpenForContributions",
              "type": "bool"
            }
          ],
          "internalType": "struct RocketAI.AgentInitConfig",
          "name": "agentConfig",
          "type": "tuple"
        }
      ],
      "name": "registerAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_agentVersionID",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_agentVersionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "registerAgentVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "rewardDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestID",
          "type": "bytes32"
        }
      ],
      "name": "rewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roundWinners",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sources",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "keyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaa4a2fc4de30a752fed5406fe8b21c69996a2a8679366b77b770c63489b07c77",
  "receipt": {
    "to": null,
    "from": "0x9C5e3cAC8166eD93F76BC0469b8Bf3ca715bA6B7",
    "contractAddress": "0x207D00FA80edcC976d678Ce5d1BC3F90B9edb827",
    "transactionIndex": 7,
    "gasUsed": "4684363",
    "logsBloom": "0x
    "blockHash": "0xbe1f2fa2ac8076db934d0e3d4ea26c3cd58c87a004f9fd598a8f174827993293",
    "transactionHash": "0xaa4a2fc4de30a752fed5406fe8b21c69996a2a8679366b77b770c63489b07c77",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 43259582,
        "transactionHash": "0xaa4a2fc4de30a752fed5406fe8b21c69996a2a8679366b77b770c63489b07c77",
        "address": "0x207D00FA80edcC976d678Ce5d1BC3F90B9edb827",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xbe1f2fa2ac8076db934d0e3d4ea26c3cd58c87a004f9fd598a8f174827993293"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 43259582,
        "transactionHash": "0xaa4a2fc4de30a752fed5406fe8b21c69996a2a8679366b77b770c63489b07c77",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c5e3cac8166ed93f76bc0469b8bf3ca715ba6b7",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000018f69ae0ebc50000000000000000000000000000000000000000000000000005759da045021ecc0000000000000000000000000000000000000000000022d152baca9c0ac9acfd000000000000000000000000000000000000000000000000055ca705641659cc0000000000000000000000000000000000000000000022d152d3c136ebb571fd",
        "logIndex": 22,
        "blockHash": "0xbe1f2fa2ac8076db934d0e3d4ea26c3cd58c87a004f9fd598a8f174827993293"
      }
    ],
    "blockNumber": 43259582,
    "cumulativeGasUsed": "5791301",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C",
    "0x1FF7e338d5E582138C46044dc238543Ce555C963",
    "0x66756e2d706f6c79676f6e2d6d756d6261692d31000000000000000000000000",
    785
  ],
  "numDeployments": 1,
  "solcInputHash": "7778c90f53a1688859f6893881e72059",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IUnlockV12\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"topkAgents\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"topkUsers\",\"type\":\"address[]\"}],\"name\":\"RoundRewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"RoundWinners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockSubscriptionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"name\":\"agentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"threadID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"agentSubscriptionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentVersionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentVersionID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentMetadataCID\",\"type\":\"string\"}],\"name\":\"agentVersionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardDistributions\",\"type\":\"uint256[]\"}],\"name\":\"rewardMechanismRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sourceName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sourceCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_functionForwader\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDistributions\",\"type\":\"uint256[]\"}],\"name\":\"addRewardMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agentVersions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ILogAutomation.Log\",\"name\":\"log\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkLog\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"extendSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"functionData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"functionForwarder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numberOfWinners\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"usersOrAgents\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_threadID\",\"type\":\"string\"}],\"name\":\"purchaseSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionExpirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lockName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"internalType\":\"struct RocketAI.AgentInitConfig\",\"name\":\"agentConfig\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_agentVersionID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_agentVersionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_agentMetadataCID\",\"type\":\"string\"}],\"name\":\"registerAgentVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rewardDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"}],\"name\":\"rewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roundWinners\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addRewardMechanism(string,string,address,uint256[])\":{\"details\":\"Only callable by the owner\",\"params\":{\"_functionForwader\":\"chainlink automation forwarder address\",\"_rewardDistributions\":\"the reward distributions for the topK agents\",\"_sourceCode\":\"sourceID to Forwarder address\",\"_sourceName\":\"sourceID to Forwarder address\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_donID\":\"Chainlink's contract chainID => donID\",\"_oracle\":\"The address of the Chainlink Function oracle\",\"_subscriptionId\":\"The subscription ID for Chainlink Functions\",\"_unlockContract\":\"The address of the Chainlink oracle Automation Forwarder\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseSubscription(uint32,uint256,string)\":{\"details\":\"PurchaseSubscription function for an agentID\",\"params\":{\"_agentID\":\"to subscribe\",\"_value\":\"array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendRequest(bytes32)\":{\"params\":{\"sourceID\":\"The ID of the source to send the request to\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint32)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_agentID\":\"to withdraw money from the lock contract\"}}},\"title\":\"RocketAI (Decentralized Artificial Intelligence Marketplace)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewardMechanism(string,string,address,uint256[])\":{\"notice\":\"Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder\"},\"constructor\":{\"notice\":\"Initializes the contract\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"sendRequest(bytes32)\":{\"notice\":\"Sends an HTTP request for character information\"},\"withdraw(uint32)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"notice\":\"@dev\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketAI.sol\":\"RocketAI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/ChainlinkConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\nimport {ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Helpers} from \\\"./library/Helpers.sol\\\";\\n\\n/**\\n * @title ChainlinkConsumer\\n * @notice \\n * @dev \\n */\\nabstract contract ChainlinkConsumer is FunctionsClient, Ownable , ERC20{\\n\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    uint64 subscriptionId;\\n\\n    uint256 agentPlaceTreasury;\\n\\n    // Router address Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n    address oracle;\\n\\n    //Callback gas limit\\n    uint32 gasLimit = 300000;\\n\\n    uint256 max = type(uint).max;\\n\\n    uint256 month = 31 days;\\n\\n    // donID\\n    bytes32 donID;\\n\\n    struct AgentStruct {\\n        address creator;\\n        address lockAddress;\\n        bool isOpenForContributions;\\n    }\\n\\n    struct RequestData {\\n        bool executed;\\n        bytes32 sourceID;\\n    }\\n\\n    struct FunctionData {\\n        address functionForwarder;\\n        uint8 numberOfWinners;\\n        // users => true , agents => false\\n        bool usersOrAgents;\\n    }\\n\\n    // Mapping from agentID to agentStruct\\n    mapping(uint32 => AgentStruct) public agents;\\n\\n    // Mapping from agentID to agentVersionID\\n    mapping(uint32 => uint32) public agentVersions;\\n\\n    // Mapping from requestID to response containing the topK agents\\n    mapping(bytes32 => bytes) public roundWinners;\\n\\n    // JavaScript source codes for the reward mechanisms\\n    mapping(bytes32 => string) public sources;\\n\\n    // Reward distributions for the reward mechanisms\\n    mapping(bytes32 => mapping(uint8 => uint256)) public rewardDistributions;\\n\\n    // Mapping from sourceID to functionForwarder that can call the performUpkeep\\n    mapping(bytes32 => FunctionData) public functionData;\\n\\n    // Mapping from requestID to sourceID \\n    mapping(bytes32 => RequestData) public requestData;\\n\\n    // Event to log responses\\n    event RoundWinners(\\n        bytes32 requestId,\\n        bytes32 sourceID,\\n        bytes response\\n    );\\n\\n    event rewardMechanismRegistered(\\n        string sourceName,\\n        string sourceCode,\\n        bytes32 sourceID,\\n        uint256[] rewardDistributions\\n    );\\n\\n    event RoundRewardsDistributed(\\n        bytes32 requestId,\\n        bytes32 sourceID,\\n        uint32[] topkAgents,\\n        address[] topkUsers\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _donID Chainlink's contract chainID => donID \\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) FunctionsClient(_oracle) ERC20(\\\"DECENTRALIZED AI MARKET\\\", \\\"DAIM\\\"){\\n\\n        subscriptionId = _subscriptionId;\\n\\n        donID = _donID;\\n    }\\n\\n    /// @notice Set the setRewardMechanism that `performUpkeep` is called from\\n    /// a trusted address the chainlink forwarder\\n    /// @dev Only callable by the owner\\n    /// @param _sourceName sourceID to Forwarder address\\n    /// @param _sourceCode sourceID to Forwarder address\\n    /// @param _functionForwader chainlink automation forwarder address\\n    /// @param _rewardDistributions the reward distributions for the topK agents\\n    function addRewardMechanism(\\n        string memory _sourceName, \\n        string memory _sourceCode, \\n        address _functionForwader,\\n        uint256[] memory _rewardDistributions\\n    ) external onlyOwner {\\n        bytes32 _sourceID = createSourceID(_sourceName);\\n\\n        if(_sourceID == createSourceID(\\\"usersRewardMechanism\\\")){\\n            functionData[_sourceID].usersOrAgents = true;\\n        }\\n        uint8 size = uint8(_rewardDistributions.length);\\n\\n        functionData[_sourceID].numberOfWinners = size;\\n        functionData[_sourceID].functionForwarder = _functionForwader;\\n\\n        sources[_sourceID] = _sourceCode;\\n        for(uint8 i = 0; i < size; i++){\\n            rewardDistributions[_sourceID][i] = _rewardDistributions[i];\\n        }\\n        emit rewardMechanismRegistered(_sourceName, _sourceCode, _sourceID, _rewardDistributions);\\n    }\\n\\n    /**\\n     * @notice Sends an HTTP request for character information\\n     * @param sourceID The ID of the source to send the request to\\n     */\\n    function sendRequest(\\n        bytes32 sourceID\\n    ) external {\\n        require(functionData[sourceID].functionForwarder == msg.sender);\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(sources[sourceID]); // Initialize the request with JS code\\n\\n        // Send the request and store the request ID\\n        bytes32 reqID = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donID\\n        );\\n\\n        requestData[reqID].sourceID = sourceID;\\n    }\\n\\n    /**\\n     * @notice Callback function for fulfilling a request\\n     * @param requestId The ID of the request to fulfill\\n     * @param response The HTTP response data\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory /* err */\\n    ) internal override {\\n\\n        roundWinners[requestId] = response;\\n        // Emit an event to log the RoundWinners response from a sourceID mechanism\\n        emit RoundWinners(requestId, requestData[requestId].sourceID, response);\\n    }\\n\\n    function rewardsDistribution(bytes32 _requestID) public{\\n\\n        require(requestData[_requestID].executed == false, \\\"Already executed\\\");\\n        \\n        requestData[_requestID].executed = true;\\n\\n        bytes32 _sourceID = requestData[_requestID].sourceID;\\n\\n        uint8 size = functionData[_sourceID].numberOfWinners;\\n\\n        if(functionData[_sourceID].usersOrAgents){\\n\\n            uint32[] memory topkAgents = new uint32[](1);\\n\\n            address[] memory topkUsers = Helpers.splitConcatenatedAddresses(roundWinners[_requestID]);\\n            // Minting tokens to the topK users\\n            for(uint8 i = 0; i < size; i++){\\n                address tempWinner = topkUsers[i];\\n                uint256 tempReward = rewardDistributions[_sourceID][i];\\n                // Minting tokens to the topK agents \\n                _mint(tempWinner, tempReward * 10 ** 18 );\\n            }\\n\\n            emit RoundRewardsDistributed(_requestID, _sourceID, topkAgents, topkUsers);\\n\\n        }else{      \\n\\n            uint32[] memory topkAgents = Helpers.decodeBytesToUint32Array(roundWinners[_requestID]);\\n\\n            address[] memory agentCreators = new address[](size);\\n            // Minting tokens to the topK agents\\n            for(uint8 i = 0; i < functionData[_sourceID].numberOfWinners; i++){\\n                address tempWinner = agents[topkAgents[i]].creator;\\n\\n                agentCreators[i] = tempWinner;\\n\\n                uint256 tempReward = rewardDistributions[_sourceID][i];\\n                // Minting tokens to the topK agents \\n                _mint(tempWinner, tempReward * 10 ** 18 );\\n            }\\n\\n            emit RoundRewardsDistributed(_requestID, _sourceID, topkAgents, agentCreators);\\n        }\\n    }\\n     \\n    function createSourceID(string memory _sourceID) internal pure returns(bytes32){\\n        return keccak256(abi.encode(_sourceID));\\n    }\\n}\",\"keccak256\":\"0x5e465283dc7d958e65d5713e11378d1c6759c971a5a019587904f89203bb2598\",\"license\":\"MIT\"},\"contracts/RocketAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ChainlinkConsumer} from \\\"./ChainlinkConsumer.sol\\\";\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILogAutomation} from \\\"./interfaces/ILogAutomation.sol\\\";\\n\\nimport { Base64 } from \\\"./library/Base64.sol\\\";\\n\\n/**\\n * @title RocketAI (Decentralized Artificial Intelligence Marketplace)\\n * @notice\\n * @dev\\n */\\ncontract RocketAI is ChainlinkConsumer , ILogAutomation {\\n\\n    IUnlockV12 unlockContract;\\n\\n    struct AgentInitConfig {\\n        string agentName; //  assistant Id\\n        uint32 agentID; // assistant id of the assitant model into uint32\\n        uint subscriptionExpirationDuration; // Take from Creator\\n        address tokenAddress; // native for now\\n        uint keyPrice; // amount for the Sub\\n        uint basisPoint; // referre fee i.e. 100point == 1%\\n        string lockName; // `Subscription of AssistantName`\\n        string lockSymbol; // SOA``\\n        string baseTokenURI;\\n        string rewardCategory; // Category\\n        string actualCategory; // Category\\n        bool isOpenForContributions; // check to make it open For Contributions\\n    }\\n\\n    event agentRegistered(\\n        string agentName,\\n        uint32 agentID,\\n        address creator,\\n        address unlockSubscriptionContract,\\n        uint keyPrice,\\n        uint basisPoint,\\n        string rewardCategory,\\n        string actualCategory,\\n        bool isOpenForContributions\\n    );\\n\\n    event agentVersionRegistered(\\n        uint32 agentID,\\n        string agentVersionName,\\n        uint32 agentVersionID,\\n        address creator,\\n        string agentMetadataCID\\n    );\\n\\n    event agentSubscriptionPurchased(\\n        uint32 agentID,\\n        uint256 tokenId,\\n        string threadID,\\n        address agentCreator,\\n        address subscriber\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _unlockContract The address of the Chainlink oracle Automation Forwarder\\n    /// @param _donID Chainlink's contract chainID => donID\\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        IUnlockV12 _unlockContract,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) ChainlinkConsumer(_oracle, _donID, _subscriptionId) {\\n        unlockContract = _unlockContract;\\n    }\\n\\n    function registerAgent(AgentInitConfig calldata agentConfig) external {\\n        require(\\n            agents[agentConfig.agentID].creator == address(0),\\n            \\\"agent already exists\\\"\\n        );\\n\\n        address newLockAddress = unlockContract.createLock(\\n            // Expiration duration of subscription\\n            month,\\n            agentConfig.tokenAddress,\\n            agentConfig.keyPrice,\\n            max,\\n            agentConfig.lockName,\\n            bytes12(0)\\n        );\\n        IPublicLockV12(newLockAddress).setLockMetadata(\\n            agentConfig.lockName,\\n            agentConfig.lockSymbol,\\n            agentConfig.baseTokenURI\\n        );\\n        if (agentConfig.basisPoint > 0)\\n            IPublicLockV12(newLockAddress).setReferrerFee(\\n                address(0),\\n                agentConfig.basisPoint\\n            );\\n        IPublicLockV12(newLockAddress).setEventHooks(\\n            // onKeyPurchase hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            // tokenURI hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n        IPublicLockV12(newLockAddress).updateLockConfig(month, max, max);\\n        agents[agentConfig.agentID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: newLockAddress,\\n            isOpenForContributions: agentConfig.isOpenForContributions\\n        });\\n\\n        emit agentRegistered(\\n            agentConfig.agentName,\\n            agentConfig.agentID,\\n            msg.sender,\\n            newLockAddress,\\n            agentConfig.keyPrice,\\n            agentConfig.basisPoint,\\n            agentConfig.rewardCategory,\\n            agentConfig.actualCategory,\\n            agentConfig.isOpenForContributions\\n        );\\n    }\\n\\n    function registerAgentVersion(\\n        uint32 _agentID,\\n        uint32 _agentVersionID,\\n        string memory _agentVersionName,\\n        string memory _agentMetadataCID\\n    ) external {\\n        require(\\n            agents[_agentID].isOpenForContributions,\\n            \\\"agent is not open for contributions\\\"\\n        );\\n\\n        require(\\n            agents[_agentVersionID].creator == address(0), \\n            \\\"agent already exists\\\"\\n        );\\n\\n        // Check Subscription plan\\n        agents[_agentVersionID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: agents[_agentID].lockAddress,\\n            isOpenForContributions: false\\n        });\\n\\n        emit agentVersionRegistered(\\n            _agentID,\\n            _agentVersionName,\\n            _agentVersionID,\\n            msg.sender,\\n            _agentMetadataCID\\n        );\\n\\n        agentVersions[_agentVersionID] = _agentID;\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _agentID to subscribe\\n     * @param _value array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n     */\\n    function purchaseSubscription(\\n        uint32 _agentID,\\n        uint256 _value,\\n        string memory _threadID\\n    ) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n        uint256[] memory tokenID = new uint256[](1);\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        // If the agent that we want to subscribe is a subVersion then\\n        // Pay the main agentID and give a referre fee to the contributor\\n        // Of this new agent Version. Referre fee is defined in the registerAgent function.\\n        if (!agents[_agentID].isOpenForContributions) {\\n            address referrer = agents[_agentID].creator;\\n            _referrers[0] = referrer;\\n        }\\n        _values[0] = _value;\\n        _recipients[0] = msg.sender;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n\\n            tokenID = IPublicLockV12(agentLockAddress).purchase(\\n                _values,\\n                _recipients,\\n                _referrers,\\n                _keyManagers,\\n                _data\\n            );\\n        } else {\\n            tokenID = IPublicLockV12(agentLockAddress).purchase{value: msg.value}(\\n                _values,\\n                _recipients,\\n                _referrers,\\n                _keyManagers,\\n                _data\\n            );\\n        }\\n\\n        emit agentSubscriptionPurchased(\\n            _agentID,\\n            tokenID[0],\\n            _threadID,\\n            agents[_agentID].creator,\\n            msg.sender\\n        );\\n    }\\n\\n    function extendSubscription(uint256 _value, uint256 _tokenId, uint32 _agentID) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n\\n        bytes memory _data;\\n        address _referrer;\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n\\n        if (!agents[_agentID].isOpenForContributions) {\\n            _referrer = agents[_agentID].creator;\\n        }\\n\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n            IPublicLockV12(agentLockAddress).extend(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        } else {\\n            IPublicLockV12(agentLockAddress).extend{value: msg.value}(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        }\\n    } \\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _agentID to withdraw money from the lock contract\\n     */\\n    function withdraw(uint32 _agentID) external {\\n        AgentStruct memory _agent = agents[_agentID];\\n        IPublicLockV12 AgentLockContract = IPublicLockV12(_agent.lockAddress);\\n        uint balance = address(_agent.lockAddress).balance;\\n        uint amountToTransfer = (balance / 10) * 7;\\n        address tokenAddress = AgentLockContract.tokenAddress();\\n        AgentLockContract.withdraw(\\n            tokenAddress,\\n            payable(address(this)),\\n            balance\\n        );\\n        address payable withdrawer = payable(_agent.creator);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, amountToTransfer);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, amountToTransfer);\\n        }\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw(address tokenAddress) external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, address(this).balance);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    // Chainlink log automation functions\\n\\n    function checkLog(\\n        Log calldata log,\\n        bytes memory\\n    ) external pure returns (bool upkeepNeeded, bytes memory performData) {\\n        upkeepNeeded = true;\\n        performData = abi.encode(log.topics[1]);\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        bytes32 _requestID = abi.decode(performData, (bytes32));\\n        rewardsDistribution(_requestID);\\n    }\\n\\n    // Unlock Protocol custom hooks\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view {\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(\\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice) {\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n\\n    function tokenURI(\\n        address lockAddress, \\n        address operator, \\n        address owner, \\n        uint256 keyId, \\n        uint256 expirationTimestamp\\n    ) external pure returns (string memory){\\n        return Base64.tokenURI(lockAddress, operator, owner, keyId, expirationTimestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xee10c4e5861f003c9a3174d9bcdb7839a5e0977c6511d94bd761cfbb44630c49\",\"license\":\"MIT\"},\"contracts/interfaces/ILogAutomation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILogAutomation {\\n    struct Log {\\n        uint256 index; // Index of the log in the block\\n        uint256 timestamp; // Timestamp of the block containing the log\\n        bytes32 txHash; // Hash of the transaction containing the log\\n        uint256 blockNumber; // Number of the block containing the log\\n        bytes32 blockHash; // Hash of the block containing the log\\n        address source; // Address of the contract that emitted the log\\n        bytes32[] topics; // Indexed topics of the log\\n        bytes data; // Data of the log\\n    }\\n    function checkLog(\\n        Log calldata log,\\n        bytes memory checkData\\n    ) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n    function performUpkeep(bytes calldata performData) external;\\n}\",\"keccak256\":\"0xd856acf7228c3e6d287b73050e652e7234bb1343348b38a2721ae5bc8179e15b\",\"license\":\"MIT\"},\"contracts/library/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n    hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n    hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n    hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n        // set the actual output length\\n            mstore(result, encodedLen)\\n\\n        // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n        // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n        // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n        // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n            // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n            // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n        // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n        // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n        // set the actual output length\\n            mstore(result, decodedLen)\\n\\n        // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n        // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n        // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n        // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n            // read 4 characters\\n                dataPtr := add(dataPtr, 4)\\n                let input := mload(dataPtr)\\n\\n            // write 3 bytes\\n                let output := add(\\n                add(\\n                shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                add(\\n                shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function tokenURI(address /* lockAddress */, address /* operator */ , address owner, uint256 keyId, uint256 expirationTimestamp) internal pure returns (string memory) {\\n        string memory ownerStr = Strings.toHexString(owner);\\n        string memory keyIdStr = Strings.toString(keyId);\\n        string memory expirationTimestampStr = Strings.toString(expirationTimestamp);\\n\\n\\n        string memory encodedSvg = Base64.encode(bytes(string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"512\\\" height=\\\"512\\\">',\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#EFEFEF\\\" />',\\n                '<text x=\\\"50%\\\" y=\\\"33%\\\" font-family=\\\"Verdana\\\" font-size=\\\"18\\\" fill=\\\"black\\\" font-weight=\\\"bold\\\" text-anchor=\\\"middle\\\">Owner: ', ownerStr, '</text>',\\n                '<text x=\\\"50%\\\" y=\\\"48%\\\" font-family=\\\"Verdana\\\" font-size=\\\"18\\\" fill=\\\"black\\\" font-weight=\\\"bold\\\" text-anchor=\\\"middle\\\">Key ID: ', keyIdStr, '</text>',\\n                '<text x=\\\"50%\\\" y=\\\"63%\\\" font-family=\\\"Verdana\\\" font-size=\\\"18\\\" fill=\\\"black\\\" font-weight=\\\"bold\\\" text-anchor=\\\"middle\\\">Expiration Timestamp: ', expirationTimestampStr, '</text>',\\n                '</svg>'\\n            )\\n        )));\\n\\n        return string(\\n            abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                            '{',\\n                            '\\\"name\\\":\\\"Your Token Name #', keyIdStr, '\\\",',\\n                            '\\\"description\\\":\\\"Subscription token for the AI Market\\\",',\\n                            '\\\"image\\\": \\\"', 'data:image/svg+xml;base64,', encodedSvg,\\n                            '}'\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0xd367a584be45f68573b8862f511205ea633ee4399f272bf7ece278786d262766\",\"license\":\"MIT\"},\"contracts/library/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary Helpers {\\n\\n    function stringToBytes(string memory data) internal pure returns (bytes memory) {\\n        bytes memory temp = bytes(data);\\n        require(temp.length >= 2, \\\"Source string not properly formatted.\\\");\\n        require(temp[0] == '0' && (temp[1] == 'x' || temp[1] == 'X'), \\\"Source string must start with '0x'.\\\");\\n\\n        if (temp.length == 2) {\\n            // String is only '0x'\\n            return new bytes(0);\\n        }\\n\\n        uint256 byteLength = (temp.length - 2) / 2;\\n        bytes memory byteArray = new bytes(byteLength);\\n        \\n        for (uint256 i = 2; i < temp.length; i += 2) {\\n            byteArray[(i - 2) / 2] = bytes1(toByte(temp[i]) * 16 + toByte(temp[i + 1]));\\n        }\\n\\n        return byteArray;\\n    }\\n\\n    function toByte(bytes1 char) internal pure returns (uint8) {\\n        uint8 byteValue = uint8(char);\\n        if (byteValue >= 48 && byteValue <= 57) {  // '0' - '9'\\n            return byteValue - 48;\\n        }\\n        if (byteValue >= 97 && byteValue <= 102) { // 'a' - 'f'\\n            return byteValue - 97 + 10;\\n        }\\n        if (byteValue >= 65 && byteValue <= 70) {  // 'A' - 'F'\\n            return byteValue - 65 + 10;\\n        }\\n        revert(\\\"Invalid character in string\\\");\\n    }\\n\\n    function decodeBytesToUint32Array(bytes memory input) internal pure returns (uint32[] memory) {\\n\\n        string memory decodedString = string(input);\\n\\n        bytes memory data = stringToBytes(decodedString);\\n\\n        require(data.length % 4 == 0, \\\"Data length must be a multiple of 4\\\");\\n\\n        uint32[] memory decodedArray = new uint32[](data.length / 4);\\n\\n        for (uint256 i = 0; i < decodedArray.length; i++) {\\n            decodedArray[i] = toUint32(data, i * 4);\\n        }\\n\\n        return decodedArray;\\n    }\\n\\n    function toUint32(bytes memory data, uint256 startIndex) internal pure returns (uint32) {\\n        require(startIndex + 4 <= data.length, \\\"Index out of bounds\\\");\\n\\n        uint32 value;\\n        assembly {\\n            value := mload(add(add(data, 0x4), startIndex))\\n        }\\n        return value;\\n    }\\n\\n    function splitConcatenatedAddresses(bytes memory input) internal pure returns (address[] memory) {\\n\\n        string memory decodedString = string(input);\\n\\n        bytes memory data = stringToBytes(decodedString);\\n\\n        require(data.length % 20 == 0, \\\"Data length must be a multiple of 20 bytes\\\");\\n\\n        uint256 numberOfAddresses = data.length / 20;\\n        address[] memory addresses = new address[](numberOfAddresses);\\n\\n        for (uint256 i = 0; i < numberOfAddresses; i++) {\\n            bytes memory addressBytes = new bytes(20);\\n            for (uint256 j = 0; j < 20; j++) {\\n                addressBytes[j] = data[i * 20 + j];\\n            }\\n            addresses[i] = bytesToAddress(addressBytes);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n}\",\"keccak256\":\"0x9659880a5875d5a0c7c16b732280144e66b0a3f5c23c8b6f7dbccd9a25137c42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200040c57601f90601f19906001600160401b0362005409388190038581018516840191908383118584101762000411578085926080946040528339810103126200040c5781516001600160a01b0393848216918290036200040c5760209283850151968688168098036200040c5760606040870151960151948286168096036200040c576200009162000427565b93601785527f444543454e5452414c495a4544204149204d41524b455400000000000000000082860152620000c562000427565b91600496878452634441494d60e01b82850152608052600091825460018060a01b03199b338d83161785553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a38651868111620003f9578854976001988981811c91168015620003ee575b85821014620003db5790818884931162000388575b508490888311600114620003275786926200031b575b5050600019600383901b1c191690881b1788555b835195861162000308576005978854908882811c92168015620002fd575b84831014620002ea5750858111620002a4575b50819486116001146200023e5750509183949184939462000232575b50501b916000199060031b1c19161790555b61249f60a51b63ffffffff60a01b1960085416176008556000196009556228de80600a5560018060401b03196006541617600655600b556013541617601355604051614fc190816200044882396080518181816106550152612c920152f35b015192503880620001c1565b8783528183209493928692918316915b888383106200028957505050106200026f575b505050811b019055620001d3565b015160001960f88460031b161c1916905538808062000261565b8587015188559096019594850194879350908101906200024e565b888452828420868089018b1c820192858a10620002e0575b018a1c019088905b828110620002d4575050620001a5565b858155018890620002c4565b92508192620002bc565b634e487b7160e01b855260229052602484fd5b91607f169162000192565b634e487b7160e01b835260418852602483fd5b01519050388062000160565b90848b9416918c885286882092885b8882821062000371575050841162000357575b505050811b01885562000174565b015160001960f88460031b161c1916905538808062000349565b8385015186558e9790950194938401930162000336565b9091508a86528486208880850160051c820192878610620003d1575b918c91869594930160051c01915b828110620003c25750506200014a565b8881558594508c9101620003b2565b92508192620003a4565b634e487b7160e01b865260228b52602486fd5b90607f169062000135565b634e487b7160e01b845260418952602484fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b03811183821017620004115760405256fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306fdde031461025b57806307e3290414610256578063095ea7b3146102515780630c92ecf71461024c5780630ca761751461024757806318160ddd14610242578063221c1fd11461023d57806323b872dd14610238578063313ce567146102335780633661346b1461022e578063395093511461022957806340691db4146102245780634585e33b1461021f57806351cff8d91461021a578063584992de146102155780635e895f29146102105780635f1d78ae1461020b57806362e16bd31461020657806370a0823114610201578063715018a6146101fc57806381bb4250146101f75780638c3d86b4146101f25780638da5cb5b146101ed57806395d89b41146101e8578063988b93ad146101e35780639d58754f146101de5780639f1ea81b146101d9578063a457c2d7146101d4578063a9059cbb146101cf578063a9cf7519146101ca578063aa9224cd146101c5578063ba30621e146101c0578063dd62ed3e146101bb578063e9239117146101b6578063f2fde38b146101b15763fe5f49ac0361000e57612495565b6123ce565b612055565b611ff2565b611f93565b611e31565b611bee565b611bc4565b611b12565b611adc565b611a8f565b6115f3565b61154c565b611523565b61143b565b6110ca565b61106f565b611032565b610e8e565b610e3d565b610ceb565b610cae565b610bb0565b610b68565b610aa5565b610a31565b6109f7565b6109db565b610908565b610849565b6107fe565b610606565b61053b565b6103de565b6103b1565b6102cc565b600091031261026b57565b600080fd5b60005b8381106102835750506000910152565b8181015183820152602001610273565b906020916102ac81518092818552858086019101610270565b601f01601f1916010190565b9060206102c9928181520190610293565b90565b3461026b576000806003193601126103ae5760405190806004546102ef81610d52565b808552916001918083169081156103845750600114610329575b6103258561031981870382610492565b604051918291826102b8565b0390f35b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061036c57505050810160200161031982610325610309565b80546020858701810191909152909301928101610351565b8695506103259693506020925061031994915060ff191682840152151560051b8201019293610309565b80fd5b3461026b57602036600319011261026b57610019600435613ca8565b6001600160a01b0381160361026b57565b3461026b57604036600319011261026b576104086004356103fe816103cd565b602435903361274c565b602060405160018152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161043c57604052565b610413565b604081019081106001600160401b0382111761043c57604052565b606081019081106001600160401b0382111761043c57604052565b602081019081106001600160401b0382111761043c57604052565b90601f801991011681019081106001600160401b0382111761043c57604052565b604051906104c08261045c565b565b6001600160401b03811161043c57601f01601f191660200190565b81601f8201121561026b578035906104f4826104c2565b926105026040519485610492565b8284526020838301011161026b57816000926020809301838601378301015290565b6001600160401b03811161043c5760051b60200190565b3461026b57608036600319011261026b576001600160401b0360043581811161026b5761056c9036906004016104dd565b9060243581811161026b576105859036906004016104dd565b60443590610592826103cd565b60643592831161026b573660238401121561026b578260040135936105b685610524565b936105c46040519586610492565b85855260209560248787019160051b8301019136831161026b57602401905b8282106105f7575050506100199450612877565b813581529087019087016105e3565b3461026b57606036600319011261026b576001600160401b0360043560243582811161026b5761063a9036906004016104dd565b60443583811161026b576106529036906004016104dd565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036107ec57600092828452602090600e82526040852091835191821161043c576106b2826106ac8554610d52565b85612a3e565b80601f831160011461075d575090807f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379493928791610752575b508160011b916000199060031b1c19161790555b6001610716846000526012602052604060002090565b01546107286040519283928684613b63565b0390a17f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b9050830151386106ec565b90601f19831661077285600052602060002090565b9288905b8282106107d45750509183917f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f37969594600194106107bb575b5050811b019055610700565b85015160001960f88460031b161c1916905538806107af565b80600185968294968b01518155019501930190610776565b60405163c6829f8360e01b8152600490fd5b3461026b57600036600319011261026b576020600354604051908152f35b9181601f8401121561026b578235916001600160401b03831161026b576020838186019501011161026b57565b3461026b57608036600319011261026b576108656004356103cd565b6108706024356103cd565b61087b6044356103cd565b6064356001600160401b03811161026b5761089a90369060040161081c565b50506040516310e5697360e01b8152602081600481335afa801561090357610325916000916108d5575b506040519081529081906020820190565b6108f6915060203d81116108fc575b6108ee8183610492565b810190612c1f565b386108c4565b503d6108e4565b612c2e565b3461026b57606036600319011261026b57600435610925816103cd565b602435610931816103cd565b6001600160a01b03821660009081526002602090815260408083203384529091529020604435919054926001840161097a575b61096e9350612632565b60405160018152602090f35b828410610996576109918361096e9503338361274c565b610964565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461026b57600036600319011261026b57602060405160128152f35b3461026b57602036600319011261026b576004356000526012602052604080600020600160ff825416910154825191151582526020820152f35b3461026b57604036600319011261026b57600435610a4e816103cd565b3360009081526002602090815260408083206001600160a01b03851684529091529020546024358101809111610a8857610408913361274c565b612532565b9060406102c992600181528160208201520190610293565b3461026b5760031960403682011261026b576001600160401b039060043582811161026b576101008136039283011261026b5760243583811161026b57610af09036906004016104dd565b5060c4810135916022190182121561026b570190600482013590811161026b578060051b3603602483011361026b5760011015610b63576044610b5761032592610b496040519384920135602083019190602083019252565b03601f198101835282610492565b60405191829182610a8d565b612b71565b3461026b57602036600319011261026b576004356001600160401b03811161026b57610b9a602091369060040161081c565b908092918101031261026b576100199035613ca8565b3461026b5760208060031936011261026b57600435610bce816103cd565b610bd66124da565b6001600160a01b031680610bf05750506100194733614557565b6040516370a0823160e01b81523060048201528281602481855afa908115610903576000928492610c4d928591610c83575b5060405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af1801561090357610c5d57005b8161001992903d10610c7c575b610c748183610492565b810190614457565b503d610c6a565b610c9a9150843d86116108fc576108ee8183610492565b38610c22565b63ffffffff81160361026b57565b3461026b57602036600319011261026b576020600435610ccd81610ca0565b63ffffffff809116600052600d825260406000205416604051908152f35b3461026b5760e036600319011261026b57602435610d08816103cd565b610d136044356103cd565b610d1e6064356103cd565b6084356001600160401b03811161026b57610d3d90369060040161081c565b5050306001600160a01b039091160361026b57005b90600182811c92168015610d82575b6020831014610d6c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d61565b9060009291805491610d9d83610d52565b918282526001938481169081600014610dff5750600114610dbf575b50505050565b90919394506000526020928360002092846000945b838610610deb575050505001019038808080610db9565b805485870183015294019385908201610dd4565b9294505050602093945060ff191683830152151560051b01019038808080610db9565b906104c0610e369260405193848092610d8c565b0383610492565b3461026b57602036600319011261026b57600435600052600f602052610325610e73610e7a604060002060405192838092610d8c565b0382610492565b604051918291602083526020830190610293565b3461026b57608036600319011261026b57600435610eab81610ca0565b60243590610eb882610ca0565b6001600160401b039160443583811161026b57610ed99036906004016104dd565b9060643593841161026b577f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a352061101d92610f1a6100199636906004016104dd565b9063ffffffff8616600052600c602052610f4160ff60016040600020015460a01c16614218565b610f7c60018060a01b03610f75610f688763ffffffff16600052600c602052604060002090565b546001600160a01b031690565b1615614007565b610ff1610fac6001610f9e8963ffffffff16600052600c602052604060002090565b01546001600160a01b031690565b610fcb610fb76104b3565b338152916001600160a01b03166020830152565b60006040820152610fec8663ffffffff16600052600c602052604060002090565b614147565b6110046040519283928633918a86614270565b0390a163ffffffff16600052600d602052604060002090565b9063ffffffff1663ffffffff19825416179055565b3461026b57602036600319011261026b5760043561104f816103cd565b60018060a01b031660005260016020526020604060002054604051908152f35b3461026b576000806003193601126103ae576110896124da565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b606036600319011261026b5760048035906110e482610ca0565b6044356001600160401b03811161026b5761110290369083016104dd565b9060018060a01b03926111348461112c610f688463ffffffff16600052600c602052604060002090565b1615156142ba565b61113c613bbe565b93611145613bbe565b61114d613bbe565b611155613bbe565b61115d6142fe565b95611166613bbe565b50846111876001610f9e8963ffffffff16600052600c602052604060002090565b6111b86111b460016111a98b63ffffffff16600052600c602052604060002090565b015460a01c60ff1690565b1590565b61140d575b6024356111c985612b87565b526111e6336111d788612b87565b6001600160a01b039091169052565b169260409788516313aedd4b60e31b8152602097888286818a5afa918215610903576000926113de575b508a516310e5697360e01b815291898387818b5afa928315610903576000936113bf575b5016908115611358578a516323b872dd60e01b81523381870190815230602082015260408101929092529493929189918691908290600090829060600103925af19182156109035760009889956112a69461133a575b50508a51633381899760e01b81529c8d988997889687016143ac565b03925af1908115610903576112e8611314927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd196600091611319575b50612b87565b5192611307610f688363ffffffff16600052600c602052604060002090565b905194859433938661446c565b0390a1005b611334913d8091833e61132c8183610492565b810190614333565b386112e2565b8161135092903d10610c7c57610c748183610492565b50388061128a565b50506000965061137c9189519b8c9788968796633381899760e01b885287016143ac565b039134905af1908115610903576112e8611314927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916113195750612b87565b6113d79193508a3d8c116108fc576108ee8183610492565b9138611234565b6113ff919250893d8b11611406575b6113f78183610492565b810190614086565b9038611210565b503d6113ed565b61143661142d610f688a63ffffffff16600052600c602052604060002090565b6111d78d612b87565b6111bd565b3461026b57602036600319011261026b576004356000818152601160205260409020546001600160a01b0316330361026b5760405160e081018181106001600160401b0382111761043c5761150f6114ed60019361151f9360405260008152600060208201526000604082015260608082015260606080820152606060a0820152606060c08201526114e86114e26114dd88600052600f602052604060002090565b610e22565b82613025565b612e52565b6006546001600160401b031660085460a01c63ffffffff1690600b5492612c3a565b6000526012602052604060002090565b0155005b3461026b57600036600319011261026b576000546040516001600160a01b039091168152602090f35b3461026b576000806003193601126103ae57604051908060055461156f81610d52565b808552916001918083169081156103845750600114611598576103258561031981870382610492565b9250600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8284106115db57505050810160200161031982610325610309565b805460208587018101919091529093019281016115c0565b3461026b5760a036600319011261026b5761160f6004356103cd565b61161a6024356103cd565b604435611626816103cd565b61162f906147d9565b61163a606435614696565b611645608435614696565b91604051928391602083016116ae906041907f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2235313222206865696768743d22353132226020820152601f60f91b60408201520190565b7f3c726563742077696474683d223130302522206865696768743d223130302522815271103334b6361e9111a2a322a322a31110179f60711b60208201526032017f3c7465787420783d223530252220793d223333252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e4f776e65723a20000000000000000000606082015260770161179091614657565b661e17ba32bc3a1f60c91b81526007017f3c7465787420783d223530252220793d223438252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e4b65792049443a20000000000000000060608201526078016118429084614657565b661e17ba32bc3a1f60c91b81526007017f3c7465787420783d223530252220793d223633252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e45787069726174696f6e2054696d657360608201526503a30b6b81d160d51b608082015260860161190291614657565b661e17ba32bc3a1f60c91b8152600701651e17b9bb339f60d11b81526006010391601f199283810182526119369082610492565b61193f90614976565b604051607b60f81b602082015291829190602183017f226e616d65223a22596f757220546f6b656e204e616d65202300000000000000815260190161198391614657565b61088b60f21b81526002017f226465736372697074696f6e223a22537562736372697074696f6e20746f6b658152741b88199bdc881d1a194810524813585c9ad95d088b605a1b6020820152603501691134b6b0b3b2911d101160b11b8152600a017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a01611a1491614657565b607d60f81b8152600101038281018252611a2e9082610492565b611a3790614976565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d8201611a7191614657565b039081018252611a819082610492565b6040516103258192826102b8565b3461026b57602036600319011261026b576004356000526011602052606060406000205460ff6040519160018060a01b0381168352818160a01c16602084015260a81c1615156040820152f35b3461026b57602036600319011261026b57600435600052600e602052610325610e73610e7a604060002060405192838092610d8c565b3461026b57604036600319011261026b57600435611b2f816103cd565b60243590336000526002602052611b5c8160406000209060018060a01b0316600052602052604060002090565b5491808310611b715761096e9203903361274c565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461026b57604036600319011261026b57610408600435611be4816103cd565b6024359033612632565b606036600319011261026b576004803590602435604435611c0e81610ca0565b60018060a01b0393611c378561112c610f688563ffffffff16600052600c602052604060002090565b600094611c6b611c5f611c5f6001610f9e8763ffffffff16600052600c602052604060002090565b6001600160a01b031690565b92604051916313aedd4b60e31b835260209283818981895afa908115610903578991611e14575b506040516310e5697360e01b81529284848a818a5afa938415610903578a94611df5575b50611cd96111b460016111a98463ffffffff16600052600c602052604060002090565b611dce575b50168015611d9157604080516323b872dd60e01b81523389820190815230602082015291820193909352839183918290600090829060600103925af1801561090357611d73575b5050813b1561026b5760008094611d506040519788968795869463d813cc1960e01b865285016144ae565b03925af1801561090357611d6057005b80611d6d61001992610429565b80610260565b81611d8992903d10610c7c57610c748183610492565b503880611d25565b505050813b1561026b57600093611dbc6040519687958694859463d813cc1960e01b865285016144ae565b039134905af1801561090357611d6057005b611dee919950610f689063ffffffff16600052600c602052604060002090565b9738611cde565b611e0d919450853d87116108fc576108ee8183610492565b9238611cb6565b611e2b9150843d8611611406576113f78183610492565b38611c92565b3461026b5760208060031936011261026b57611e70611e6b600435611e5581610ca0565b63ffffffff16600052600c602052604060002090565b614510565b818101516001600160a01b0390811692908331611e8f600a82046131c9565b93604051956313aedd4b60e31b87528487600481845afa96871561090357600097611f74575b50803b1561026b57604051636ce5768960e11b81526001600160a01b038816600482015230602482015260448101939093526000908390606490829084905af190811561090357611f1792611c5f92611f61575b50516001600160a01b031690565b931680611f2957505061001991614557565b60405163a9059cbb60e01b81526001600160a01b03909416600485015260248401929092529190829082908160008160448101610c4d565b80611d6d611f6e92610429565b38611f09565b611f8c919750853d8711611406576113f78183610492565b9538611eb5565b3461026b57602036600319011261026b5763ffffffff600435611fb581610ca0565b16600052600c6020526060604060002060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b3461026b57604036600319011261026b57602061204c600435612014816103cd565b60243590612021826103cd565b60018060a01b03166000526002835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b3461026b5760031960203682011261026b5760048035916001600160401b03831161026b5761018083830191843603011261026b5760248301926001600160a01b036120aa81610f75610f68611e5589613ffd565b6013546120bf906001600160a01b0316611c5f565b94600a546120cf6064850161404a565b9160848501359460095493602060c48301948a61210c6120ef888d614054565b9060409a8d8c51988997889763216c908360e11b895288016140bc565b03816000809e5af1958615610903578a9182976123aa575b506121329087169489614054565b919061214160e485018b614054565b9061215061010487018d614054565b90893b156123a6578e93612176938c51988997889763d1b8759b60e01b895288016140f9565b038183885af1801561090357612393575b5060a4810135978861233b575b833b156123375784516374cac47d60e01b8152308282018181526000602082018190526040820181905260608201929092526080810182905260a0810182905260c08101919091529091908b908390819060e001038183895af1918215610903578b92612324575b50600a549460095495813b156123205783879361223d8a51998a968795869463282478df60e01b865285016040919493926060820195825260208201520152565b03925af1908115610903577f82b43af44085d027d16b4c42d5c208613ba231f47e559cdc31dd104804309601986122d997612307976122fa966101449561230d575b506101648401956122c46122928861413d565b6122b861229d6104b3565b338152916001600160a01b03861660208401521515828d0152565b610fec611e5584613ffd565b6122f26122d18d80614054565b9c9092613ffd565b9c6122e8610124880182614054565b9890970190614054565b98909761413d565b98519b8c9b33928d61419f565b0390a180f35b80611d6d61231a92610429565b3861227f565b8380fd5b80611d6d61233192610429565b386121fc565b8980fd5b833b1561233757845163debe2b0d60e01b81528a81806123698d868301919060206040840193600081520152565b038183895af1801561090357612380575b50612194565b80611d6d61238d92610429565b3861237a565b80611d6d6123a092610429565b38612187565b8580fd5b6121329197506123c79060203d8111611406576113f78183610492565b9690612124565b3461026b57602036600319011261026b576004356123eb816103cd565b6123f36124da565b6001600160a01b03908116801561244157600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461026b57604036600319011261026b5760243560ff8116810361026b5761204c6020916004356000526010835260406000209060ff16600052602052604060002090565b6000546001600160a01b031633036124ee57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b9060208201809211610a8857565b9060028201809211610a8857565b9060018201809211610a8857565b91908201809211610a8857565b1561258657565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156125de57565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b0380841692909183156126f9576126de827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946126f494169661267e88151561257f565b6001600160a01b03811660009081526001602052604090206126c3908590546126a9828210156125d7565b039160018060a01b03166000526001602052604060002090565b556001600160a01b0316600090815260016020526040902090565b8054820190556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0380821692919083156128265782169384156127d657806127c57f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946127ae6126f49560018060a01b03166000526002602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b929091936128836124da565b61288c84613fda565b926128c260405161289c81610441565b601481527375736572735265776172644d656368616e69736d60601b6020820152613fda565b84146129f8575b6129446128da849796975160ff1690565b95612911876128f3886000526011602052604060002090565b8054909160ff60a01b1990911660a09190911b60ff60a01b16179055565b612925866000526011602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6129618161295c86600052600f602052604060002090565b612a92565b60ff9485169560005b868116888110156129b957906129836129b49287612b94565b516129ae8261299c8a6000526010602052604060002090565b9060ff16600052602052604060002090565b55612b60565b61296a565b50509290936129f39296507f75667fad75521b835344aca3b0eea672769f8704aa6bebba7ed3d59ae740f07a955060405194859485612bdc565b0390a1565b612a22612a0f856000526011602052604060002090565b805460ff60a81b1916600160a81b179055565b6128c9565b60405190612a3482610477565b60008252565b9055565b90601f8111612a4c57505050565b600091825260208220906020601f850160051c83019410612a88575b601f0160051c01915b828110612a7d57505050565b818155600101612a71565b9092508290612a68565b91909182516001600160401b03811161043c57612ab981612ab38454610d52565b84612a3e565b602080601f8311600114612af5575081929394600092612aea575b50508160011b916000199060031b1c1916179055565b015190503880612ad4565b90601f19831695612b0b85600052602060002090565b926000905b888210612b4857505083600195969710612b2f575b505050811b019055565b015160001960f88460031b161c19169055388080612b25565b80600185968294968601518155019501930190612b10565b60ff1660ff8114610a885760010190565b634e487b7160e01b600052603260045260246000fd5b805115610b635760200190565b8051821015610b635760209160051b010190565b90815180825260208080930193019160005b828110612bc8575050505090565b835185529381019392810192600101612bba565b906102c99492612bf7612c0592608085526080850190610293565b908382036020850152610293565b9260408201526060818403910152612ba8565b1561026b57565b9081602091031261026b575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff612c79604051978896879663230e93b160e11b885216600487015260a0602487015260a4860190610293565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561090357600091612cf5575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b612d0d915060203d81116108fc576108ee8183610492565b38612ccb565b60405190612d2082610441565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b60031115612d5b57565b612d3b565b60405190612d6d82610441565b60088252676c616e677561676560c01b6020830152565b60011115612d5b57565b60405190612d9b82610441565b6006825265736f7572636560d01b6020830152565b60405190612dbd82610441565b60048252636172677360e01b6020830152565b6000198114610a885760010190565b60405190612dec82610441565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b60405190612e1782610441565b60078252667365637265747360c81b6020830152565b60405190612e3a82610441565b600982526862797465734172677360b81b6020830152565b612e5a613068565b90612e6c612e66612d13565b83613824565b612e898151612e7a81612d51565b612e8381612d51565b83613128565b612e94612e66612d60565b612eae6040820151612ea581612d84565b612e8381612d84565b612eb9612e66612d8e565b612ec7606082015183613824565b60a08101805151612fcc575b506080810190815151612f4c575b60c0915001805151612ef4575b50515190565b91612f00612e66612e2d565b612f09826138a8565b60005b83518051821015612f395790612f2f612f2882612f3494612b94565b518561376f565b612dd0565b612f0c565b50509150612f4681613934565b38612eee565b602081018051612f5b81612d51565b612f6481612d51565b15612fba5760c092612f9d612fb592612f84612f7e612ddf565b88613824565b51612f8e81612d51565b612f9781612d51565b86613128565b612fae612fa8612e0a565b86613824565b518461376f565b612ee1565b60405163a80d31f760e01b8152600490fd5b92612fde612fd8612db0565b84613824565b612fe7836138a8565b60005b845180518210156130125790612f2f6130068261300d94612b94565b5186613824565b612fea565b5050925061301f82613934565b38612ed3565b81511561303c576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b6040519061305b82610441565b6000602083606081520152565b60405161307481610441565b61307c61304e565b808252602082016000815261308f61304e565b50610100602083015260405180925260008252610120820191821061026b576000916040525290565b601f19810191908211610a8857565b600119810191908211610a8857565b906130df61304e565b50601f81168061310e575b508060208301526040519081835260008252810160200190811061026b5760405290565b60200360208111610a88578101809111610a8857386130ea565b9081519161313461304e565b508251516001810190818111610a8857602085015181101561318d575b60c260206104c09651928301015380518211613185575b50506040519160208301526020825261318082610441565b61376f565b523880613168565b8160011b9482860460021483151715610a88576020816131bf6104c0986131b860c2955191846130d6565b50826136be565b5096505050613151565b90600782029180830460071490151715610a8857565b908160011b9180830460021490151715610a8857565b90670de0b6b3a764000091828102928184041490151715610a8857565b600281901b91906001600160fe1b03811603610a8857565b908160021b9180830460041490151715610a8857565b90601482029180830460141490151715610a8857565b61325e61304e565b508051516001810190818111610a88576020830151811015613297575b605b6020845192830101538051821161329357505090565b5290565b8160011b82810460021483151715610a88576132c0906132b9855191866130d6565b50846136be565b5061327b565b6132ce61304e565b508051516001810190818111610a88576020830151811015613303575b605a6020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613325906132b9855191866130d6565b506132eb565b61333361304e565b508051516001810190818111610a88576020830151811015613368575b60596020845192830101538051821161329357505090565b8160011b82810460021483151715610a885761338a906132b9855191866130d6565b50613350565b61339861304e565b508051516001810190818111610a885760208301518110156133cd575b60586020845192830101538051821161329357505090565b8160011b82810460021483151715610a88576133ef906132b9855191866130d6565b506133b5565b6133fd61304e565b508051516001810190818111610a88576020830151811015613432575b607b6020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613454906132b9855191866130d6565b5061341a565b61346261304e565b508051516001810190818111610a88576020830151811015613497575b607a6020845192830101538051821161329357505090565b8160011b82810460021483151715610a88576134b9906132b9855191866130d6565b5061347f565b6134c761304e565b508051516001810190818111610a885760208301518110156134fc575b60796020845192830101538051821161329357505090565b8160011b82810460021483151715610a885761351e906132b9855191866130d6565b506134e4565b61352c61304e565b508051516001810190818111610a88576020830151811015613561575b60786020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613583906132b9855191866130d6565b50613549565b9061359261304e565b508151516001810191828211610a885760208401518210156135c5575b6020845192830101538051821161329357505090565b8260011b83810460021484151715610a88576135ee906135e7865191876130d6565b50856136be565b506135af565b90613601825191836130d6565b5061360a61304e565b5080519061361661304e565b506136248151831115612c18565b825151926136328385612572565b9160209282848094015182116136a7575b518381519782010196821161369f575b505001915b818110156136795760001991036101000a0190811990511690825116179052565b919261369461368e61369a9286518152612548565b94612548565b926130b8565b613658565b523880613653565b6136b96136b3836131df565b826135f4565b613643565b906136c761304e565b5080516136d261304e565b506136e08251821115612c18565b825151916136ee8284612572565b6020918291828701518111613758575b865183815197820101968211613750575b505001915b818110156137365760001991036101000a019081199051169082511617905290565b919261369461368e61374b9286518152612548565b613714565b52388061370f565b61376a613764826131df565b886135f4565b6136fe565b81516137a69291906001600160401b03811690601782116137a95761379e9150604060ff845192161790613589565b505b516136be565b50565b5060ff81116137ce576137c8906137c08351613390565b508251613afd565b506137a0565b61ffff81116137ed576137c8906137e5835161332b565b508251613a96565b63ffffffff811161380e576137c89061380683516132c6565b508251613a2d565b6137c89061381c8351613256565b5082516139c1565b81516137a69291906001600160401b03811690601782116138535761379e9150606060ff845192161790613589565b5060ff811161386a576137c8906137c08351613524565b61ffff8111613881576137c8906137e583516134bf565b63ffffffff811161389a576137c890613806835161345a565b6137c89061381c83516133f5565b8051906138b361304e565b508151516001810190818111610a88576020840151811015613901575b609f60208095519283010153805182116138f9575b50500180519060018201809211610a885752565b5238806138e5565b8160011b9382850460021483151715610a885760208161392a82976131b8609f955191846130d6565b50955050506138d0565b80519061393f61304e565b508151516001810190818111610a8857602084015181101561398e575b60ff6020809551928301015380518211613986575b5050018051600019810191908211610a885752565b523880613971565b8160011b9382850460021483151715610a88576020816139b782976131b860ff955191846130d6565b509550505061395c565b906139ca61304e565b50815151806008019182600811610a885760208401518311613a0c575b6008845192830101906001600160401b03198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613a2890856135f4565b6139e7565b90613a3661304e565b50815151806004019182600411610a885760208401518311613a75575b60048451928301019063ffffffff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613a9190856135f4565b613a53565b90613a9f61304e565b50815151806002019182600211610a885760208401518311613adc575b60028451928301019061ffff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613af890856135f4565b613abc565b90613b0661304e565b50815151806001019182600111610a885760208401518311613b42575b60018451928301019060ff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613b5e90856135f4565b613b23565b6102c99392606092825260208201528160408201520190610293565b15613b8657565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405190613bcb82610441565b6001825260203681840137565b90613be282610524565b613bef6040519182610492565b8281528092613c00601f1991610524565b0190602036910137565b90815180825260208080930193019160005b828110613c2a575050505090565b83516001600160a01b031685529381019392810192600101613c1c565b909493919460808201908252602095868301526080604083015283518091528560a0830194019060005b818110613c8e575050506102c99394506060818403910152613c0a565b825163ffffffff1686529487019491870191600101613c71565b90613cd0613cca613cc3846000526012602052604060002090565b5460ff1690565b15613b7f565b613cf4613ce7836000526012602052604060002090565b805460ff19166001179055565b60019182613d0c826000526012602052604060002090565b015490613d30613d26836000526011602052604060002090565b5460a01c60ff1690565b613d51613d47846000526011602052604060002090565b5460a81c60ff1690565b15613e2a5793613d5f613bbe565b9080613d80613d7b6114dd86600052600e602052604060002090565b614e90565b96600060ff809216925b613dc6575b505050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b5793946129f39160405194859485613c47565b81811683811015613e245790613e19613df2613de5613e1e948d612b94565b516001600160a01b031690565b613e13613e0d8461299c8d6000526010602052604060002090565b546131f5565b90613f20565b612b60565b83613d8a565b50613d8f565b613e4b613e466114dd849794600052600e602052604060002090565b614a5f565b90613e5960ff809216613bd8565b926000815b613e9a575b5050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b579394916129f39160405194859485613c47565b613eba613eb4613d26886000526011602052604060002090565b60ff1690565b83821690811015613f1a5790613e196111d7613ef984613ef0610f68611e55613ee6613f14998d612b94565b5163ffffffff1690565b9283918b612b94565b613e13613e0d8461299c8c6000526010602052604060002090565b81613e5e565b50613e63565b6001600160a01b03811691908215613f955760035490828201809211610a8857600092613f866020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460035560018060a01b03166000526001602052604060002090565b818154019055604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b604051613ff781610b496020820194602086526040830190610293565b51902090565b356102c981610ca0565b1561400e57565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b356102c9816103cd565b903590601e198136030182121561026b57018035906001600160401b03821161026b5760200191813603831361026b57565b9081602091031261026b57516102c9816103cd565b908060209392818452848401376000828201840152601f01601f1916010190565b969590936140f4936000969360a0968a52600180881b031660208a01526040890152606088015260c0608088015260c087019161409b565b930152565b949290936141176102c997956141259460608952606089019161409b565b91868303602088015261409b565b92604081850391015261409b565b8015150361026b57565b356102c981614133565b815181546001600160a01b03199081166001600160a01b0392831617835560208401516001909301805493909216921691909117815590612a3a9060400151825460ff60a01b191690151560a01b60ff60a01b161790565b9a9691936101009a9893958c9d9e9d602063ffffffff6141d06142029b966142109f9a61012080875286019161409b565b99169101526001600160a01b0391821660408e01521660608c015260808b015260a08a015288830360c08a015261409b565b9185830360e087015261409b565b931515910152565b1561421f57565b60405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b91906142976102c99694959263ffffffff809316855260a0602086015260a0850190610293565b941660408301526001600160a01b03166060820152808303608090910152610293565b156142c157565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b60405161430a81610441565b600181528060005b60208082101561432d57906060602092828501015201614312565b50505090565b602090818184031261026b578051906001600160401b03821161026b57019180601f8401121561026b57825161436881610524565b936143766040519586610492565b818552838086019260051b82010192831161026b578301905b82821061439d575050505090565b8151815290830190830161438f565b93906143f692936143da6143cb6143e89360a0895260a0890190612ba8565b602096888203888a0152613c0a565b908682036040880152613c0a565b908482036060860152613c0a565b9160808184039101528251908183528083019281808460051b8301019501936000915b8483106144295750505050505090565b9091929394958480614447600193601f198682030187528a51610293565b9801930193019194939290614419565b9081602091031261026b57516102c981614133565b93919260809363ffffffff61449793989798168652602086015260a0604086015260a0850190610293565b6001600160a01b0391821660608501529416910152565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b8281106144fe57505060a09293506000838284010152601f8019910116010190565b8181015184820160a0015285016144dc565b90604051606081018181106001600160401b0382111761043c57604052604060ff82946001808060a01b03918281541686520154908116602085015260a01c161515910152565b814710614612576000918291829182916001600160a01b03165af13d1561460d573d614582816104c2565b906145906040519283610492565b8152600060203d92013e5b156145a257565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b61459b565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b9061466a60209282815194859201610270565b0190565b90614678826104c2565b6146856040519182610492565b8281528092613c00601f19916104c2565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156147cb575b506d04ee2d6d415b85acef8100000000808310156147bc575b50662386f26fc10000808310156147ad575b506305f5e1008083101561479e575b506127108083101561478f575b50606482101561477f575b600a80921015614775575b60019081602161472d82870161466e565b95860101905b61473f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561477057919082614733565b614738565b916001019161471c565b9190606460029104910191614711565b60049193920491019138614706565b600891939204910191386146f9565b601091939204910191386146ea565b602091939204910191386146d8565b6040935081049150386146bf565b604051906001600160a01b03166147ef8261045c565b602a82526040366020840137603061480683612b87565b5360786148128361489e565b536029905b6001821161482a576102c99150156148cc565b600f8116906010821015610b6357614866916f181899199a1a9b1b9c1cb0b131b232b360811b901a61485c84866148ae565b5360041c916148bf565b90614817565b60405161487881610477565b60008152906000368137565b6040519061489182610441565b6014825260203681840137565b805160011015610b635760210190565b908151811015610b63570160200190565b8015610a88576000190190565b156148d357565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906149248261045c565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b805115614a5657614985614917565b6149a161499c6149958451612556565b6003900490565b613212565b916149b36149ae84612548565b61466e565b92835280815182019060208501935b828210614a04575050506003905106806001146149f3576002146149e4575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906149c2565b506102c9612a27565b614a6890614c07565b6003815116614ac957614a84614a7f825160021c90565b613bd8565b9060005b8251811015614ac45780612f2f614aaa614aa4614abf9461322a565b85614e3a565b614ab48387612b94565b9063ffffffff169052565b614a88565b505090565b60405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b6064820152608490fd5b15614b2157565b60405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b6064820152608490fd5b15614b7b57565b60405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b6064820152608490fd5b60041b90610ff060f0831692168203610a8857565b60ff600a9116019060ff8211610a8857565b9060ff8091169116019060ff8211610a8857565b90614c16600283511015614b1a565b614c516001600160f81b0319600360fc1b81614c42614c3487612b87565b516001600160f81b03191690565b16149081614d05575b50614b74565b6002825114614cfb57614c706149ae614c6a84516130c7565b60011c90565b60025b8351811015614cf65780614cd1614cc1614ca3614c9e614c99614c34614cf1978b6148ae565b614d7e565b614bcc565b614cbb614c99614c34614cb587612564565b8b6148ae565b90614bf3565b60f81b6001600160f81b03191690565b614ceb614ce0614c6a846130c7565b9160001a91856148ae565b53612556565b614c73565b509150565b90506102c961486c565b9050600f60fb1b81614d19614c348761489e565b1614908115614d2a575b5038614c4b565b600b60fb1b9150614d3d614c348661489e565b161438614d23565b60ff602f199116019060ff8211610a8857565b60ff6060199116019060ff8211610a8857565b60ff6040199116019060ff8211610a8857565b60f81c603081101580614e2f575b614e2657606181101580614e1b575b614e0f57604181101580614e04575b614df35760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e6700000000006044820152606490fd5b614dff6102c991614d6b565b614be1565b506046811115614daa565b614dff6102c991614d58565b506066811115614d9b565b6102c990614d45565b506039811115614d8c565b9060048101808211610a8857825110614e5557016004015190565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606490fd5b614e9990614c07565b601480825106614f335781516014900490614eb382613bd8565b92600090815b848110614ec857505050505090565b83614ed1614884565b845b828110614ef55750614ef09291612f2f9101516111d7838a612b94565b614eb9565b614f2b919250614f19614c34614f1383614f0e88613240565b612572565b876148ae565b861a614f2582856148ae565b53612dd0565b908591614ed3565b60405162461bcd60e51b815260206004820152602a60248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f6044820152696620323020627974657360b01b6064820152608490fdfea26469706673582212207a481d85e38a77a275c746edf2b57cfb9cc0920e5fe3383e1143d9dd413b5b1a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306fdde031461025b57806307e3290414610256578063095ea7b3146102515780630c92ecf71461024c5780630ca761751461024757806318160ddd14610242578063221c1fd11461023d57806323b872dd14610238578063313ce567146102335780633661346b1461022e578063395093511461022957806340691db4146102245780634585e33b1461021f57806351cff8d91461021a578063584992de146102155780635e895f29146102105780635f1d78ae1461020b57806362e16bd31461020657806370a0823114610201578063715018a6146101fc57806381bb4250146101f75780638c3d86b4146101f25780638da5cb5b146101ed57806395d89b41146101e8578063988b93ad146101e35780639d58754f146101de5780639f1ea81b146101d9578063a457c2d7146101d4578063a9059cbb146101cf578063a9cf7519146101ca578063aa9224cd146101c5578063ba30621e146101c0578063dd62ed3e146101bb578063e9239117146101b6578063f2fde38b146101b15763fe5f49ac0361000e57612495565b6123ce565b612055565b611ff2565b611f93565b611e31565b611bee565b611bc4565b611b12565b611adc565b611a8f565b6115f3565b61154c565b611523565b61143b565b6110ca565b61106f565b611032565b610e8e565b610e3d565b610ceb565b610cae565b610bb0565b610b68565b610aa5565b610a31565b6109f7565b6109db565b610908565b610849565b6107fe565b610606565b61053b565b6103de565b6103b1565b6102cc565b600091031261026b57565b600080fd5b60005b8381106102835750506000910152565b8181015183820152602001610273565b906020916102ac81518092818552858086019101610270565b601f01601f1916010190565b9060206102c9928181520190610293565b90565b3461026b576000806003193601126103ae5760405190806004546102ef81610d52565b808552916001918083169081156103845750600114610329575b6103258561031981870382610492565b604051918291826102b8565b0390f35b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061036c57505050810160200161031982610325610309565b80546020858701810191909152909301928101610351565b8695506103259693506020925061031994915060ff191682840152151560051b8201019293610309565b80fd5b3461026b57602036600319011261026b57610019600435613ca8565b6001600160a01b0381160361026b57565b3461026b57604036600319011261026b576104086004356103fe816103cd565b602435903361274c565b602060405160018152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161043c57604052565b610413565b604081019081106001600160401b0382111761043c57604052565b606081019081106001600160401b0382111761043c57604052565b602081019081106001600160401b0382111761043c57604052565b90601f801991011681019081106001600160401b0382111761043c57604052565b604051906104c08261045c565b565b6001600160401b03811161043c57601f01601f191660200190565b81601f8201121561026b578035906104f4826104c2565b926105026040519485610492565b8284526020838301011161026b57816000926020809301838601378301015290565b6001600160401b03811161043c5760051b60200190565b3461026b57608036600319011261026b576001600160401b0360043581811161026b5761056c9036906004016104dd565b9060243581811161026b576105859036906004016104dd565b60443590610592826103cd565b60643592831161026b573660238401121561026b578260040135936105b685610524565b936105c46040519586610492565b85855260209560248787019160051b8301019136831161026b57602401905b8282106105f7575050506100199450612877565b813581529087019087016105e3565b3461026b57606036600319011261026b576001600160401b0360043560243582811161026b5761063a9036906004016104dd565b60443583811161026b576106529036906004016104dd565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036107ec57600092828452602090600e82526040852091835191821161043c576106b2826106ac8554610d52565b85612a3e565b80601f831160011461075d575090807f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379493928791610752575b508160011b916000199060031b1c19161790555b6001610716846000526012602052604060002090565b01546107286040519283928684613b63565b0390a17f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b9050830151386106ec565b90601f19831661077285600052602060002090565b9288905b8282106107d45750509183917f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f37969594600194106107bb575b5050811b019055610700565b85015160001960f88460031b161c1916905538806107af565b80600185968294968b01518155019501930190610776565b60405163c6829f8360e01b8152600490fd5b3461026b57600036600319011261026b576020600354604051908152f35b9181601f8401121561026b578235916001600160401b03831161026b576020838186019501011161026b57565b3461026b57608036600319011261026b576108656004356103cd565b6108706024356103cd565b61087b6044356103cd565b6064356001600160401b03811161026b5761089a90369060040161081c565b50506040516310e5697360e01b8152602081600481335afa801561090357610325916000916108d5575b506040519081529081906020820190565b6108f6915060203d81116108fc575b6108ee8183610492565b810190612c1f565b386108c4565b503d6108e4565b612c2e565b3461026b57606036600319011261026b57600435610925816103cd565b602435610931816103cd565b6001600160a01b03821660009081526002602090815260408083203384529091529020604435919054926001840161097a575b61096e9350612632565b60405160018152602090f35b828410610996576109918361096e9503338361274c565b610964565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461026b57600036600319011261026b57602060405160128152f35b3461026b57602036600319011261026b576004356000526012602052604080600020600160ff825416910154825191151582526020820152f35b3461026b57604036600319011261026b57600435610a4e816103cd565b3360009081526002602090815260408083206001600160a01b03851684529091529020546024358101809111610a8857610408913361274c565b612532565b9060406102c992600181528160208201520190610293565b3461026b5760031960403682011261026b576001600160401b039060043582811161026b576101008136039283011261026b5760243583811161026b57610af09036906004016104dd565b5060c4810135916022190182121561026b570190600482013590811161026b578060051b3603602483011361026b5760011015610b63576044610b5761032592610b496040519384920135602083019190602083019252565b03601f198101835282610492565b60405191829182610a8d565b612b71565b3461026b57602036600319011261026b576004356001600160401b03811161026b57610b9a602091369060040161081c565b908092918101031261026b576100199035613ca8565b3461026b5760208060031936011261026b57600435610bce816103cd565b610bd66124da565b6001600160a01b031680610bf05750506100194733614557565b6040516370a0823160e01b81523060048201528281602481855afa908115610903576000928492610c4d928591610c83575b5060405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af1801561090357610c5d57005b8161001992903d10610c7c575b610c748183610492565b810190614457565b503d610c6a565b610c9a9150843d86116108fc576108ee8183610492565b38610c22565b63ffffffff81160361026b57565b3461026b57602036600319011261026b576020600435610ccd81610ca0565b63ffffffff809116600052600d825260406000205416604051908152f35b3461026b5760e036600319011261026b57602435610d08816103cd565b610d136044356103cd565b610d1e6064356103cd565b6084356001600160401b03811161026b57610d3d90369060040161081c565b5050306001600160a01b039091160361026b57005b90600182811c92168015610d82575b6020831014610d6c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d61565b9060009291805491610d9d83610d52565b918282526001938481169081600014610dff5750600114610dbf575b50505050565b90919394506000526020928360002092846000945b838610610deb575050505001019038808080610db9565b805485870183015294019385908201610dd4565b9294505050602093945060ff191683830152151560051b01019038808080610db9565b906104c0610e369260405193848092610d8c565b0383610492565b3461026b57602036600319011261026b57600435600052600f602052610325610e73610e7a604060002060405192838092610d8c565b0382610492565b604051918291602083526020830190610293565b3461026b57608036600319011261026b57600435610eab81610ca0565b60243590610eb882610ca0565b6001600160401b039160443583811161026b57610ed99036906004016104dd565b9060643593841161026b577f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a352061101d92610f1a6100199636906004016104dd565b9063ffffffff8616600052600c602052610f4160ff60016040600020015460a01c16614218565b610f7c60018060a01b03610f75610f688763ffffffff16600052600c602052604060002090565b546001600160a01b031690565b1615614007565b610ff1610fac6001610f9e8963ffffffff16600052600c602052604060002090565b01546001600160a01b031690565b610fcb610fb76104b3565b338152916001600160a01b03166020830152565b60006040820152610fec8663ffffffff16600052600c602052604060002090565b614147565b6110046040519283928633918a86614270565b0390a163ffffffff16600052600d602052604060002090565b9063ffffffff1663ffffffff19825416179055565b3461026b57602036600319011261026b5760043561104f816103cd565b60018060a01b031660005260016020526020604060002054604051908152f35b3461026b576000806003193601126103ae576110896124da565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b606036600319011261026b5760048035906110e482610ca0565b6044356001600160401b03811161026b5761110290369083016104dd565b9060018060a01b03926111348461112c610f688463ffffffff16600052600c602052604060002090565b1615156142ba565b61113c613bbe565b93611145613bbe565b61114d613bbe565b611155613bbe565b61115d6142fe565b95611166613bbe565b50846111876001610f9e8963ffffffff16600052600c602052604060002090565b6111b86111b460016111a98b63ffffffff16600052600c602052604060002090565b015460a01c60ff1690565b1590565b61140d575b6024356111c985612b87565b526111e6336111d788612b87565b6001600160a01b039091169052565b169260409788516313aedd4b60e31b8152602097888286818a5afa918215610903576000926113de575b508a516310e5697360e01b815291898387818b5afa928315610903576000936113bf575b5016908115611358578a516323b872dd60e01b81523381870190815230602082015260408101929092529493929189918691908290600090829060600103925af19182156109035760009889956112a69461133a575b50508a51633381899760e01b81529c8d988997889687016143ac565b03925af1908115610903576112e8611314927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd196600091611319575b50612b87565b5192611307610f688363ffffffff16600052600c602052604060002090565b905194859433938661446c565b0390a1005b611334913d8091833e61132c8183610492565b810190614333565b386112e2565b8161135092903d10610c7c57610c748183610492565b50388061128a565b50506000965061137c9189519b8c9788968796633381899760e01b885287016143ac565b039134905af1908115610903576112e8611314927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916113195750612b87565b6113d79193508a3d8c116108fc576108ee8183610492565b9138611234565b6113ff919250893d8b11611406575b6113f78183610492565b810190614086565b9038611210565b503d6113ed565b61143661142d610f688a63ffffffff16600052600c602052604060002090565b6111d78d612b87565b6111bd565b3461026b57602036600319011261026b576004356000818152601160205260409020546001600160a01b0316330361026b5760405160e081018181106001600160401b0382111761043c5761150f6114ed60019361151f9360405260008152600060208201526000604082015260608082015260606080820152606060a0820152606060c08201526114e86114e26114dd88600052600f602052604060002090565b610e22565b82613025565b612e52565b6006546001600160401b031660085460a01c63ffffffff1690600b5492612c3a565b6000526012602052604060002090565b0155005b3461026b57600036600319011261026b576000546040516001600160a01b039091168152602090f35b3461026b576000806003193601126103ae57604051908060055461156f81610d52565b808552916001918083169081156103845750600114611598576103258561031981870382610492565b9250600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8284106115db57505050810160200161031982610325610309565b805460208587018101919091529093019281016115c0565b3461026b5760a036600319011261026b5761160f6004356103cd565b61161a6024356103cd565b604435611626816103cd565b61162f906147d9565b61163a606435614696565b611645608435614696565b91604051928391602083016116ae906041907f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2235313222206865696768743d22353132226020820152601f60f91b60408201520190565b7f3c726563742077696474683d223130302522206865696768743d223130302522815271103334b6361e9111a2a322a322a31110179f60711b60208201526032017f3c7465787420783d223530252220793d223333252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e4f776e65723a20000000000000000000606082015260770161179091614657565b661e17ba32bc3a1f60c91b81526007017f3c7465787420783d223530252220793d223438252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e4b65792049443a20000000000000000060608201526078016118429084614657565b661e17ba32bc3a1f60c91b81526007017f3c7465787420783d223530252220793d223633252220666f6e742d66616d696c81527f793d2256657264616e612220666f6e742d73697a653d223138222066696c6c3d60208201527f22626c61636b2220666f6e742d7765696768743d22626f6c642220746578742d60408201527f616e63686f723d226d6964646c65223e45787069726174696f6e2054696d657360608201526503a30b6b81d160d51b608082015260860161190291614657565b661e17ba32bc3a1f60c91b8152600701651e17b9bb339f60d11b81526006010391601f199283810182526119369082610492565b61193f90614976565b604051607b60f81b602082015291829190602183017f226e616d65223a22596f757220546f6b656e204e616d65202300000000000000815260190161198391614657565b61088b60f21b81526002017f226465736372697074696f6e223a22537562736372697074696f6e20746f6b658152741b88199bdc881d1a194810524813585c9ad95d088b605a1b6020820152603501691134b6b0b3b2911d101160b11b8152600a017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a01611a1491614657565b607d60f81b8152600101038281018252611a2e9082610492565b611a3790614976565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d8201611a7191614657565b039081018252611a819082610492565b6040516103258192826102b8565b3461026b57602036600319011261026b576004356000526011602052606060406000205460ff6040519160018060a01b0381168352818160a01c16602084015260a81c1615156040820152f35b3461026b57602036600319011261026b57600435600052600e602052610325610e73610e7a604060002060405192838092610d8c565b3461026b57604036600319011261026b57600435611b2f816103cd565b60243590336000526002602052611b5c8160406000209060018060a01b0316600052602052604060002090565b5491808310611b715761096e9203903361274c565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461026b57604036600319011261026b57610408600435611be4816103cd565b6024359033612632565b606036600319011261026b576004803590602435604435611c0e81610ca0565b60018060a01b0393611c378561112c610f688563ffffffff16600052600c602052604060002090565b600094611c6b611c5f611c5f6001610f9e8763ffffffff16600052600c602052604060002090565b6001600160a01b031690565b92604051916313aedd4b60e31b835260209283818981895afa908115610903578991611e14575b506040516310e5697360e01b81529284848a818a5afa938415610903578a94611df5575b50611cd96111b460016111a98463ffffffff16600052600c602052604060002090565b611dce575b50168015611d9157604080516323b872dd60e01b81523389820190815230602082015291820193909352839183918290600090829060600103925af1801561090357611d73575b5050813b1561026b5760008094611d506040519788968795869463d813cc1960e01b865285016144ae565b03925af1801561090357611d6057005b80611d6d61001992610429565b80610260565b81611d8992903d10610c7c57610c748183610492565b503880611d25565b505050813b1561026b57600093611dbc6040519687958694859463d813cc1960e01b865285016144ae565b039134905af1801561090357611d6057005b611dee919950610f689063ffffffff16600052600c602052604060002090565b9738611cde565b611e0d919450853d87116108fc576108ee8183610492565b9238611cb6565b611e2b9150843d8611611406576113f78183610492565b38611c92565b3461026b5760208060031936011261026b57611e70611e6b600435611e5581610ca0565b63ffffffff16600052600c602052604060002090565b614510565b818101516001600160a01b0390811692908331611e8f600a82046131c9565b93604051956313aedd4b60e31b87528487600481845afa96871561090357600097611f74575b50803b1561026b57604051636ce5768960e11b81526001600160a01b038816600482015230602482015260448101939093526000908390606490829084905af190811561090357611f1792611c5f92611f61575b50516001600160a01b031690565b931680611f2957505061001991614557565b60405163a9059cbb60e01b81526001600160a01b03909416600485015260248401929092529190829082908160008160448101610c4d565b80611d6d611f6e92610429565b38611f09565b611f8c919750853d8711611406576113f78183610492565b9538611eb5565b3461026b57602036600319011261026b5763ffffffff600435611fb581610ca0565b16600052600c6020526060604060002060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b3461026b57604036600319011261026b57602061204c600435612014816103cd565b60243590612021826103cd565b60018060a01b03166000526002835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b3461026b5760031960203682011261026b5760048035916001600160401b03831161026b5761018083830191843603011261026b5760248301926001600160a01b036120aa81610f75610f68611e5589613ffd565b6013546120bf906001600160a01b0316611c5f565b94600a546120cf6064850161404a565b9160848501359460095493602060c48301948a61210c6120ef888d614054565b9060409a8d8c51988997889763216c908360e11b895288016140bc565b03816000809e5af1958615610903578a9182976123aa575b506121329087169489614054565b919061214160e485018b614054565b9061215061010487018d614054565b90893b156123a6578e93612176938c51988997889763d1b8759b60e01b895288016140f9565b038183885af1801561090357612393575b5060a4810135978861233b575b833b156123375784516374cac47d60e01b8152308282018181526000602082018190526040820181905260608201929092526080810182905260a0810182905260c08101919091529091908b908390819060e001038183895af1918215610903578b92612324575b50600a549460095495813b156123205783879361223d8a51998a968795869463282478df60e01b865285016040919493926060820195825260208201520152565b03925af1908115610903577f82b43af44085d027d16b4c42d5c208613ba231f47e559cdc31dd104804309601986122d997612307976122fa966101449561230d575b506101648401956122c46122928861413d565b6122b861229d6104b3565b338152916001600160a01b03861660208401521515828d0152565b610fec611e5584613ffd565b6122f26122d18d80614054565b9c9092613ffd565b9c6122e8610124880182614054565b9890970190614054565b98909761413d565b98519b8c9b33928d61419f565b0390a180f35b80611d6d61231a92610429565b3861227f565b8380fd5b80611d6d61233192610429565b386121fc565b8980fd5b833b1561233757845163debe2b0d60e01b81528a81806123698d868301919060206040840193600081520152565b038183895af1801561090357612380575b50612194565b80611d6d61238d92610429565b3861237a565b80611d6d6123a092610429565b38612187565b8580fd5b6121329197506123c79060203d8111611406576113f78183610492565b9690612124565b3461026b57602036600319011261026b576004356123eb816103cd565b6123f36124da565b6001600160a01b03908116801561244157600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461026b57604036600319011261026b5760243560ff8116810361026b5761204c6020916004356000526010835260406000209060ff16600052602052604060002090565b6000546001600160a01b031633036124ee57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b9060208201809211610a8857565b9060028201809211610a8857565b9060018201809211610a8857565b91908201809211610a8857565b1561258657565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156125de57565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b0380841692909183156126f9576126de827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946126f494169661267e88151561257f565b6001600160a01b03811660009081526001602052604090206126c3908590546126a9828210156125d7565b039160018060a01b03166000526001602052604060002090565b556001600160a01b0316600090815260016020526040902090565b8054820190556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0380821692919083156128265782169384156127d657806127c57f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946127ae6126f49560018060a01b03166000526002602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b929091936128836124da565b61288c84613fda565b926128c260405161289c81610441565b601481527375736572735265776172644d656368616e69736d60601b6020820152613fda565b84146129f8575b6129446128da849796975160ff1690565b95612911876128f3886000526011602052604060002090565b8054909160ff60a01b1990911660a09190911b60ff60a01b16179055565b612925866000526011602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6129618161295c86600052600f602052604060002090565b612a92565b60ff9485169560005b868116888110156129b957906129836129b49287612b94565b516129ae8261299c8a6000526010602052604060002090565b9060ff16600052602052604060002090565b55612b60565b61296a565b50509290936129f39296507f75667fad75521b835344aca3b0eea672769f8704aa6bebba7ed3d59ae740f07a955060405194859485612bdc565b0390a1565b612a22612a0f856000526011602052604060002090565b805460ff60a81b1916600160a81b179055565b6128c9565b60405190612a3482610477565b60008252565b9055565b90601f8111612a4c57505050565b600091825260208220906020601f850160051c83019410612a88575b601f0160051c01915b828110612a7d57505050565b818155600101612a71565b9092508290612a68565b91909182516001600160401b03811161043c57612ab981612ab38454610d52565b84612a3e565b602080601f8311600114612af5575081929394600092612aea575b50508160011b916000199060031b1c1916179055565b015190503880612ad4565b90601f19831695612b0b85600052602060002090565b926000905b888210612b4857505083600195969710612b2f575b505050811b019055565b015160001960f88460031b161c19169055388080612b25565b80600185968294968601518155019501930190612b10565b60ff1660ff8114610a885760010190565b634e487b7160e01b600052603260045260246000fd5b805115610b635760200190565b8051821015610b635760209160051b010190565b90815180825260208080930193019160005b828110612bc8575050505090565b835185529381019392810192600101612bba565b906102c99492612bf7612c0592608085526080850190610293565b908382036020850152610293565b9260408201526060818403910152612ba8565b1561026b57565b9081602091031261026b575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff612c79604051978896879663230e93b160e11b885216600487015260a0602487015260a4860190610293565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561090357600091612cf5575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b612d0d915060203d81116108fc576108ee8183610492565b38612ccb565b60405190612d2082610441565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b60031115612d5b57565b612d3b565b60405190612d6d82610441565b60088252676c616e677561676560c01b6020830152565b60011115612d5b57565b60405190612d9b82610441565b6006825265736f7572636560d01b6020830152565b60405190612dbd82610441565b60048252636172677360e01b6020830152565b6000198114610a885760010190565b60405190612dec82610441565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b60405190612e1782610441565b60078252667365637265747360c81b6020830152565b60405190612e3a82610441565b600982526862797465734172677360b81b6020830152565b612e5a613068565b90612e6c612e66612d13565b83613824565b612e898151612e7a81612d51565b612e8381612d51565b83613128565b612e94612e66612d60565b612eae6040820151612ea581612d84565b612e8381612d84565b612eb9612e66612d8e565b612ec7606082015183613824565b60a08101805151612fcc575b506080810190815151612f4c575b60c0915001805151612ef4575b50515190565b91612f00612e66612e2d565b612f09826138a8565b60005b83518051821015612f395790612f2f612f2882612f3494612b94565b518561376f565b612dd0565b612f0c565b50509150612f4681613934565b38612eee565b602081018051612f5b81612d51565b612f6481612d51565b15612fba5760c092612f9d612fb592612f84612f7e612ddf565b88613824565b51612f8e81612d51565b612f9781612d51565b86613128565b612fae612fa8612e0a565b86613824565b518461376f565b612ee1565b60405163a80d31f760e01b8152600490fd5b92612fde612fd8612db0565b84613824565b612fe7836138a8565b60005b845180518210156130125790612f2f6130068261300d94612b94565b5186613824565b612fea565b5050925061301f82613934565b38612ed3565b81511561303c576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b6040519061305b82610441565b6000602083606081520152565b60405161307481610441565b61307c61304e565b808252602082016000815261308f61304e565b50610100602083015260405180925260008252610120820191821061026b576000916040525290565b601f19810191908211610a8857565b600119810191908211610a8857565b906130df61304e565b50601f81168061310e575b508060208301526040519081835260008252810160200190811061026b5760405290565b60200360208111610a88578101809111610a8857386130ea565b9081519161313461304e565b508251516001810190818111610a8857602085015181101561318d575b60c260206104c09651928301015380518211613185575b50506040519160208301526020825261318082610441565b61376f565b523880613168565b8160011b9482860460021483151715610a88576020816131bf6104c0986131b860c2955191846130d6565b50826136be565b5096505050613151565b90600782029180830460071490151715610a8857565b908160011b9180830460021490151715610a8857565b90670de0b6b3a764000091828102928184041490151715610a8857565b600281901b91906001600160fe1b03811603610a8857565b908160021b9180830460041490151715610a8857565b90601482029180830460141490151715610a8857565b61325e61304e565b508051516001810190818111610a88576020830151811015613297575b605b6020845192830101538051821161329357505090565b5290565b8160011b82810460021483151715610a88576132c0906132b9855191866130d6565b50846136be565b5061327b565b6132ce61304e565b508051516001810190818111610a88576020830151811015613303575b605a6020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613325906132b9855191866130d6565b506132eb565b61333361304e565b508051516001810190818111610a88576020830151811015613368575b60596020845192830101538051821161329357505090565b8160011b82810460021483151715610a885761338a906132b9855191866130d6565b50613350565b61339861304e565b508051516001810190818111610a885760208301518110156133cd575b60586020845192830101538051821161329357505090565b8160011b82810460021483151715610a88576133ef906132b9855191866130d6565b506133b5565b6133fd61304e565b508051516001810190818111610a88576020830151811015613432575b607b6020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613454906132b9855191866130d6565b5061341a565b61346261304e565b508051516001810190818111610a88576020830151811015613497575b607a6020845192830101538051821161329357505090565b8160011b82810460021483151715610a88576134b9906132b9855191866130d6565b5061347f565b6134c761304e565b508051516001810190818111610a885760208301518110156134fc575b60796020845192830101538051821161329357505090565b8160011b82810460021483151715610a885761351e906132b9855191866130d6565b506134e4565b61352c61304e565b508051516001810190818111610a88576020830151811015613561575b60786020845192830101538051821161329357505090565b8160011b82810460021483151715610a8857613583906132b9855191866130d6565b50613549565b9061359261304e565b508151516001810191828211610a885760208401518210156135c5575b6020845192830101538051821161329357505090565b8260011b83810460021484151715610a88576135ee906135e7865191876130d6565b50856136be565b506135af565b90613601825191836130d6565b5061360a61304e565b5080519061361661304e565b506136248151831115612c18565b825151926136328385612572565b9160209282848094015182116136a7575b518381519782010196821161369f575b505001915b818110156136795760001991036101000a0190811990511690825116179052565b919261369461368e61369a9286518152612548565b94612548565b926130b8565b613658565b523880613653565b6136b96136b3836131df565b826135f4565b613643565b906136c761304e565b5080516136d261304e565b506136e08251821115612c18565b825151916136ee8284612572565b6020918291828701518111613758575b865183815197820101968211613750575b505001915b818110156137365760001991036101000a019081199051169082511617905290565b919261369461368e61374b9286518152612548565b613714565b52388061370f565b61376a613764826131df565b886135f4565b6136fe565b81516137a69291906001600160401b03811690601782116137a95761379e9150604060ff845192161790613589565b505b516136be565b50565b5060ff81116137ce576137c8906137c08351613390565b508251613afd565b506137a0565b61ffff81116137ed576137c8906137e5835161332b565b508251613a96565b63ffffffff811161380e576137c89061380683516132c6565b508251613a2d565b6137c89061381c8351613256565b5082516139c1565b81516137a69291906001600160401b03811690601782116138535761379e9150606060ff845192161790613589565b5060ff811161386a576137c8906137c08351613524565b61ffff8111613881576137c8906137e583516134bf565b63ffffffff811161389a576137c890613806835161345a565b6137c89061381c83516133f5565b8051906138b361304e565b508151516001810190818111610a88576020840151811015613901575b609f60208095519283010153805182116138f9575b50500180519060018201809211610a885752565b5238806138e5565b8160011b9382850460021483151715610a885760208161392a82976131b8609f955191846130d6565b50955050506138d0565b80519061393f61304e565b508151516001810190818111610a8857602084015181101561398e575b60ff6020809551928301015380518211613986575b5050018051600019810191908211610a885752565b523880613971565b8160011b9382850460021483151715610a88576020816139b782976131b860ff955191846130d6565b509550505061395c565b906139ca61304e565b50815151806008019182600811610a885760208401518311613a0c575b6008845192830101906001600160401b03198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613a2890856135f4565b6139e7565b90613a3661304e565b50815151806004019182600411610a885760208401518311613a75575b60048451928301019063ffffffff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613a9190856135f4565b613a53565b90613a9f61304e565b50815151806002019182600211610a885760208401518311613adc575b60028451928301019061ffff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613af890856135f4565b613abc565b90613b0661304e565b50815151806001019182600111610a885760208401518311613b42575b60018451928301019060ff198251161790528051821161329357505090565b8260011b83810460021484151715610a8857613b5e90856135f4565b613b23565b6102c99392606092825260208201528160408201520190610293565b15613b8657565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405190613bcb82610441565b6001825260203681840137565b90613be282610524565b613bef6040519182610492565b8281528092613c00601f1991610524565b0190602036910137565b90815180825260208080930193019160005b828110613c2a575050505090565b83516001600160a01b031685529381019392810192600101613c1c565b909493919460808201908252602095868301526080604083015283518091528560a0830194019060005b818110613c8e575050506102c99394506060818403910152613c0a565b825163ffffffff1686529487019491870191600101613c71565b90613cd0613cca613cc3846000526012602052604060002090565b5460ff1690565b15613b7f565b613cf4613ce7836000526012602052604060002090565b805460ff19166001179055565b60019182613d0c826000526012602052604060002090565b015490613d30613d26836000526011602052604060002090565b5460a01c60ff1690565b613d51613d47846000526011602052604060002090565b5460a81c60ff1690565b15613e2a5793613d5f613bbe565b9080613d80613d7b6114dd86600052600e602052604060002090565b614e90565b96600060ff809216925b613dc6575b505050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b5793946129f39160405194859485613c47565b81811683811015613e245790613e19613df2613de5613e1e948d612b94565b516001600160a01b031690565b613e13613e0d8461299c8d6000526010602052604060002090565b546131f5565b90613f20565b612b60565b83613d8a565b50613d8f565b613e4b613e466114dd849794600052600e602052604060002090565b614a5f565b90613e5960ff809216613bd8565b926000815b613e9a575b5050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b579394916129f39160405194859485613c47565b613eba613eb4613d26886000526011602052604060002090565b60ff1690565b83821690811015613f1a5790613e196111d7613ef984613ef0610f68611e55613ee6613f14998d612b94565b5163ffffffff1690565b9283918b612b94565b613e13613e0d8461299c8c6000526010602052604060002090565b81613e5e565b50613e63565b6001600160a01b03811691908215613f955760035490828201809211610a8857600092613f866020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460035560018060a01b03166000526001602052604060002090565b818154019055604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b604051613ff781610b496020820194602086526040830190610293565b51902090565b356102c981610ca0565b1561400e57565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b356102c9816103cd565b903590601e198136030182121561026b57018035906001600160401b03821161026b5760200191813603831361026b57565b9081602091031261026b57516102c9816103cd565b908060209392818452848401376000828201840152601f01601f1916010190565b969590936140f4936000969360a0968a52600180881b031660208a01526040890152606088015260c0608088015260c087019161409b565b930152565b949290936141176102c997956141259460608952606089019161409b565b91868303602088015261409b565b92604081850391015261409b565b8015150361026b57565b356102c981614133565b815181546001600160a01b03199081166001600160a01b0392831617835560208401516001909301805493909216921691909117815590612a3a9060400151825460ff60a01b191690151560a01b60ff60a01b161790565b9a9691936101009a9893958c9d9e9d602063ffffffff6141d06142029b966142109f9a61012080875286019161409b565b99169101526001600160a01b0391821660408e01521660608c015260808b015260a08a015288830360c08a015261409b565b9185830360e087015261409b565b931515910152565b1561421f57565b60405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b91906142976102c99694959263ffffffff809316855260a0602086015260a0850190610293565b941660408301526001600160a01b03166060820152808303608090910152610293565b156142c157565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b60405161430a81610441565b600181528060005b60208082101561432d57906060602092828501015201614312565b50505090565b602090818184031261026b578051906001600160401b03821161026b57019180601f8401121561026b57825161436881610524565b936143766040519586610492565b818552838086019260051b82010192831161026b578301905b82821061439d575050505090565b8151815290830190830161438f565b93906143f692936143da6143cb6143e89360a0895260a0890190612ba8565b602096888203888a0152613c0a565b908682036040880152613c0a565b908482036060860152613c0a565b9160808184039101528251908183528083019281808460051b8301019501936000915b8483106144295750505050505090565b9091929394958480614447600193601f198682030187528a51610293565b9801930193019194939290614419565b9081602091031261026b57516102c981614133565b93919260809363ffffffff61449793989798168652602086015260a0604086015260a0850190610293565b6001600160a01b0391821660608501529416910152565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b8281106144fe57505060a09293506000838284010152601f8019910116010190565b8181015184820160a0015285016144dc565b90604051606081018181106001600160401b0382111761043c57604052604060ff82946001808060a01b03918281541686520154908116602085015260a01c161515910152565b814710614612576000918291829182916001600160a01b03165af13d1561460d573d614582816104c2565b906145906040519283610492565b8152600060203d92013e5b156145a257565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b61459b565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b9061466a60209282815194859201610270565b0190565b90614678826104c2565b6146856040519182610492565b8281528092613c00601f19916104c2565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156147cb575b506d04ee2d6d415b85acef8100000000808310156147bc575b50662386f26fc10000808310156147ad575b506305f5e1008083101561479e575b506127108083101561478f575b50606482101561477f575b600a80921015614775575b60019081602161472d82870161466e565b95860101905b61473f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561477057919082614733565b614738565b916001019161471c565b9190606460029104910191614711565b60049193920491019138614706565b600891939204910191386146f9565b601091939204910191386146ea565b602091939204910191386146d8565b6040935081049150386146bf565b604051906001600160a01b03166147ef8261045c565b602a82526040366020840137603061480683612b87565b5360786148128361489e565b536029905b6001821161482a576102c99150156148cc565b600f8116906010821015610b6357614866916f181899199a1a9b1b9c1cb0b131b232b360811b901a61485c84866148ae565b5360041c916148bf565b90614817565b60405161487881610477565b60008152906000368137565b6040519061489182610441565b6014825260203681840137565b805160011015610b635760210190565b908151811015610b63570160200190565b8015610a88576000190190565b156148d357565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906149248261045c565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b805115614a5657614985614917565b6149a161499c6149958451612556565b6003900490565b613212565b916149b36149ae84612548565b61466e565b92835280815182019060208501935b828210614a04575050506003905106806001146149f3576002146149e4575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906149c2565b506102c9612a27565b614a6890614c07565b6003815116614ac957614a84614a7f825160021c90565b613bd8565b9060005b8251811015614ac45780612f2f614aaa614aa4614abf9461322a565b85614e3a565b614ab48387612b94565b9063ffffffff169052565b614a88565b505090565b60405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b6064820152608490fd5b15614b2157565b60405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b6064820152608490fd5b15614b7b57565b60405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b6064820152608490fd5b60041b90610ff060f0831692168203610a8857565b60ff600a9116019060ff8211610a8857565b9060ff8091169116019060ff8211610a8857565b90614c16600283511015614b1a565b614c516001600160f81b0319600360fc1b81614c42614c3487612b87565b516001600160f81b03191690565b16149081614d05575b50614b74565b6002825114614cfb57614c706149ae614c6a84516130c7565b60011c90565b60025b8351811015614cf65780614cd1614cc1614ca3614c9e614c99614c34614cf1978b6148ae565b614d7e565b614bcc565b614cbb614c99614c34614cb587612564565b8b6148ae565b90614bf3565b60f81b6001600160f81b03191690565b614ceb614ce0614c6a846130c7565b9160001a91856148ae565b53612556565b614c73565b509150565b90506102c961486c565b9050600f60fb1b81614d19614c348761489e565b1614908115614d2a575b5038614c4b565b600b60fb1b9150614d3d614c348661489e565b161438614d23565b60ff602f199116019060ff8211610a8857565b60ff6060199116019060ff8211610a8857565b60ff6040199116019060ff8211610a8857565b60f81c603081101580614e2f575b614e2657606181101580614e1b575b614e0f57604181101580614e04575b614df35760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e6700000000006044820152606490fd5b614dff6102c991614d6b565b614be1565b506046811115614daa565b614dff6102c991614d58565b506066811115614d9b565b6102c990614d45565b506039811115614d8c565b9060048101808211610a8857825110614e5557016004015190565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606490fd5b614e9990614c07565b601480825106614f335781516014900490614eb382613bd8565b92600090815b848110614ec857505050505090565b83614ed1614884565b845b828110614ef55750614ef09291612f2f9101516111d7838a612b94565b614eb9565b614f2b919250614f19614c34614f1383614f0e88613240565b612572565b876148ae565b861a614f2582856148ae565b53612dd0565b908591614ed3565b60405162461bcd60e51b815260206004820152602a60248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f6044820152696620323020627974657360b01b6064820152608490fdfea26469706673582212207a481d85e38a77a275c746edf2b57cfb9cc0920e5fe3383e1143d9dd413b5b1a64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addRewardMechanism(string,string,address,uint256[])": {
        "details": "Only callable by the owner",
        "params": {
          "_functionForwader": "chainlink automation forwarder address",
          "_rewardDistributions": "the reward distributions for the topK agents",
          "_sourceCode": "sourceID to Forwarder address",
          "_sourceName": "sourceID to Forwarder address"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_donID": "Chainlink's contract chainID => donID",
          "_oracle": "The address of the Chainlink Function oracle",
          "_subscriptionId": "The subscription ID for Chainlink Functions",
          "_unlockContract": "The address of the Chainlink oracle Automation Forwarder"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseSubscription(uint32,uint256,string)": {
        "details": "PurchaseSubscription function for an agentID",
        "params": {
          "_agentID": "to subscribe",
          "_value": "array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendRequest(bytes32)": {
        "params": {
          "sourceID": "The ID of the source to send the request to"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint32)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_agentID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "RocketAI (Decentralized Artificial Intelligence Marketplace)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewardMechanism(string,string,address,uint256[])": {
        "notice": "Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder"
      },
      "constructor": {
        "notice": "Initializes the contract"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "sendRequest(bytes32)": {
        "notice": "Sends an HTTP request for character information"
      },
      "withdraw(uint32)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "notice": "@dev",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2508,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2629,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2635,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2637,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 5861,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 5863,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agentPlaceTreasury",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5865,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "oracle",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5868,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "gasLimit",
        "offset": 20,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 5875,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "max",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5878,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "month",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5880,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "donID",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 5904,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agents",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint32,t_struct(AgentStruct)5887_storage)"
      },
      {
        "astId": 5908,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agentVersions",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 5912,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "roundWinners",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5916,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "sources",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 5922,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "rewardDistributions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5927,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "functionData",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_struct(FunctionData)5899_storage)"
      },
      {
        "astId": 5932,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "requestData",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_struct(RequestData)5892_storage)"
      },
      {
        "astId": 6384,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "unlockContract",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IUnlockV12)5830"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUnlockV12)5830": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(FunctionData)5899_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ChainlinkConsumer.FunctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(FunctionData)5899_storage"
      },
      "t_mapping(t_bytes32,t_struct(RequestData)5892_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ChainlinkConsumer.RequestData)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestData)5892_storage"
      },
      "t_mapping(t_uint32,t_struct(AgentStruct)5887_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ChainlinkConsumer.AgentStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentStruct)5887_storage"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentStruct)5887_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.AgentStruct",
        "members": [
          {
            "astId": 5882,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5884,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5886,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "isOpenForContributions",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FunctionData)5899_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.FunctionData",
        "members": [
          {
            "astId": 5894,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "functionForwarder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5896,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "numberOfWinners",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5898,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "usersOrAgents",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RequestData)5892_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.RequestData",
        "members": [
          {
            "astId": 5889,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "executed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5891,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "sourceID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}