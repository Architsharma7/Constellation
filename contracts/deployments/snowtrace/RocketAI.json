{
  "address": "0x3fDfb0F7b1f17d39DD5e326A929541Cd2C0Cbc36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract IUnlockV12",
          "name": "_unlockContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "topkAgents",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "topkUsers",
          "type": "address[]"
        }
      ],
      "name": "RoundRewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "RoundWinners",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockSubscriptionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rewardCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "actualCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "name": "agentRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "threadID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "agentSubscriptionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentVersionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentVersionID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "agentVersionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sourceCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardDistributions",
          "type": "uint256[]"
        }
      ],
      "name": "rewardMechanismRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sourceName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sourceCode",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_functionForwader",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardDistributions",
          "type": "uint256[]"
        }
      ],
      "name": "addRewardMechanism",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agentVersions",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "txHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "topics",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILogAutomation.Log",
          "name": "log",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkLog",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "extendSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "functionData",
      "outputs": [
        {
          "internalType": "address",
          "name": "functionForwarder",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "numberOfWinners",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "usersOrAgents",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_threadID",
          "type": "string"
        }
      ],
      "name": "purchaseSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "agentName",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "agentID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionExpirationDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "keyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisPoint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "lockName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lockSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseTokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rewardCategory",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "actualCategory",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isOpenForContributions",
              "type": "bool"
            }
          ],
          "internalType": "struct RocketAI.AgentInitConfig",
          "name": "agentConfig",
          "type": "tuple"
        }
      ],
      "name": "registerAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_agentVersionID",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_agentVersionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "registerAgentVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "rewardDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestID",
          "type": "bytes32"
        }
      ],
      "name": "rewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roundWinners",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceID",
          "type": "bytes32"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sources",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x609ed24746e1035e592b0d5165e6c0081248343d6b93906b90956e7eb74914c3",
  "receipt": {
    "to": null,
    "from": "0x0D1781F0b693b35939A49831A6C799B938Bd2F80",
    "contractAddress": "0x3fDfb0F7b1f17d39DD5e326A929541Cd2C0Cbc36",
    "transactionIndex": 27,
    "gasUsed": "4219189",
    "logsBloom": "0x
    "blockHash": "0x5605c9583233c0bda945074f8401cc02c32871f27513c2f98a5c7fb8e4b84848",
    "transactionHash": "0x609ed24746e1035e592b0d5165e6c0081248343d6b93906b90956e7eb74914c3",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 38859413,
        "transactionHash": "0x609ed24746e1035e592b0d5165e6c0081248343d6b93906b90956e7eb74914c3",
        "address": "0x3fDfb0F7b1f17d39DD5e326A929541Cd2C0Cbc36",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d1781f0b693b35939a49831a6c799b938bd2f80"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x5605c9583233c0bda945074f8401cc02c32871f27513c2f98a5c7fb8e4b84848"
      }
    ],
    "blockNumber": 38859413,
    "cumulativeGasUsed": "5973392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9f82a6A0758517FD0AfA463820F586999AF314a0",
    "0x70cBE5F72dD85aA634d07d2227a421144Af734b3",
    "0x66756e2d6176616c616e6368652d6d61696e6e65742d31000000000000000000",
    14
  ],
  "numDeployments": 1,
  "solcInputHash": "56a1fc0f3badfa656cb6ef55e3a994cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IUnlockV12\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"topkAgents\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"topkUsers\",\"type\":\"address[]\"}],\"name\":\"RoundRewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"RoundWinners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockSubscriptionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"name\":\"agentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"threadID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"agentSubscriptionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentVersionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentVersionID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentMetadataCID\",\"type\":\"string\"}],\"name\":\"agentVersionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardDistributions\",\"type\":\"uint256[]\"}],\"name\":\"rewardMechanismRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sourceName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sourceCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_functionForwader\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDistributions\",\"type\":\"uint256[]\"}],\"name\":\"addRewardMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agentVersions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ILogAutomation.Log\",\"name\":\"log\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkLog\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"extendSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"functionData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"functionForwarder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numberOfWinners\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"usersOrAgents\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_threadID\",\"type\":\"string\"}],\"name\":\"purchaseSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionExpirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lockName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"internalType\":\"struct RocketAI.AgentInitConfig\",\"name\":\"agentConfig\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_agentVersionID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_agentVersionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_agentMetadataCID\",\"type\":\"string\"}],\"name\":\"registerAgentVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rewardDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"}],\"name\":\"rewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roundWinners\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceID\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addRewardMechanism(string,string,address,uint256[])\":{\"details\":\"Only callable by the owner\",\"params\":{\"_functionForwader\":\"chainlink automation forwarder address\",\"_rewardDistributions\":\"the reward distributions for the topK agents\",\"_sourceCode\":\"sourceID to Forwarder address\",\"_sourceName\":\"sourceID to Forwarder address\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_donID\":\"Chainlink's contract chainID => donID\",\"_oracle\":\"The address of the Chainlink Function oracle\",\"_subscriptionId\":\"The subscription ID for Chainlink Functions\",\"_unlockContract\":\"The address of the Chainlink oracle Automation Forwarder\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseSubscription(uint32,uint256,string)\":{\"details\":\"PurchaseSubscription function for an agentID\",\"params\":{\"_agentID\":\"to subscribe\",\"_value\":\"array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendRequest(bytes32)\":{\"params\":{\"sourceID\":\"The ID of the source to send the request to\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint32)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_agentID\":\"to withdraw money from the lock contract\"}}},\"title\":\"RocketAI (Decentralized Artificial Intelligence Marketplace)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewardMechanism(string,string,address,uint256[])\":{\"notice\":\"Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder\"},\"constructor\":{\"notice\":\"Initializes the contract\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"sendRequest(bytes32)\":{\"notice\":\"Sends an HTTP request for character information\"},\"withdraw(uint32)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"notice\":\"@dev\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketAI.sol\":\"RocketAI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/ChainlinkConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\nimport {ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Helpers} from \\\"./library/Helpers.sol\\\";\\n\\n/**\\n * @title ChainlinkConsumer\\n * @notice \\n * @dev \\n */\\nabstract contract ChainlinkConsumer is FunctionsClient, Ownable , ERC20{\\n\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    uint64 subscriptionId;\\n\\n    uint256 agentPlaceTreasury;\\n\\n    // Router address Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n    address oracle;\\n\\n    //Callback gas limit\\n    uint32 gasLimit = 300000;\\n\\n    uint256 max = type(uint).max;\\n\\n    uint256 month = 31 days;\\n\\n    // donID\\n    bytes32 donID;\\n\\n    struct AgentStruct {\\n        address creator;\\n        address lockAddress;\\n        bool isOpenForContributions;\\n    }\\n\\n    struct RequestData {\\n        bool executed;\\n        bytes32 sourceID;\\n    }\\n\\n    struct FunctionData {\\n        address functionForwarder;\\n        uint8 numberOfWinners;\\n        // users => true , agents => false\\n        bool usersOrAgents;\\n    }\\n\\n    // Mapping from agentID to agentStruct\\n    mapping(uint32 => AgentStruct) public agents;\\n\\n    // Mapping from agentID to agentVersionID\\n    mapping(uint32 => uint32) public agentVersions;\\n\\n    // Mapping from requestID to response containing the topK agents\\n    mapping(bytes32 => bytes) public roundWinners;\\n\\n    // JavaScript source codes for the reward mechanisms\\n    mapping(bytes32 => string) public sources;\\n\\n    // Reward distributions for the reward mechanisms\\n    mapping(bytes32 => mapping(uint8 => uint256)) public rewardDistributions;\\n\\n    // Mapping from sourceID to functionForwarder that can call the performUpkeep\\n    mapping(bytes32 => FunctionData) public functionData;\\n\\n    // Mapping from requestID to sourceID \\n    mapping(bytes32 => RequestData) public requestData;\\n\\n    // Event to log responses\\n    event RoundWinners(\\n        bytes32 requestId,\\n        bytes32 sourceID,\\n        bytes response\\n    );\\n\\n    event rewardMechanismRegistered(\\n        string sourceName,\\n        string sourceCode,\\n        bytes32 sourceID,\\n        uint256[] rewardDistributions\\n    );\\n\\n    event RoundRewardsDistributed(\\n        bytes32 requestId,\\n        bytes32 sourceID,\\n        uint32[] topkAgents,\\n        address[] topkUsers\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _donID Chainlink's contract chainID => donID \\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) FunctionsClient(_oracle) ERC20(\\\"RocketAI\\\", \\\"RAI\\\"){\\n\\n        subscriptionId = _subscriptionId;\\n\\n        donID = _donID;\\n    }\\n\\n    /// @notice Set the setRewardMechanism that `performUpkeep` is called from\\n    /// a trusted address the chainlink forwarder\\n    /// @dev Only callable by the owner\\n    /// @param _sourceName sourceID to Forwarder address\\n    /// @param _sourceCode sourceID to Forwarder address\\n    /// @param _functionForwader chainlink automation forwarder address\\n    /// @param _rewardDistributions the reward distributions for the topK agents\\n    function addRewardMechanism(\\n        string memory _sourceName, \\n        string memory _sourceCode, \\n        address _functionForwader,\\n        uint256[] memory _rewardDistributions\\n    ) external onlyOwner {\\n        bytes32 _sourceID = createSourceID(_sourceName);\\n\\n        if(_sourceID == createSourceID(\\\"usersRewardMechanism\\\")){\\n            functionData[_sourceID].usersOrAgents = true;\\n        }\\n        uint8 size = uint8(_rewardDistributions.length);\\n\\n        functionData[_sourceID].numberOfWinners = size;\\n        functionData[_sourceID].functionForwarder = _functionForwader;\\n\\n        sources[_sourceID] = _sourceCode;\\n        for(uint8 i = 0; i < size; i++){\\n            rewardDistributions[_sourceID][i] = _rewardDistributions[i];\\n        }\\n        emit rewardMechanismRegistered(_sourceName, _sourceCode, _sourceID, _rewardDistributions);\\n    }\\n\\n    /**\\n     * @notice Sends an HTTP request for character information\\n     * @param sourceID The ID of the source to send the request to\\n     */\\n    function sendRequest(\\n        bytes32 sourceID\\n    ) external {\\n        require(functionData[sourceID].functionForwarder == msg.sender);\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(sources[sourceID]); // Initialize the request with JS code\\n\\n        // Send the request and store the request ID\\n        bytes32 reqID = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donID\\n        );\\n\\n        requestData[reqID].sourceID = sourceID;\\n    }\\n\\n    /**\\n     * @notice Callback function for fulfilling a request\\n     * @param requestId The ID of the request to fulfill\\n     * @param response The HTTP response data\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory /* err */\\n    ) internal override {\\n\\n        roundWinners[requestId] = response;\\n        // Emit an event to log the RoundWinners response from a sourceID mechanism\\n        emit RoundWinners(requestId, requestData[requestId].sourceID, response);\\n    }\\n\\n    function rewardsDistribution(bytes32 _requestID) public{\\n\\n        require(requestData[_requestID].executed == false, \\\"Already executed\\\");\\n        \\n        requestData[_requestID].executed = true;\\n\\n        bytes32 _sourceID = requestData[_requestID].sourceID;\\n\\n        uint8 size = functionData[_sourceID].numberOfWinners;\\n\\n        if(functionData[_sourceID].usersOrAgents){\\n\\n            uint32[] memory topkAgents = new uint32[](1);\\n\\n            address[] memory topkUsers = Helpers.splitConcatenatedAddresses(roundWinners[_requestID]);\\n            // Minting tokens to the topK users\\n            for(uint8 i = 0; i < size; i++){\\n                address tempWinner = topkUsers[i];\\n                uint256 tempReward = rewardDistributions[_sourceID][i];\\n                // Minting tokens to the topK agents \\n                _mint(tempWinner, tempReward * 10 ** 18 );\\n            }\\n\\n            emit RoundRewardsDistributed(_requestID, _sourceID, topkAgents, topkUsers);\\n\\n        }else{      \\n\\n            uint32[] memory topkAgents = Helpers.decodeBytesToUint32Array(roundWinners[_requestID]);\\n\\n            address[] memory agentCreators = new address[](size);\\n            // Minting tokens to the topK agents\\n            for(uint8 i = 0; i < functionData[_sourceID].numberOfWinners; i++){\\n                address tempWinner = agents[topkAgents[i]].creator;\\n\\n                agentCreators[i] = tempWinner;\\n\\n                uint256 tempReward = rewardDistributions[_sourceID][i];\\n                // Minting tokens to the topK agents \\n                _mint(tempWinner, tempReward * 10 ** 18 );\\n            }\\n\\n            emit RoundRewardsDistributed(_requestID, _sourceID, topkAgents, agentCreators);\\n        }\\n    }\\n     \\n    function createSourceID(string memory _sourceID) internal pure returns(bytes32){\\n        return keccak256(abi.encode(_sourceID));\\n    }\\n}\",\"keccak256\":\"0xb0200d796ded3234dccf0ecd65ee4ceb544dfd5343a2aa5472670ca2df42c118\",\"license\":\"MIT\"},\"contracts/RocketAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ChainlinkConsumer} from \\\"./ChainlinkConsumer.sol\\\";\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILogAutomation} from \\\"./interfaces/ILogAutomation.sol\\\";\\n\\n// import { Base64 } from \\\"./library/Base64.sol\\\";\\n\\n/**\\n * @title RocketAI (Decentralized Artificial Intelligence Marketplace)\\n * @notice\\n * @dev\\n */\\ncontract RocketAI is ChainlinkConsumer , ILogAutomation {\\n\\n    IUnlockV12 unlockContract;\\n\\n    struct AgentInitConfig {\\n        string agentName; //  assistant Id\\n        uint32 agentID; // assistant id of the assitant model into uint32\\n        uint subscriptionExpirationDuration; // Take from Creator\\n        address tokenAddress; // native for now\\n        uint keyPrice; // amount for the Sub\\n        uint basisPoint; // referre fee i.e. 100point == 1%\\n        string lockName; // `Subscription of AssistantName`\\n        string lockSymbol; // SOA``\\n        string baseTokenURI;\\n        string rewardCategory; // Category\\n        string actualCategory; // Category\\n        bool isOpenForContributions; // check to make it open For Contributions\\n    }\\n\\n    event agentRegistered(\\n        string agentName,\\n        string baseTokenURI,\\n        uint32 agentID,\\n        address creator,\\n        address unlockSubscriptionContract,\\n        uint keyPrice,\\n        uint basisPoint,\\n        string rewardCategory,\\n        string actualCategory,\\n        bool isOpenForContributions\\n    );\\n\\n    event agentVersionRegistered(\\n        uint32 agentID,\\n        string agentVersionName,\\n        uint32 agentVersionID,\\n        address creator,\\n        string agentMetadataCID\\n    );\\n\\n    event agentSubscriptionPurchased(\\n        uint32 agentID,\\n        uint256 tokenId,\\n        string threadID,\\n        address agentCreator,\\n        address subscriber\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _oracle The address of the Chainlink Function oracle\\n    /// @param _unlockContract The address of the Chainlink oracle Automation Forwarder\\n    /// @param _donID Chainlink's contract chainID => donID\\n    /// @param _subscriptionId The subscription ID for Chainlink Functions\\n    constructor(\\n        address _oracle,\\n        IUnlockV12 _unlockContract,\\n        bytes32 _donID,\\n        uint64 _subscriptionId\\n    ) ChainlinkConsumer(_oracle, _donID, _subscriptionId) {\\n        unlockContract = _unlockContract;\\n    }\\n\\n    function registerAgent(AgentInitConfig calldata agentConfig) external {\\n        require(\\n            agents[agentConfig.agentID].creator == address(0),\\n            \\\"agent already exists\\\"\\n        );\\n\\n        address newLockAddress = unlockContract.createLock(\\n            // Expiration duration of subscription\\n            month,\\n            agentConfig.tokenAddress,\\n            agentConfig.keyPrice,\\n            max,\\n            agentConfig.lockName,\\n            bytes12(0)\\n        );\\n        IPublicLockV12(newLockAddress).setLockMetadata(\\n            agentConfig.lockName,\\n            agentConfig.lockSymbol,\\n            agentConfig.baseTokenURI\\n        );\\n        if (agentConfig.basisPoint > 0)\\n            IPublicLockV12(newLockAddress).setReferrerFee(\\n                address(0),\\n                agentConfig.basisPoint\\n            );\\n        IPublicLockV12(newLockAddress).setEventHooks(\\n            // onKeyPurchase hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            // tokenURI hook\\n            // address(this),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n        IPublicLockV12(newLockAddress).updateLockConfig(month, max, max);\\n        agents[agentConfig.agentID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: newLockAddress,\\n            isOpenForContributions: agentConfig.isOpenForContributions\\n        });\\n\\n        emit agentRegistered(\\n            agentConfig.agentName,\\n            agentConfig.baseTokenURI,\\n            agentConfig.agentID,\\n            msg.sender,\\n            newLockAddress,\\n            agentConfig.keyPrice,\\n            agentConfig.basisPoint,\\n            agentConfig.rewardCategory,\\n            agentConfig.actualCategory,\\n            agentConfig.isOpenForContributions\\n        );\\n    }\\n\\n    function registerAgentVersion(\\n        uint32 _agentID,\\n        uint32 _agentVersionID,\\n        string memory _agentVersionName,\\n        string memory _agentMetadataCID\\n    ) external {\\n        require(\\n            agents[_agentID].isOpenForContributions,\\n            \\\"agent is not open for contributions\\\"\\n        );\\n\\n        require(\\n            agents[_agentVersionID].creator == address(0), \\n            \\\"agent already exists\\\"\\n        );\\n\\n        // Check Subscription plan\\n        agents[_agentVersionID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: agents[_agentID].lockAddress,\\n            isOpenForContributions: false\\n        });\\n\\n        emit agentVersionRegistered(\\n            _agentID,\\n            _agentVersionName,\\n            _agentVersionID,\\n            msg.sender,\\n            _agentMetadataCID\\n        );\\n\\n        agentVersions[_agentVersionID] = _agentID;\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _agentID to subscribe\\n     * @param _value array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n     */\\n    function purchaseSubscription(\\n        uint32 _agentID,\\n        uint256 _value,\\n        string memory _threadID\\n    ) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n        uint256[] memory tokenID = new uint256[](1);\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        // If the agent that we want to subscribe is a subVersion then\\n        // Pay the main agentID and give a referre fee to the contributor\\n        // Of this new agent Version. Referre fee is defined in the registerAgent function.\\n        if (!agents[_agentID].isOpenForContributions) {\\n            address referrer = agents[_agentID].creator;\\n            _referrers[0] = referrer;\\n        }\\n        _values[0] = _value;\\n        _recipients[0] = msg.sender;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n\\n            tokenID = IPublicLockV12(agentLockAddress).purchase(\\n                _values,\\n                _recipients,\\n                _referrers,\\n                _keyManagers,\\n                _data\\n            );\\n        } else {\\n            tokenID = IPublicLockV12(agentLockAddress).purchase{value: msg.value}(\\n                _values,\\n                _recipients,\\n                _referrers,\\n                _keyManagers,\\n                _data\\n            );\\n        }\\n\\n        emit agentSubscriptionPurchased(\\n            _agentID,\\n            tokenID[0],\\n            _threadID,\\n            agents[_agentID].creator,\\n            msg.sender\\n        );\\n    }\\n\\n    function extendSubscription(uint256 _value, uint256 _tokenId, uint32 _agentID) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n\\n        bytes memory _data;\\n        address _referrer;\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n\\n        if (!agents[_agentID].isOpenForContributions) {\\n            _referrer = agents[_agentID].creator;\\n        }\\n\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n            IPublicLockV12(agentLockAddress).extend(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        } else {\\n            IPublicLockV12(agentLockAddress).extend{value: msg.value}(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        }\\n    } \\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _agentID to withdraw money from the lock contract\\n     */\\n    function withdraw(uint32 _agentID) external {\\n        AgentStruct memory _agent = agents[_agentID];\\n        IPublicLockV12 AgentLockContract = IPublicLockV12(_agent.lockAddress);\\n        uint balance = address(_agent.lockAddress).balance;\\n        uint amountToTransfer = (balance / 10) * 7;\\n        address tokenAddress = AgentLockContract.tokenAddress();\\n        AgentLockContract.withdraw(\\n            tokenAddress,\\n            payable(address(this)),\\n            balance\\n        );\\n        address payable withdrawer = payable(_agent.creator);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, amountToTransfer);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, amountToTransfer);\\n        }\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw(address tokenAddress) external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, address(this).balance);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    // Chainlink log automation functions\\n\\n    function checkLog(\\n        Log calldata log,\\n        bytes memory\\n    ) external pure returns (bool upkeepNeeded, bytes memory performData) {\\n        upkeepNeeded = true;\\n        performData = abi.encode(log.topics[1]);\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        bytes32 _requestID = abi.decode(performData, (bytes32));\\n        rewardsDistribution(_requestID);\\n    }\\n\\n    // Unlock Protocol custom hooks\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view {\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(\\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice) {\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n\\n    // function tokenURI(\\n    //     address lockAddress, \\n    //     address operator, \\n    //     address owner, \\n    //     uint256 keyId, \\n    //     uint256 expirationTimestamp\\n    // ) external pure returns (string memory){\\n    //     return Base64.tokenURI(lockAddress, operator, owner, keyId, expirationTimestamp);\\n    // }\\n}\\n\",\"keccak256\":\"0x11d353068cc0d54e8b33a421442729685027777775e0df7a6a0fdb7d75a0cbf8\",\"license\":\"MIT\"},\"contracts/interfaces/ILogAutomation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILogAutomation {\\n    struct Log {\\n        uint256 index; // Index of the log in the block\\n        uint256 timestamp; // Timestamp of the block containing the log\\n        bytes32 txHash; // Hash of the transaction containing the log\\n        uint256 blockNumber; // Number of the block containing the log\\n        bytes32 blockHash; // Hash of the block containing the log\\n        address source; // Address of the contract that emitted the log\\n        bytes32[] topics; // Indexed topics of the log\\n        bytes data; // Data of the log\\n    }\\n    function checkLog(\\n        Log calldata log,\\n        bytes memory checkData\\n    ) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n    function performUpkeep(bytes calldata performData) external;\\n}\",\"keccak256\":\"0xd856acf7228c3e6d287b73050e652e7234bb1343348b38a2721ae5bc8179e15b\",\"license\":\"MIT\"},\"contracts/library/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary Helpers {\\n\\n    function stringToBytes(string memory data) internal pure returns (bytes memory) {\\n        bytes memory temp = bytes(data);\\n        require(temp.length >= 2, \\\"Source string not properly formatted.\\\");\\n        require(temp[0] == '0' && (temp[1] == 'x' || temp[1] == 'X'), \\\"Source string must start with '0x'.\\\");\\n\\n        if (temp.length == 2) {\\n            // String is only '0x'\\n            return new bytes(0);\\n        }\\n\\n        uint256 byteLength = (temp.length - 2) / 2;\\n        bytes memory byteArray = new bytes(byteLength);\\n        \\n        for (uint256 i = 2; i < temp.length; i += 2) {\\n            byteArray[(i - 2) / 2] = bytes1(toByte(temp[i]) * 16 + toByte(temp[i + 1]));\\n        }\\n\\n        return byteArray;\\n    }\\n\\n    function toByte(bytes1 char) internal pure returns (uint8) {\\n        uint8 byteValue = uint8(char);\\n        if (byteValue >= 48 && byteValue <= 57) {  // '0' - '9'\\n            return byteValue - 48;\\n        }\\n        if (byteValue >= 97 && byteValue <= 102) { // 'a' - 'f'\\n            return byteValue - 97 + 10;\\n        }\\n        if (byteValue >= 65 && byteValue <= 70) {  // 'A' - 'F'\\n            return byteValue - 65 + 10;\\n        }\\n        revert(\\\"Invalid character in string\\\");\\n    }\\n\\n    function decodeBytesToUint32Array(bytes memory input) internal pure returns (uint32[] memory) {\\n\\n        string memory decodedString = string(input);\\n\\n        bytes memory data = stringToBytes(decodedString);\\n\\n        require(data.length % 4 == 0, \\\"Data length must be a multiple of 4\\\");\\n\\n        uint32[] memory decodedArray = new uint32[](data.length / 4);\\n\\n        for (uint256 i = 0; i < decodedArray.length; i++) {\\n            decodedArray[i] = toUint32(data, i * 4);\\n        }\\n\\n        return decodedArray;\\n    }\\n\\n    function toUint32(bytes memory data, uint256 startIndex) internal pure returns (uint32) {\\n        require(startIndex + 4 <= data.length, \\\"Index out of bounds\\\");\\n\\n        uint32 value;\\n        assembly {\\n            value := mload(add(add(data, 0x4), startIndex))\\n        }\\n        return value;\\n    }\\n\\n    function splitConcatenatedAddresses(bytes memory input) internal pure returns (address[] memory) {\\n\\n        string memory decodedString = string(input);\\n\\n        bytes memory data = stringToBytes(decodedString);\\n\\n        require(data.length % 20 == 0, \\\"Data length must be a multiple of 20 bytes\\\");\\n\\n        uint256 numberOfAddresses = data.length / 20;\\n        address[] memory addresses = new address[](numberOfAddresses);\\n\\n        for (uint256 i = 0; i < numberOfAddresses; i++) {\\n            bytes memory addressBytes = new bytes(20);\\n            for (uint256 j = 0; j < 20; j++) {\\n                addressBytes[j] = data[i * 20 + j];\\n            }\\n            addresses[i] = bytesToAddress(addressBytes);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n}\",\"keccak256\":\"0x9659880a5875d5a0c7c16b732280144e66b0a3f5c23c8b6f7dbccd9a25137c42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a034620003fa57601f906001600160401b0390601f1962004b943881900385810183168401919085831185841017620003ff57808592608094604052833981010312620003fa5781516001600160a01b03938482169291839003620003fa576020908185015196868816809803620003fa576060604087015196015194828616809603620003fa576200009262000415565b936008855267526f636b6574414960c01b81860152620000b162000415565b91600383526252414960e81b82840152608052600090815460018060a01b03199a338c83161784553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a3855196858811620003e6576004978854976001988981811c91168015620003db575b85821014620003c85790818884931162000375575b5084908883116001146200031457869262000308575b5050600019600383901b1c191690881b1788555b8351958611620002f5576005978854908882811c92168015620002ea575b84831014620002d7575085811162000291575b50819486116001146200022b575050918394918493946200021f575b50501b916000199060031b1c19161790555b61249f60a51b63ffffffff60a01b1960085416176008556000196009556228de80600a5560018060401b03196006541617600655600b55601354161760135560405161475e908162000436823960805181818161061701526127b70152f35b015192503880620001ae565b8783528183209493928692918316915b888383106200027657505050106200025c575b505050811b019055620001c0565b015160001960f88460031b161c191690553880806200024e565b8587015188559096019594850194879350908101906200023b565b888452828420868089018b1c820192858a10620002cd575b018a1c019088905b828110620002c157505062000192565b858155018890620002b1565b92508192620002a9565b634e487b7160e01b855260229052602484fd5b91607f16916200017f565b634e487b7160e01b835260418852602483fd5b0151905038806200014d565b90848b9416918c885286882092885b888282106200035e575050841162000344575b505050811b01885562000161565b015160001960f88460031b161c1916905538808062000336565b8385015186558e9790950194938401930162000323565b9091508a86528486208880850160051c820192878610620003be575b918c91869594930160051c01915b828110620003af57505062000137565b8881558594508c91016200039f565b9250819262000391565b634e487b7160e01b865260228b52602486fd5b90607f169062000122565b634e487b7160e01b83526041600452602483fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b03811183821017620003ff5760405256fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306fdde031461024b57806307e3290414610246578063095ea7b3146102415780630c92ecf71461023c5780630ca761751461023757806318160ddd14610232578063221c1fd11461022d57806323b872dd14610228578063313ce567146102235780633661346b1461021e578063395093511461021957806340691db4146102145780634585e33b1461020f57806351cff8d91461020a578063584992de146102055780635e895f29146102005780635f1d78ae146101fb57806362e16bd3146101f657806370a08231146101f1578063715018a6146101ec57806381bb4250146101e75780638c3d86b4146101e25780638da5cb5b146101dd57806395d89b41146101d85780639d58754f146101d35780639f1ea81b146101ce578063a457c2d7146101c9578063a9059cbb146101c4578063a9cf7519146101bf578063aa9224cd146101ba578063ba30621e146101b5578063dd62ed3e146101b0578063e9239117146101ab578063f2fde38b146101a65763fe5f49ac0361000e57611fcd565b611f06565b611b7d565b611b1a565b611abb565b611959565b611716565b6116ec565b61163a565b611604565b6115b7565b611510565b6114e7565b6113ff565b61108e565b611033565b610ff6565b610e52565b610e01565b610cad565b610c70565b610b72565b610b2a565b610a67565b6109f3565b6109b9565b61099d565b6108ca565b61080b565b6107c0565b6105c8565b6104fd565b6103c6565b610399565b6102b4565b600091031261025b57565b600080fd5b919082519283825260005b84811061028c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161026b565b9060206102b1928181520190610260565b90565b3461025b576000806003193601126103965760405190806004546102d781610d14565b8085529160019180831690811561036c5750600114610311575b61030d8561030181870382610444565b604051918291826102a0565b0390f35b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103545750505081016020016103018261030d6102f1565b80546020858701810191909152909301928101610339565b86955061030d9693506020925061030194915060ff191682840152151560051b82010192936102f1565b80fd5b3461025b57602036600319011261025b576100196004356137b5565b6001600160a01b0381160361025b57565b3461025b57604036600319011261025b576103f06004356103e6816103b5565b6024359033612284565b602060405160018152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161042457604052565b6103fb565b604081019081106001600160401b0382111761042457604052565b90601f801991011681019081106001600160401b0382111761042457604052565b60405190606082018281106001600160401b0382111761042457604052565b6001600160401b03811161042457601f01601f191660200190565b81601f8201121561025b578035906104b682610484565b926104c46040519485610444565b8284526020838301011161025b57816000926020809301838601378301015290565b6001600160401b0381116104245760051b60200190565b3461025b57608036600319011261025b576001600160401b0360043581811161025b5761052e90369060040161049f565b9060243581811161025b5761054790369060040161049f565b60443590610554826103b5565b60643592831161025b573660238401121561025b57826004013593610578856104e6565b936105866040519586610444565b85855260209560248787019160051b8301019136831161025b57602401905b8282106105b95750505061001994506123af565b813581529087019087016105a5565b3461025b57606036600319011261025b576001600160401b0360043560243582811161025b576105fc90369060040161049f565b60443583811161025b5761061490369060040161049f565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036107ae57600092828452602090600e825260408520918351918211610424576106748261066e8554610d14565b85612563565b80601f831160011461071f575090807f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379493928791610714575b508160011b916000199060031b1c19161790555b60016106d8846000526012602052604060002090565b01546106ea6040519283928684613670565b0390a17f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b9050830151386106ae565b90601f19831661073485600052602060002090565b9288905b8282106107965750509183917f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379695946001941061077d575b5050811b0190556106c2565b85015160001960f88460031b161c191690553880610771565b80600185968294968b01518155019501930190610738565b60405163c6829f8360e01b8152600490fd5b3461025b57600036600319011261025b576020600354604051908152f35b9181601f8401121561025b578235916001600160401b03831161025b576020838186019501011161025b57565b3461025b57608036600319011261025b576108276004356103b5565b6108326024356103b5565b61083d6044356103b5565b6064356001600160401b03811161025b5761085c9036906004016107de565b50506040516310e5697360e01b8152602081600481335afa80156108c55761030d91600091610897575b506040519081529081906020820190565b6108b8915060203d81116108be575b6108b08183610444565b810190612744565b38610886565b503d6108a6565b612753565b3461025b57606036600319011261025b576004356108e7816103b5565b6024356108f3816103b5565b6001600160a01b03821660009081526002602090815260408083203384529091529020604435919054926001840161093c575b610930935061216a565b60405160018152602090f35b828410610958576109538361093095033383612284565b610926565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461025b57600036600319011261025b57602060405160128152f35b3461025b57602036600319011261025b576004356000526012602052604080600020600160ff825416910154825191151582526020820152f35b3461025b57604036600319011261025b57600435610a10816103b5565b3360009081526002602090815260408083206001600160a01b03851684529091529020546024358101809111610a4a576103f09133612284565b61206a565b9060406102b192600181528160208201520190610260565b3461025b5760031960403682011261025b576001600160401b039060043582811161025b576101008136039283011261025b5760243583811161025b57610ab290369060040161049f565b5060c4810135916022190182121561025b570190600482013590811161025b578060051b3603602483011361025b5760011015610b25576044610b1961030d92610b0b6040519384920135602083019190602083019252565b03601f198101835282610444565b60405191829182610a4f565b612696565b3461025b57602036600319011261025b576004356001600160401b03811161025b57610b5c60209136906004016107de565b908092918101031261025b5761001990356137b5565b3461025b5760208060031936011261025b57600435610b90816103b5565b610b98612012565b6001600160a01b031680610bb2575050610019473361406c565b6040516370a0823160e01b81523060048201528281602481855afa9081156108c5576000928492610c0f928591610c45575b5060405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af180156108c557610c1f57005b8161001992903d10610c3e575b610c368183610444565b810190613f6c565b503d610c2c565b610c5c9150843d86116108be576108b08183610444565b38610be4565b63ffffffff81160361025b57565b3461025b57602036600319011261025b576020600435610c8f81610c62565b63ffffffff809116600052600d825260406000205416604051908152f35b3461025b5760e036600319011261025b57602435610cca816103b5565b610cd56044356103b5565b610ce06064356103b5565b6084356001600160401b03811161025b57610cff9036906004016107de565b5050306001600160a01b039091160361025b57005b90600182811c92168015610d44575b6020831014610d2e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d23565b9060009291805491610d5f83610d14565b918282526001938481169081600014610dc15750600114610d81575b50505050565b90919394506000526020928360002092846000945b838610610dad575050505001019038808080610d7b565b805485870183015294019385908201610d96565b9294505050602093945060ff191683830152151560051b01019038808080610d7b565b90610dff610df89260405193848092610d4e565b0383610444565b565b3461025b57602036600319011261025b57600435600052600f60205261030d610e37610e3e604060002060405192838092610d4e565b0382610444565b604051918291602083526020830190610260565b3461025b57608036600319011261025b57600435610e6f81610c62565b60243590610e7c82610c62565b6001600160401b039160443583811161025b57610e9d90369060040161049f565b9060643593841161025b577f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a3520610fe192610ede61001996369060040161049f565b9063ffffffff8616600052600c602052610f0560ff60016040600020015460a01c16613d2d565b610f4060018060a01b03610f39610f2c8763ffffffff16600052600c602052604060002090565b546001600160a01b031690565b1615613b14565b610fb5610f706001610f628963ffffffff16600052600c602052604060002090565b01546001600160a01b031690565b610f8f610f7b610465565b338152916001600160a01b03166020830152565b60006040820152610fb08663ffffffff16600052600c602052604060002090565b613c54565b610fc86040519283928633918a86613d85565b0390a163ffffffff16600052600d602052604060002090565b9063ffffffff1663ffffffff19825416179055565b3461025b57602036600319011261025b57600435611013816103b5565b60018060a01b031660005260016020526020604060002054604051908152f35b3461025b576000806003193601126103965761104d612012565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b606036600319011261025b5760048035906110a882610c62565b6044356001600160401b03811161025b576110c6903690830161049f565b9060018060a01b03926110f8846110f0610f2c8463ffffffff16600052600c602052604060002090565b161515613dcf565b6111006136cb565b936111096136cb565b6111116136cb565b6111196136cb565b611121613e13565b9561112a6136cb565b508461114b6001610f628963ffffffff16600052600c602052604060002090565b61117c611178600161116d8b63ffffffff16600052600c602052604060002090565b015460a01c60ff1690565b1590565b6113d1575b60243561118d856126ac565b526111aa3361119b886126ac565b6001600160a01b039091169052565b169260409788516313aedd4b60e31b8152602097888286818a5afa9182156108c5576000926113a2575b508a516310e5697360e01b815291898387818b5afa9283156108c557600093611383575b501690811561131c578a516323b872dd60e01b81523381870190815230602082015260408101929092529493929189918691908290600090829060600103925af19182156108c557600098899561126a946112fe575b50508a51633381899760e01b81529c8d98899788968701613ec1565b03925af19081156108c5576112ac6112d8927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916112dd575b506126ac565b51926112cb610f2c8363ffffffff16600052600c602052604060002090565b9051948594339386613f81565b0390a1005b6112f8913d8091833e6112f08183610444565b810190613e48565b386112a6565b8161131492903d10610c3e57610c368183610444565b50388061124e565b5050600096506113409189519b8c9788968796633381899760e01b88528701613ec1565b039134905af19081156108c5576112ac6112d8927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916112dd57506126ac565b61139b9193508a3d8c116108be576108b08183610444565b91386111f8565b6113c3919250893d8b116113ca575b6113bb8183610444565b810190613b93565b90386111d4565b503d6113b1565b6113fa6113f1610f2c8a63ffffffff16600052600c602052604060002090565b61119b8d6126ac565b611181565b3461025b57602036600319011261025b576004356000818152601160205260409020546001600160a01b0316330361025b5760405160e081018181106001600160401b03821117610424576114d36114b16001936114e39360405260008152600060208201526000604082015260608082015260606080820152606060a0820152606060c08201526114ac6114a66114a188600052600f602052604060002090565b610de4565b82612b4a565b612977565b6006546001600160401b031660085460a01c63ffffffff1690600b549261275f565b6000526012602052604060002090565b0155005b3461025b57600036600319011261025b576000546040516001600160a01b039091168152602090f35b3461025b5760008060031936011261039657604051908060055461153381610d14565b8085529160019180831690811561036c575060011461155c5761030d8561030181870382610444565b9250600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061159f5750505081016020016103018261030d6102f1565b80546020858701810191909152909301928101611584565b3461025b57602036600319011261025b576004356000526011602052606060406000205460ff6040519160018060a01b0381168352818160a01c16602084015260a81c1615156040820152f35b3461025b57602036600319011261025b57600435600052600e60205261030d610e37610e3e604060002060405192838092610d4e565b3461025b57604036600319011261025b57600435611657816103b5565b602435903360005260026020526116848160406000209060018060a01b0316600052602052604060002090565b54918083106116995761093092039033612284565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461025b57604036600319011261025b576103f060043561170c816103b5565b602435903361216a565b606036600319011261025b57600480359060243560443561173681610c62565b60018060a01b039361175f856110f0610f2c8563ffffffff16600052600c602052604060002090565b6000946117936117876117876001610f628763ffffffff16600052600c602052604060002090565b6001600160a01b031690565b92604051916313aedd4b60e31b835260209283818981895afa9081156108c557899161193c575b506040516310e5697360e01b81529284848a818a5afa9384156108c5578a9461191d575b50611801611178600161116d8463ffffffff16600052600c602052604060002090565b6118f6575b501680156118b957604080516323b872dd60e01b81523389820190815230602082015291820193909352839183918290600090829060600103925af180156108c55761189b575b5050813b1561025b57600080946118786040519788968795869463d813cc1960e01b86528501613fc3565b03925af180156108c55761188857005b8061189561001992610411565b80610250565b816118b192903d10610c3e57610c368183610444565b50388061184d565b505050813b1561025b576000936118e46040519687958694859463d813cc1960e01b86528501613fc3565b039134905af180156108c55761188857005b611916919950610f2c9063ffffffff16600052600c602052604060002090565b9738611806565b611935919450853d87116108be576108b08183610444565b92386117de565b6119539150843d86116113ca576113bb8183610444565b386117ba565b3461025b5760208060031936011261025b5761199861199360043561197d81610c62565b63ffffffff16600052600c602052604060002090565b614025565b818101516001600160a01b03908116929083316119b7600a8204612cee565b93604051956313aedd4b60e31b87528487600481845afa9687156108c557600097611a9c575b50803b1561025b57604051636ce5768960e11b81526001600160a01b038816600482015230602482015260448101939093526000908390606490829084905af19081156108c557611a3f9261178792611a89575b50516001600160a01b031690565b931680611a515750506100199161406c565b60405163a9059cbb60e01b81526001600160a01b03909416600485015260248401929092529190829082908160008160448101610c0f565b80611895611a9692610411565b38611a31565b611ab4919750853d87116113ca576113bb8183610444565b95386119dd565b3461025b57602036600319011261025b5763ffffffff600435611add81610c62565b16600052600c6020526060604060002060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b3461025b57604036600319011261025b576020611b74600435611b3c816103b5565b60243590611b49826103b5565b60018060a01b03166000526002835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b3461025b5760031960203682011261025b57600480356001600160401b03811161025b5761018081830193823603011261025b5760248101906001600160a01b0390611bd282610f39610f2c61197d87613b0a565b601354611be7906001600160a01b0316611787565b94600a5490611bf860648401613b57565b91608484013596879560206009549560c4880194611c36611c198789613b61565b9060409a8b519d8e96879663216c908360e11b88528b8801613bc9565b03816000809e5af19687156108c5578a97611ee2575b50611c5a9087169284613b61565b95908a611c6a60e4840187613b61565b989092610104850199611c7d8b8a613b61565b90893b15611ede57611ca2928c51978896879663d1b8759b60e01b88528c8801613c06565b038183885af180156108c557611ecb575b5060a48101359182611e73575b833b15611e6f5785516374cac47d60e01b81523082820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c08201529091908c908390819060e001038183895af19182156108c5578c92611e5c575b50600a549460095495813b15611e5857838793611d658b51998a968795869463282478df60e01b865285016040919493926060820195825260208201520152565b03925af19182156108c5577f60959c5b991214a9f145caa42f648174a46bd41e2f7f92d206d2b2d07e8e26f599611e0998611e3f98611e3297611df08a610fb08f61197d90611dc79c6101449c611e45575b50611deb6101648c019d8e613c4a565b611dcf610465565b338152956001600160a01b038b16602088015286019015159052565b613b0a565b611e11611e2a611e008380613b61565b9e909484613b61565b92909f613b0a565b92611e206101248a0182613b61565b9a90990190613b61565b9a9099613c4a565b9a519d8e9d33948f613cac565b0390a180f35b80611895611e5292610411565b38611db7565b8380fd5b80611895611e6992610411565b38611d24565b8a80fd5b833b15611e6f57855163debe2b0d60e01b81528b8180611ea187868301919060206040840193600081520152565b038183895af180156108c557611eb8575b50611cc0565b80611895611ec592610411565b38611eb2565b80611895611ed892610411565b38611cb3565b8580fd5b611c5a919750611eff9060203d81116113ca576113bb8183610444565b9690611c4c565b3461025b57602036600319011261025b57600435611f23816103b5565b611f2b612012565b6001600160a01b039081168015611f7957600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461025b57604036600319011261025b5760243560ff8116810361025b57611b746020916004356000526010835260406000209060ff16600052602052604060002090565b6000546001600160a01b0316330361202657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b9060208201809211610a4a57565b9060028201809211610a4a57565b9060018201809211610a4a57565b91908201809211610a4a57565b156120be57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561211657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b03808416929091831561223157612216827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9461222c9416966121b68815156120b7565b6001600160a01b03811660009081526001602052604090206121fb908590546121e18282101561210f565b039160018060a01b03166000526001602052604060002090565b556001600160a01b0316600090815260016020526040902090565b8054820190556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03808216929190831561235e57821693841561230e57806122fd7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946122e661222c9560018060a01b03166000526002602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b929091936123bb612012565b6123c484613ae7565b926123fa6040516123d481610429565b601481527375736572735265776172644d656368616e69736d60601b6020820152613ae7565b8414612530575b61247c612412849796975160ff1690565b956124498761242b886000526011602052604060002090565b8054909160ff60a01b1990911660a09190911b60ff60a01b16179055565b61245d866000526011602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6124998161249486600052600f602052604060002090565b6125b7565b60ff9485169560005b868116888110156124f157906124bb6124ec92876126b9565b516124e6826124d48a6000526010602052604060002090565b9060ff16600052602052604060002090565b55612685565b6124a2565b505092909361252b9296507f75667fad75521b835344aca3b0eea672769f8704aa6bebba7ed3d59ae740f07a955060405194859485612701565b0390a1565b61255a612547856000526011602052604060002090565b805460ff60a81b1916600160a81b179055565b612401565b9055565b90601f811161257157505050565b600091825260208220906020601f850160051c830194106125ad575b601f0160051c01915b8281106125a257505050565b818155600101612596565b909250829061258d565b91909182516001600160401b038111610424576125de816125d88454610d14565b84612563565b602080601f831160011461261a57508192939460009261260f575b50508160011b916000199060031b1c1916179055565b0151905038806125f9565b90601f1983169561263085600052602060002090565b926000905b88821061266d57505083600195969710612654575b505050811b019055565b015160001960f88460031b161c1916905538808061264a565b80600185968294968601518155019501930190612635565b60ff1660ff8114610a4a5760010190565b634e487b7160e01b600052603260045260246000fd5b805115610b255760200190565b8051821015610b255760209160051b010190565b90815180825260208080930193019160005b8281106126ed575050505090565b8351855293810193928101926001016126df565b906102b1949261271c61272a92608085526080850190610260565b908382036020850152610260565b92604082015260608184039101526126cd565b1561025b57565b9081602091031261025b575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff61279e604051978896879663230e93b160e11b885216600487015260a0602487015260a4860190610260565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156108c55760009161281a575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b612832915060203d81116108be576108b08183610444565b386127f0565b6040519061284582610429565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b6003111561288057565b612860565b6040519061289282610429565b60088252676c616e677561676560c01b6020830152565b6001111561288057565b604051906128c082610429565b6006825265736f7572636560d01b6020830152565b604051906128e282610429565b60048252636172677360e01b6020830152565b6000198114610a4a5760010190565b6040519061291182610429565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b6040519061293c82610429565b60078252667365637265747360c81b6020830152565b6040519061295f82610429565b600982526862797465734172677360b81b6020830152565b61297f612b8d565b9061299161298b612838565b83613331565b6129ae815161299f81612876565b6129a881612876565b83612c4d565b6129b961298b612885565b6129d360408201516129ca816128a9565b6129a8816128a9565b6129de61298b6128b3565b6129ec606082015183613331565b60a08101805151612af1575b506080810190815151612a71575b60c0915001805151612a19575b50515190565b91612a2561298b612952565b612a2e826133b5565b60005b83518051821015612a5e5790612a54612a4d82612a59946126b9565b518561327c565b6128f5565b612a31565b50509150612a6b81613441565b38612a13565b602081018051612a8081612876565b612a8981612876565b15612adf5760c092612ac2612ada92612aa9612aa3612904565b88613331565b51612ab381612876565b612abc81612876565b86612c4d565b612ad3612acd61292f565b86613331565b518461327c565b612a06565b60405163a80d31f760e01b8152600490fd5b92612b03612afd6128d5565b84613331565b612b0c836133b5565b60005b84518051821015612b375790612a54612b2b82612b32946126b9565b5186613331565b612b0f565b50509250612b4482613441565b386129f8565b815115612b61576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b60405190612b8082610429565b6000602083606081520152565b604051612b9981610429565b612ba1612b73565b8082526020820160008152612bb4612b73565b50610100602083015260405180925260008252610120820191821061025b576000916040525290565b601f19810191908211610a4a57565b600119810191908211610a4a57565b90612c04612b73565b50601f811680612c33575b508060208301526040519081835260008252810160200190811061025b5760405290565b60200360208111610a4a578101809111610a4a5738612c0f565b90815191612c59612b73565b508251516001810190818111610a4a576020850151811015612cb2575b60c26020610dff9651928301015380518211612caa575b505060405191602083015260208252612ca582610429565b61327c565b523880612c8d565b8160011b9482860460021483151715610a4a57602081612ce4610dff98612cdd60c295519184612bfb565b50826131cb565b5096505050612c76565b90600782029180830460071490151715610a4a57565b908160011b9180830460021490151715610a4a57565b90670de0b6b3a764000091828102928184041490151715610a4a57565b908160021b9180830460041490151715610a4a57565b90601482029180830460141490151715610a4a57565b612d6b612b73565b508051516001810190818111610a4a576020830151811015612da4575b605b60208451928301015380518211612da057505090565b5290565b8160011b82810460021483151715610a4a57612dcd90612dc685519186612bfb565b50846131cb565b50612d88565b612ddb612b73565b508051516001810190818111610a4a576020830151811015612e10575b605a60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612e3290612dc685519186612bfb565b50612df8565b612e40612b73565b508051516001810190818111610a4a576020830151811015612e75575b605960208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612e9790612dc685519186612bfb565b50612e5d565b612ea5612b73565b508051516001810190818111610a4a576020830151811015612eda575b605860208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612efc90612dc685519186612bfb565b50612ec2565b612f0a612b73565b508051516001810190818111610a4a576020830151811015612f3f575b607b60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612f6190612dc685519186612bfb565b50612f27565b612f6f612b73565b508051516001810190818111610a4a576020830151811015612fa4575b607a60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612fc690612dc685519186612bfb565b50612f8c565b612fd4612b73565b508051516001810190818111610a4a576020830151811015613009575b607960208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a5761302b90612dc685519186612bfb565b50612ff1565b613039612b73565b508051516001810190818111610a4a57602083015181101561306e575b607860208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a5761309090612dc685519186612bfb565b50613056565b9061309f612b73565b508151516001810191828211610a4a5760208401518210156130d2575b60208451928301015380518211612da057505090565b8260011b83810460021484151715610a4a576130fb906130f486519187612bfb565b50856131cb565b506130bc565b9061310e82519183612bfb565b50613117612b73565b50805190613123612b73565b50613131815183111561273d565b8251519261313f83856120aa565b9160209282848094015182116131b4575b51838151978201019682116131ac575b505001915b818110156131865760001991036101000a0190811990511690825116179052565b91926131a161319b6131a79286518152612080565b94612080565b92612bdd565b613165565b523880613160565b6131c66131c083612d04565b82613101565b613150565b906131d4612b73565b5080516131df612b73565b506131ed825182111561273d565b825151916131fb82846120aa565b6020918291828701518111613265575b86518381519782010196821161325d575b505001915b818110156132435760001991036101000a019081199051169082511617905290565b91926131a161319b6132589286518152612080565b613221565b52388061321c565b61327761327182612d04565b88613101565b61320b565b81516132b39291906001600160401b03811690601782116132b6576132ab9150604060ff845192161790613096565b505b516131cb565b50565b5060ff81116132db576132d5906132cd8351612e9d565b50825161360a565b506132ad565b61ffff81116132fa576132d5906132f28351612e38565b5082516135a3565b63ffffffff811161331b576132d5906133138351612dd3565b50825161353a565b6132d5906133298351612d63565b5082516134ce565b81516132b39291906001600160401b0381169060178211613360576132ab9150606060ff845192161790613096565b5060ff8111613377576132d5906132cd8351613031565b61ffff811161338e576132d5906132f28351612fcc565b63ffffffff81116133a7576132d5906133138351612f67565b6132d5906133298351612f02565b8051906133c0612b73565b508151516001810190818111610a4a57602084015181101561340e575b609f6020809551928301015380518211613406575b50500180519060018201809211610a4a5752565b5238806133f2565b8160011b9382850460021483151715610a4a576020816134378297612cdd609f95519184612bfb565b50955050506133dd565b80519061344c612b73565b508151516001810190818111610a4a57602084015181101561349b575b60ff6020809551928301015380518211613493575b5050018051600019810191908211610a4a5752565b52388061347e565b8160011b9382850460021483151715610a4a576020816134c48297612cdd60ff95519184612bfb565b5095505050613469565b906134d7612b73565b50815151806008019182600811610a4a5760208401518311613519575b6008845192830101906001600160401b031982511617905280518211612da057505090565b8260011b83810460021484151715610a4a576135359085613101565b6134f4565b90613543612b73565b50815151806004019182600411610a4a5760208401518311613582575b60048451928301019063ffffffff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a5761359e9085613101565b613560565b906135ac612b73565b50815151806002019182600211610a4a57602084015183116135e9575b60028451928301019061ffff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a576136059085613101565b6135c9565b90613613612b73565b50815151806001019182600111610a4a576020840151831161364f575b60018451928301019060ff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a5761366b9085613101565b613630565b6102b19392606092825260208201528160408201520190610260565b1561369357565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b604051906136d882610429565b6001825260203681840137565b906136ef826104e6565b6136fc6040519182610444565b828152809261370d601f19916104e6565b0190602036910137565b90815180825260208080930193019160005b828110613737575050505090565b83516001600160a01b031685529381019392810192600101613729565b909493919460808201908252602095868301526080604083015283518091528560a0830194019060005b81811061379b575050506102b19394506060818403910152613717565b825163ffffffff168652948701949187019160010161377e565b906137dd6137d76137d0846000526012602052604060002090565b5460ff1690565b1561368c565b6138016137f4836000526012602052604060002090565b805460ff19166001179055565b60019182613819826000526012602052604060002090565b01549061383d613833836000526011602052604060002090565b5460a01c60ff1690565b61385e613854846000526011602052604060002090565b5460a81c60ff1690565b15613937579361386c6136cb565b908061388d6138886114a186600052600e602052604060002090565b61462d565b96600060ff809216925b6138d3575b505050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b57939461252b9160405194859485613754565b8181168381101561393157906139266138ff6138f261392b948d6126b9565b516001600160a01b031690565b61392061391a846124d48d6000526010602052604060002090565b54612d1a565b90613a2d565b612685565b83613897565b5061389c565b6139586139536114a1849794600052600e602052604060002090565b61416c565b9061396660ff8092166136e5565b926000815b6139a7575b5050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b5793949161252b9160405194859485613754565b6139c76139c1613833886000526011602052604060002090565b60ff1690565b83821690811015613a27579061392661119b613a06846139fd610f2c61197d6139f3613a21998d6126b9565b5163ffffffff1690565b9283918b6126b9565b61392061391a846124d48c6000526010602052604060002090565b8161396b565b50613970565b6001600160a01b03811691908215613aa25760035490828201809211610a4a57600092613a936020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460035560018060a01b03166000526001602052604060002090565b818154019055604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b604051613b0481610b0b6020820194602086526040830190610260565b51902090565b356102b181610c62565b15613b1b57565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b356102b1816103b5565b903590601e198136030182121561025b57018035906001600160401b03821161025b5760200191813603831361025b57565b9081602091031261025b57516102b1816103b5565b908060209392818452848401376000828201840152601f01601f1916010190565b96959093613c01936000969360a0968a52600180881b031660208a01526040890152606088015260c0608088015260c0870191613ba8565b930152565b94929093613c246102b19795613c3294606089526060890191613ba8565b918683036020880152613ba8565b926040818503910152613ba8565b8015150361025b57565b356102b181613c40565b815181546001600160a01b03199081166001600160a01b039283161783556020840151600190930180549390921692169190911781559061255f9060400151825460ff60a01b191690151560a01b60ff60a01b161790565b9d9e9d604063ffffffff829f9b966101209f9d989a9496613d259f9a9691613c24613d169e99613ce494610140808a52890191613ba8565b99169101526001600160a01b0391821660608e01521660808c015260a08b015260c08a015288830360e08a0152613ba8565b91858303610100870152613ba8565b931515910152565b15613d3457565b60405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b9190613dac6102b19694959263ffffffff809316855260a0602086015260a0850190610260565b941660408301526001600160a01b03166060820152808303608090910152610260565b15613dd657565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b604051613e1f81610429565b600181528060005b602080821015613e4257906060602092828501015201613e27565b50505090565b602090818184031261025b578051906001600160401b03821161025b57019180601f8401121561025b578251613e7d816104e6565b93613e8b6040519586610444565b818552838086019260051b82010192831161025b578301905b828210613eb2575050505090565b81518152908301908301613ea4565b9390613f0b9293613eef613ee0613efd9360a0895260a08901906126cd565b602096888203888a0152613717565b908682036040880152613717565b908482036060860152613717565b9160808184039101528251908183528083019281808460051b8301019501936000915b848310613f3e5750505050505090565b9091929394958480613f5c600193601f198682030187528a51610260565b9801930193019194939290613f2e565b9081602091031261025b57516102b181613c40565b93919260809363ffffffff613fac93989798168652602086015260a0604086015260a0850190610260565b6001600160a01b0391821660608501529416910152565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b82811061401357505060a09293506000838284010152601f8019910116010190565b8181015184820160a001528501613ff1565b90604051606081018181106001600160401b0382111761042457604052604060ff82946001808060a01b03918281541686520154908116602085015260a01c161515910152565b814710614127576000918291829182916001600160a01b03165af13d15614122573d61409781610484565b906140a56040519283610444565b8152600060203d92013e5b156140b757565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b6140b0565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b6141759061439f565b60038151166141d65761419161418c825160021c90565b6136e5565b9060005b82518110156141d15780612a546141b76141b16141cc94612d37565b856145d7565b6141c183876126b9565b9063ffffffff169052565b614195565b505090565b60405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b6064820152608490fd5b1561422e57565b60405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b6064820152608490fd5b805160011015610b255760210190565b908151811015610b25570160200190565b156142a957565b60405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b6064820152608490fd5b604051602081018181106001600160401b038211176104245760405260008152906000368137565b6040519061432f82610429565b6014825260203681840137565b9061434682610484565b6143536040519182610444565b828152809261370d601f1991610484565b60041b90610ff060f0831692168203610a4a57565b60ff600a9116019060ff8211610a4a57565b9060ff8091169116019060ff8211610a4a57565b906143ae600283511015614227565b6143e96001600160f81b0319600360fc1b816143da6143cc876126ac565b516001600160f81b03191690565b161490816144a2575b506142a2565b60028251146144985761440d6144086144028451612bec565b60011c90565b61433c565b60025b8351811015614493578061446e61445e61444061443b6144366143cc61448e978b614291565b61451b565b614364565b6144586144366143cc6144528761209c565b8b614291565b9061438b565b60f81b6001600160f81b03191690565b61448861447d61440284612bec565b9160001a9185614291565b5361208e565b614410565b509150565b90506102b16142fa565b9050600f60fb1b816144b66143cc87614281565b16149081156144c7575b50386143e3565b600b60fb1b91506144da6143cc86614281565b1614386144c0565b60ff602f199116019060ff8211610a4a57565b60ff6060199116019060ff8211610a4a57565b60ff6040199116019060ff8211610a4a57565b60f81c6030811015806145cc575b6145c3576061811015806145b8575b6145ac576041811015806145a1575b6145905760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e6700000000006044820152606490fd5b61459c6102b191614508565b614379565b506046811115614547565b61459c6102b1916144f5565b506066811115614538565b6102b1906144e2565b506039811115614529565b9060048101808211610a4a578251106145f257016004015190565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606490fd5b6146369061439f565b6014808251066146d05781516014900490614650826136e5565b92600090815b84811061466557505050505090565b8361466e614322565b845b828110614692575061468d9291612a5491015161119b838a6126b9565b614656565b6146c89192506146b66143cc6146b0836146ab88612d4d565b6120aa565b87614291565b861a6146c28285614291565b536128f5565b908591614670565b60405162461bcd60e51b815260206004820152602a60248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f6044820152696620323020627974657360b01b6064820152608490fdfea2646970667358221220f1fb224b7e537fa9d1640e6b6632ce6ef9e3d2c57e521f29fc059f60910310dd64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306fdde031461024b57806307e3290414610246578063095ea7b3146102415780630c92ecf71461023c5780630ca761751461023757806318160ddd14610232578063221c1fd11461022d57806323b872dd14610228578063313ce567146102235780633661346b1461021e578063395093511461021957806340691db4146102145780634585e33b1461020f57806351cff8d91461020a578063584992de146102055780635e895f29146102005780635f1d78ae146101fb57806362e16bd3146101f657806370a08231146101f1578063715018a6146101ec57806381bb4250146101e75780638c3d86b4146101e25780638da5cb5b146101dd57806395d89b41146101d85780639d58754f146101d35780639f1ea81b146101ce578063a457c2d7146101c9578063a9059cbb146101c4578063a9cf7519146101bf578063aa9224cd146101ba578063ba30621e146101b5578063dd62ed3e146101b0578063e9239117146101ab578063f2fde38b146101a65763fe5f49ac0361000e57611fcd565b611f06565b611b7d565b611b1a565b611abb565b611959565b611716565b6116ec565b61163a565b611604565b6115b7565b611510565b6114e7565b6113ff565b61108e565b611033565b610ff6565b610e52565b610e01565b610cad565b610c70565b610b72565b610b2a565b610a67565b6109f3565b6109b9565b61099d565b6108ca565b61080b565b6107c0565b6105c8565b6104fd565b6103c6565b610399565b6102b4565b600091031261025b57565b600080fd5b919082519283825260005b84811061028c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161026b565b9060206102b1928181520190610260565b90565b3461025b576000806003193601126103965760405190806004546102d781610d14565b8085529160019180831690811561036c5750600114610311575b61030d8561030181870382610444565b604051918291826102a0565b0390f35b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103545750505081016020016103018261030d6102f1565b80546020858701810191909152909301928101610339565b86955061030d9693506020925061030194915060ff191682840152151560051b82010192936102f1565b80fd5b3461025b57602036600319011261025b576100196004356137b5565b6001600160a01b0381160361025b57565b3461025b57604036600319011261025b576103f06004356103e6816103b5565b6024359033612284565b602060405160018152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161042457604052565b6103fb565b604081019081106001600160401b0382111761042457604052565b90601f801991011681019081106001600160401b0382111761042457604052565b60405190606082018281106001600160401b0382111761042457604052565b6001600160401b03811161042457601f01601f191660200190565b81601f8201121561025b578035906104b682610484565b926104c46040519485610444565b8284526020838301011161025b57816000926020809301838601378301015290565b6001600160401b0381116104245760051b60200190565b3461025b57608036600319011261025b576001600160401b0360043581811161025b5761052e90369060040161049f565b9060243581811161025b5761054790369060040161049f565b60443590610554826103b5565b60643592831161025b573660238401121561025b57826004013593610578856104e6565b936105866040519586610444565b85855260209560248787019160051b8301019136831161025b57602401905b8282106105b95750505061001994506123af565b813581529087019087016105a5565b3461025b57606036600319011261025b576001600160401b0360043560243582811161025b576105fc90369060040161049f565b60443583811161025b5761061490369060040161049f565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036107ae57600092828452602090600e825260408520918351918211610424576106748261066e8554610d14565b85612563565b80601f831160011461071f575090807f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379493928791610714575b508160011b916000199060031b1c19161790555b60016106d8846000526012602052604060002090565b01546106ea6040519283928684613670565b0390a17f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b9050830151386106ae565b90601f19831661073485600052602060002090565b9288905b8282106107965750509183917f873142285a75d241914f10e28387168bc800ee523453237b118e63b0fba46f379695946001941061077d575b5050811b0190556106c2565b85015160001960f88460031b161c191690553880610771565b80600185968294968b01518155019501930190610738565b60405163c6829f8360e01b8152600490fd5b3461025b57600036600319011261025b576020600354604051908152f35b9181601f8401121561025b578235916001600160401b03831161025b576020838186019501011161025b57565b3461025b57608036600319011261025b576108276004356103b5565b6108326024356103b5565b61083d6044356103b5565b6064356001600160401b03811161025b5761085c9036906004016107de565b50506040516310e5697360e01b8152602081600481335afa80156108c55761030d91600091610897575b506040519081529081906020820190565b6108b8915060203d81116108be575b6108b08183610444565b810190612744565b38610886565b503d6108a6565b612753565b3461025b57606036600319011261025b576004356108e7816103b5565b6024356108f3816103b5565b6001600160a01b03821660009081526002602090815260408083203384529091529020604435919054926001840161093c575b610930935061216a565b60405160018152602090f35b828410610958576109538361093095033383612284565b610926565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461025b57600036600319011261025b57602060405160128152f35b3461025b57602036600319011261025b576004356000526012602052604080600020600160ff825416910154825191151582526020820152f35b3461025b57604036600319011261025b57600435610a10816103b5565b3360009081526002602090815260408083206001600160a01b03851684529091529020546024358101809111610a4a576103f09133612284565b61206a565b9060406102b192600181528160208201520190610260565b3461025b5760031960403682011261025b576001600160401b039060043582811161025b576101008136039283011261025b5760243583811161025b57610ab290369060040161049f565b5060c4810135916022190182121561025b570190600482013590811161025b578060051b3603602483011361025b5760011015610b25576044610b1961030d92610b0b6040519384920135602083019190602083019252565b03601f198101835282610444565b60405191829182610a4f565b612696565b3461025b57602036600319011261025b576004356001600160401b03811161025b57610b5c60209136906004016107de565b908092918101031261025b5761001990356137b5565b3461025b5760208060031936011261025b57600435610b90816103b5565b610b98612012565b6001600160a01b031680610bb2575050610019473361406c565b6040516370a0823160e01b81523060048201528281602481855afa9081156108c5576000928492610c0f928591610c45575b5060405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af180156108c557610c1f57005b8161001992903d10610c3e575b610c368183610444565b810190613f6c565b503d610c2c565b610c5c9150843d86116108be576108b08183610444565b38610be4565b63ffffffff81160361025b57565b3461025b57602036600319011261025b576020600435610c8f81610c62565b63ffffffff809116600052600d825260406000205416604051908152f35b3461025b5760e036600319011261025b57602435610cca816103b5565b610cd56044356103b5565b610ce06064356103b5565b6084356001600160401b03811161025b57610cff9036906004016107de565b5050306001600160a01b039091160361025b57005b90600182811c92168015610d44575b6020831014610d2e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d23565b9060009291805491610d5f83610d14565b918282526001938481169081600014610dc15750600114610d81575b50505050565b90919394506000526020928360002092846000945b838610610dad575050505001019038808080610d7b565b805485870183015294019385908201610d96565b9294505050602093945060ff191683830152151560051b01019038808080610d7b565b90610dff610df89260405193848092610d4e565b0383610444565b565b3461025b57602036600319011261025b57600435600052600f60205261030d610e37610e3e604060002060405192838092610d4e565b0382610444565b604051918291602083526020830190610260565b3461025b57608036600319011261025b57600435610e6f81610c62565b60243590610e7c82610c62565b6001600160401b039160443583811161025b57610e9d90369060040161049f565b9060643593841161025b577f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a3520610fe192610ede61001996369060040161049f565b9063ffffffff8616600052600c602052610f0560ff60016040600020015460a01c16613d2d565b610f4060018060a01b03610f39610f2c8763ffffffff16600052600c602052604060002090565b546001600160a01b031690565b1615613b14565b610fb5610f706001610f628963ffffffff16600052600c602052604060002090565b01546001600160a01b031690565b610f8f610f7b610465565b338152916001600160a01b03166020830152565b60006040820152610fb08663ffffffff16600052600c602052604060002090565b613c54565b610fc86040519283928633918a86613d85565b0390a163ffffffff16600052600d602052604060002090565b9063ffffffff1663ffffffff19825416179055565b3461025b57602036600319011261025b57600435611013816103b5565b60018060a01b031660005260016020526020604060002054604051908152f35b3461025b576000806003193601126103965761104d612012565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b606036600319011261025b5760048035906110a882610c62565b6044356001600160401b03811161025b576110c6903690830161049f565b9060018060a01b03926110f8846110f0610f2c8463ffffffff16600052600c602052604060002090565b161515613dcf565b6111006136cb565b936111096136cb565b6111116136cb565b6111196136cb565b611121613e13565b9561112a6136cb565b508461114b6001610f628963ffffffff16600052600c602052604060002090565b61117c611178600161116d8b63ffffffff16600052600c602052604060002090565b015460a01c60ff1690565b1590565b6113d1575b60243561118d856126ac565b526111aa3361119b886126ac565b6001600160a01b039091169052565b169260409788516313aedd4b60e31b8152602097888286818a5afa9182156108c5576000926113a2575b508a516310e5697360e01b815291898387818b5afa9283156108c557600093611383575b501690811561131c578a516323b872dd60e01b81523381870190815230602082015260408101929092529493929189918691908290600090829060600103925af19182156108c557600098899561126a946112fe575b50508a51633381899760e01b81529c8d98899788968701613ec1565b03925af19081156108c5576112ac6112d8927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916112dd575b506126ac565b51926112cb610f2c8363ffffffff16600052600c602052604060002090565b9051948594339386613f81565b0390a1005b6112f8913d8091833e6112f08183610444565b810190613e48565b386112a6565b8161131492903d10610c3e57610c368183610444565b50388061124e565b5050600096506113409189519b8c9788968796633381899760e01b88528701613ec1565b039134905af19081156108c5576112ac6112d8927fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd1966000916112dd57506126ac565b61139b9193508a3d8c116108be576108b08183610444565b91386111f8565b6113c3919250893d8b116113ca575b6113bb8183610444565b810190613b93565b90386111d4565b503d6113b1565b6113fa6113f1610f2c8a63ffffffff16600052600c602052604060002090565b61119b8d6126ac565b611181565b3461025b57602036600319011261025b576004356000818152601160205260409020546001600160a01b0316330361025b5760405160e081018181106001600160401b03821117610424576114d36114b16001936114e39360405260008152600060208201526000604082015260608082015260606080820152606060a0820152606060c08201526114ac6114a66114a188600052600f602052604060002090565b610de4565b82612b4a565b612977565b6006546001600160401b031660085460a01c63ffffffff1690600b549261275f565b6000526012602052604060002090565b0155005b3461025b57600036600319011261025b576000546040516001600160a01b039091168152602090f35b3461025b5760008060031936011261039657604051908060055461153381610d14565b8085529160019180831690811561036c575060011461155c5761030d8561030181870382610444565b9250600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061159f5750505081016020016103018261030d6102f1565b80546020858701810191909152909301928101611584565b3461025b57602036600319011261025b576004356000526011602052606060406000205460ff6040519160018060a01b0381168352818160a01c16602084015260a81c1615156040820152f35b3461025b57602036600319011261025b57600435600052600e60205261030d610e37610e3e604060002060405192838092610d4e565b3461025b57604036600319011261025b57600435611657816103b5565b602435903360005260026020526116848160406000209060018060a01b0316600052602052604060002090565b54918083106116995761093092039033612284565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461025b57604036600319011261025b576103f060043561170c816103b5565b602435903361216a565b606036600319011261025b57600480359060243560443561173681610c62565b60018060a01b039361175f856110f0610f2c8563ffffffff16600052600c602052604060002090565b6000946117936117876117876001610f628763ffffffff16600052600c602052604060002090565b6001600160a01b031690565b92604051916313aedd4b60e31b835260209283818981895afa9081156108c557899161193c575b506040516310e5697360e01b81529284848a818a5afa9384156108c5578a9461191d575b50611801611178600161116d8463ffffffff16600052600c602052604060002090565b6118f6575b501680156118b957604080516323b872dd60e01b81523389820190815230602082015291820193909352839183918290600090829060600103925af180156108c55761189b575b5050813b1561025b57600080946118786040519788968795869463d813cc1960e01b86528501613fc3565b03925af180156108c55761188857005b8061189561001992610411565b80610250565b816118b192903d10610c3e57610c368183610444565b50388061184d565b505050813b1561025b576000936118e46040519687958694859463d813cc1960e01b86528501613fc3565b039134905af180156108c55761188857005b611916919950610f2c9063ffffffff16600052600c602052604060002090565b9738611806565b611935919450853d87116108be576108b08183610444565b92386117de565b6119539150843d86116113ca576113bb8183610444565b386117ba565b3461025b5760208060031936011261025b5761199861199360043561197d81610c62565b63ffffffff16600052600c602052604060002090565b614025565b818101516001600160a01b03908116929083316119b7600a8204612cee565b93604051956313aedd4b60e31b87528487600481845afa9687156108c557600097611a9c575b50803b1561025b57604051636ce5768960e11b81526001600160a01b038816600482015230602482015260448101939093526000908390606490829084905af19081156108c557611a3f9261178792611a89575b50516001600160a01b031690565b931680611a515750506100199161406c565b60405163a9059cbb60e01b81526001600160a01b03909416600485015260248401929092529190829082908160008160448101610c0f565b80611895611a9692610411565b38611a31565b611ab4919750853d87116113ca576113bb8183610444565b95386119dd565b3461025b57602036600319011261025b5763ffffffff600435611add81610c62565b16600052600c6020526060604060002060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b3461025b57604036600319011261025b576020611b74600435611b3c816103b5565b60243590611b49826103b5565b60018060a01b03166000526002835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b3461025b5760031960203682011261025b57600480356001600160401b03811161025b5761018081830193823603011261025b5760248101906001600160a01b0390611bd282610f39610f2c61197d87613b0a565b601354611be7906001600160a01b0316611787565b94600a5490611bf860648401613b57565b91608484013596879560206009549560c4880194611c36611c198789613b61565b9060409a8b519d8e96879663216c908360e11b88528b8801613bc9565b03816000809e5af19687156108c5578a97611ee2575b50611c5a9087169284613b61565b95908a611c6a60e4840187613b61565b989092610104850199611c7d8b8a613b61565b90893b15611ede57611ca2928c51978896879663d1b8759b60e01b88528c8801613c06565b038183885af180156108c557611ecb575b5060a48101359182611e73575b833b15611e6f5785516374cac47d60e01b81523082820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c08201529091908c908390819060e001038183895af19182156108c5578c92611e5c575b50600a549460095495813b15611e5857838793611d658b51998a968795869463282478df60e01b865285016040919493926060820195825260208201520152565b03925af19182156108c5577f60959c5b991214a9f145caa42f648174a46bd41e2f7f92d206d2b2d07e8e26f599611e0998611e3f98611e3297611df08a610fb08f61197d90611dc79c6101449c611e45575b50611deb6101648c019d8e613c4a565b611dcf610465565b338152956001600160a01b038b16602088015286019015159052565b613b0a565b611e11611e2a611e008380613b61565b9e909484613b61565b92909f613b0a565b92611e206101248a0182613b61565b9a90990190613b61565b9a9099613c4a565b9a519d8e9d33948f613cac565b0390a180f35b80611895611e5292610411565b38611db7565b8380fd5b80611895611e6992610411565b38611d24565b8a80fd5b833b15611e6f57855163debe2b0d60e01b81528b8180611ea187868301919060206040840193600081520152565b038183895af180156108c557611eb8575b50611cc0565b80611895611ec592610411565b38611eb2565b80611895611ed892610411565b38611cb3565b8580fd5b611c5a919750611eff9060203d81116113ca576113bb8183610444565b9690611c4c565b3461025b57602036600319011261025b57600435611f23816103b5565b611f2b612012565b6001600160a01b039081168015611f7957600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461025b57604036600319011261025b5760243560ff8116810361025b57611b746020916004356000526010835260406000209060ff16600052602052604060002090565b6000546001600160a01b0316330361202657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b9060208201809211610a4a57565b9060028201809211610a4a57565b9060018201809211610a4a57565b91908201809211610a4a57565b156120be57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561211657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b03808416929091831561223157612216827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9461222c9416966121b68815156120b7565b6001600160a01b03811660009081526001602052604090206121fb908590546121e18282101561210f565b039160018060a01b03166000526001602052604060002090565b556001600160a01b0316600090815260016020526040902090565b8054820190556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03808216929190831561235e57821693841561230e57806122fd7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946122e661222c9560018060a01b03166000526002602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b929091936123bb612012565b6123c484613ae7565b926123fa6040516123d481610429565b601481527375736572735265776172644d656368616e69736d60601b6020820152613ae7565b8414612530575b61247c612412849796975160ff1690565b956124498761242b886000526011602052604060002090565b8054909160ff60a01b1990911660a09190911b60ff60a01b16179055565b61245d866000526011602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6124998161249486600052600f602052604060002090565b6125b7565b60ff9485169560005b868116888110156124f157906124bb6124ec92876126b9565b516124e6826124d48a6000526010602052604060002090565b9060ff16600052602052604060002090565b55612685565b6124a2565b505092909361252b9296507f75667fad75521b835344aca3b0eea672769f8704aa6bebba7ed3d59ae740f07a955060405194859485612701565b0390a1565b61255a612547856000526011602052604060002090565b805460ff60a81b1916600160a81b179055565b612401565b9055565b90601f811161257157505050565b600091825260208220906020601f850160051c830194106125ad575b601f0160051c01915b8281106125a257505050565b818155600101612596565b909250829061258d565b91909182516001600160401b038111610424576125de816125d88454610d14565b84612563565b602080601f831160011461261a57508192939460009261260f575b50508160011b916000199060031b1c1916179055565b0151905038806125f9565b90601f1983169561263085600052602060002090565b926000905b88821061266d57505083600195969710612654575b505050811b019055565b015160001960f88460031b161c1916905538808061264a565b80600185968294968601518155019501930190612635565b60ff1660ff8114610a4a5760010190565b634e487b7160e01b600052603260045260246000fd5b805115610b255760200190565b8051821015610b255760209160051b010190565b90815180825260208080930193019160005b8281106126ed575050505090565b8351855293810193928101926001016126df565b906102b1949261271c61272a92608085526080850190610260565b908382036020850152610260565b92604082015260608184039101526126cd565b1561025b57565b9081602091031261025b575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff61279e604051978896879663230e93b160e11b885216600487015260a0602487015260a4860190610260565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156108c55760009161281a575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b612832915060203d81116108be576108b08183610444565b386127f0565b6040519061284582610429565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b6003111561288057565b612860565b6040519061289282610429565b60088252676c616e677561676560c01b6020830152565b6001111561288057565b604051906128c082610429565b6006825265736f7572636560d01b6020830152565b604051906128e282610429565b60048252636172677360e01b6020830152565b6000198114610a4a5760010190565b6040519061291182610429565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b6040519061293c82610429565b60078252667365637265747360c81b6020830152565b6040519061295f82610429565b600982526862797465734172677360b81b6020830152565b61297f612b8d565b9061299161298b612838565b83613331565b6129ae815161299f81612876565b6129a881612876565b83612c4d565b6129b961298b612885565b6129d360408201516129ca816128a9565b6129a8816128a9565b6129de61298b6128b3565b6129ec606082015183613331565b60a08101805151612af1575b506080810190815151612a71575b60c0915001805151612a19575b50515190565b91612a2561298b612952565b612a2e826133b5565b60005b83518051821015612a5e5790612a54612a4d82612a59946126b9565b518561327c565b6128f5565b612a31565b50509150612a6b81613441565b38612a13565b602081018051612a8081612876565b612a8981612876565b15612adf5760c092612ac2612ada92612aa9612aa3612904565b88613331565b51612ab381612876565b612abc81612876565b86612c4d565b612ad3612acd61292f565b86613331565b518461327c565b612a06565b60405163a80d31f760e01b8152600490fd5b92612b03612afd6128d5565b84613331565b612b0c836133b5565b60005b84518051821015612b375790612a54612b2b82612b32946126b9565b5186613331565b612b0f565b50509250612b4482613441565b386129f8565b815115612b61576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b60405190612b8082610429565b6000602083606081520152565b604051612b9981610429565b612ba1612b73565b8082526020820160008152612bb4612b73565b50610100602083015260405180925260008252610120820191821061025b576000916040525290565b601f19810191908211610a4a57565b600119810191908211610a4a57565b90612c04612b73565b50601f811680612c33575b508060208301526040519081835260008252810160200190811061025b5760405290565b60200360208111610a4a578101809111610a4a5738612c0f565b90815191612c59612b73565b508251516001810190818111610a4a576020850151811015612cb2575b60c26020610dff9651928301015380518211612caa575b505060405191602083015260208252612ca582610429565b61327c565b523880612c8d565b8160011b9482860460021483151715610a4a57602081612ce4610dff98612cdd60c295519184612bfb565b50826131cb565b5096505050612c76565b90600782029180830460071490151715610a4a57565b908160011b9180830460021490151715610a4a57565b90670de0b6b3a764000091828102928184041490151715610a4a57565b908160021b9180830460041490151715610a4a57565b90601482029180830460141490151715610a4a57565b612d6b612b73565b508051516001810190818111610a4a576020830151811015612da4575b605b60208451928301015380518211612da057505090565b5290565b8160011b82810460021483151715610a4a57612dcd90612dc685519186612bfb565b50846131cb565b50612d88565b612ddb612b73565b508051516001810190818111610a4a576020830151811015612e10575b605a60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612e3290612dc685519186612bfb565b50612df8565b612e40612b73565b508051516001810190818111610a4a576020830151811015612e75575b605960208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612e9790612dc685519186612bfb565b50612e5d565b612ea5612b73565b508051516001810190818111610a4a576020830151811015612eda575b605860208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612efc90612dc685519186612bfb565b50612ec2565b612f0a612b73565b508051516001810190818111610a4a576020830151811015612f3f575b607b60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612f6190612dc685519186612bfb565b50612f27565b612f6f612b73565b508051516001810190818111610a4a576020830151811015612fa4575b607a60208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a57612fc690612dc685519186612bfb565b50612f8c565b612fd4612b73565b508051516001810190818111610a4a576020830151811015613009575b607960208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a5761302b90612dc685519186612bfb565b50612ff1565b613039612b73565b508051516001810190818111610a4a57602083015181101561306e575b607860208451928301015380518211612da057505090565b8160011b82810460021483151715610a4a5761309090612dc685519186612bfb565b50613056565b9061309f612b73565b508151516001810191828211610a4a5760208401518210156130d2575b60208451928301015380518211612da057505090565b8260011b83810460021484151715610a4a576130fb906130f486519187612bfb565b50856131cb565b506130bc565b9061310e82519183612bfb565b50613117612b73565b50805190613123612b73565b50613131815183111561273d565b8251519261313f83856120aa565b9160209282848094015182116131b4575b51838151978201019682116131ac575b505001915b818110156131865760001991036101000a0190811990511690825116179052565b91926131a161319b6131a79286518152612080565b94612080565b92612bdd565b613165565b523880613160565b6131c66131c083612d04565b82613101565b613150565b906131d4612b73565b5080516131df612b73565b506131ed825182111561273d565b825151916131fb82846120aa565b6020918291828701518111613265575b86518381519782010196821161325d575b505001915b818110156132435760001991036101000a019081199051169082511617905290565b91926131a161319b6132589286518152612080565b613221565b52388061321c565b61327761327182612d04565b88613101565b61320b565b81516132b39291906001600160401b03811690601782116132b6576132ab9150604060ff845192161790613096565b505b516131cb565b50565b5060ff81116132db576132d5906132cd8351612e9d565b50825161360a565b506132ad565b61ffff81116132fa576132d5906132f28351612e38565b5082516135a3565b63ffffffff811161331b576132d5906133138351612dd3565b50825161353a565b6132d5906133298351612d63565b5082516134ce565b81516132b39291906001600160401b0381169060178211613360576132ab9150606060ff845192161790613096565b5060ff8111613377576132d5906132cd8351613031565b61ffff811161338e576132d5906132f28351612fcc565b63ffffffff81116133a7576132d5906133138351612f67565b6132d5906133298351612f02565b8051906133c0612b73565b508151516001810190818111610a4a57602084015181101561340e575b609f6020809551928301015380518211613406575b50500180519060018201809211610a4a5752565b5238806133f2565b8160011b9382850460021483151715610a4a576020816134378297612cdd609f95519184612bfb565b50955050506133dd565b80519061344c612b73565b508151516001810190818111610a4a57602084015181101561349b575b60ff6020809551928301015380518211613493575b5050018051600019810191908211610a4a5752565b52388061347e565b8160011b9382850460021483151715610a4a576020816134c48297612cdd60ff95519184612bfb565b5095505050613469565b906134d7612b73565b50815151806008019182600811610a4a5760208401518311613519575b6008845192830101906001600160401b031982511617905280518211612da057505090565b8260011b83810460021484151715610a4a576135359085613101565b6134f4565b90613543612b73565b50815151806004019182600411610a4a5760208401518311613582575b60048451928301019063ffffffff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a5761359e9085613101565b613560565b906135ac612b73565b50815151806002019182600211610a4a57602084015183116135e9575b60028451928301019061ffff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a576136059085613101565b6135c9565b90613613612b73565b50815151806001019182600111610a4a576020840151831161364f575b60018451928301019060ff1982511617905280518211612da057505090565b8260011b83810460021484151715610a4a5761366b9085613101565b613630565b6102b19392606092825260208201528160408201520190610260565b1561369357565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b604051906136d882610429565b6001825260203681840137565b906136ef826104e6565b6136fc6040519182610444565b828152809261370d601f19916104e6565b0190602036910137565b90815180825260208080930193019160005b828110613737575050505090565b83516001600160a01b031685529381019392810192600101613729565b909493919460808201908252602095868301526080604083015283518091528560a0830194019060005b81811061379b575050506102b19394506060818403910152613717565b825163ffffffff168652948701949187019160010161377e565b906137dd6137d76137d0846000526012602052604060002090565b5460ff1690565b1561368c565b6138016137f4836000526012602052604060002090565b805460ff19166001179055565b60019182613819826000526012602052604060002090565b01549061383d613833836000526011602052604060002090565b5460a01c60ff1690565b61385e613854846000526011602052604060002090565b5460a81c60ff1690565b15613937579361386c6136cb565b908061388d6138886114a186600052600e602052604060002090565b61462d565b96600060ff809216925b6138d3575b505050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b57939461252b9160405194859485613754565b8181168381101561393157906139266138ff6138f261392b948d6126b9565b516001600160a01b031690565b61392061391a846124d48d6000526010602052604060002090565b54612d1a565b90613a2d565b612685565b83613897565b5061389c565b6139586139536114a1849794600052600e602052604060002090565b61416c565b9061396660ff8092166136e5565b926000815b6139a7575b5050507f20b6c14dda6c40c205794d98587c7cce19676f970b5bc3d8e0badf35dcf50b5793949161252b9160405194859485613754565b6139c76139c1613833886000526011602052604060002090565b60ff1690565b83821690811015613a27579061392661119b613a06846139fd610f2c61197d6139f3613a21998d6126b9565b5163ffffffff1690565b9283918b6126b9565b61392061391a846124d48c6000526010602052604060002090565b8161396b565b50613970565b6001600160a01b03811691908215613aa25760035490828201809211610a4a57600092613a936020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9460035560018060a01b03166000526001602052604060002090565b818154019055604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b604051613b0481610b0b6020820194602086526040830190610260565b51902090565b356102b181610c62565b15613b1b57565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b356102b1816103b5565b903590601e198136030182121561025b57018035906001600160401b03821161025b5760200191813603831361025b57565b9081602091031261025b57516102b1816103b5565b908060209392818452848401376000828201840152601f01601f1916010190565b96959093613c01936000969360a0968a52600180881b031660208a01526040890152606088015260c0608088015260c0870191613ba8565b930152565b94929093613c246102b19795613c3294606089526060890191613ba8565b918683036020880152613ba8565b926040818503910152613ba8565b8015150361025b57565b356102b181613c40565b815181546001600160a01b03199081166001600160a01b039283161783556020840151600190930180549390921692169190911781559061255f9060400151825460ff60a01b191690151560a01b60ff60a01b161790565b9d9e9d604063ffffffff829f9b966101209f9d989a9496613d259f9a9691613c24613d169e99613ce494610140808a52890191613ba8565b99169101526001600160a01b0391821660608e01521660808c015260a08b015260c08a015288830360e08a0152613ba8565b91858303610100870152613ba8565b931515910152565b15613d3457565b60405162461bcd60e51b815260206004820152602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b9190613dac6102b19694959263ffffffff809316855260a0602086015260a0850190610260565b941660408301526001600160a01b03166060820152808303608090910152610260565b15613dd657565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b604051613e1f81610429565b600181528060005b602080821015613e4257906060602092828501015201613e27565b50505090565b602090818184031261025b578051906001600160401b03821161025b57019180601f8401121561025b578251613e7d816104e6565b93613e8b6040519586610444565b818552838086019260051b82010192831161025b578301905b828210613eb2575050505090565b81518152908301908301613ea4565b9390613f0b9293613eef613ee0613efd9360a0895260a08901906126cd565b602096888203888a0152613717565b908682036040880152613717565b908482036060860152613717565b9160808184039101528251908183528083019281808460051b8301019501936000915b848310613f3e5750505050505090565b9091929394958480613f5c600193601f198682030187528a51610260565b9801930193019194939290613f2e565b9081602091031261025b57516102b181613c40565b93919260809363ffffffff613fac93989798168652602086015260a0604086015260a0850190610260565b6001600160a01b0391821660608501529416910152565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b82811061401357505060a09293506000838284010152601f8019910116010190565b8181015184820160a001528501613ff1565b90604051606081018181106001600160401b0382111761042457604052604060ff82946001808060a01b03918281541686520154908116602085015260a01c161515910152565b814710614127576000918291829182916001600160a01b03165af13d15614122573d61409781610484565b906140a56040519283610444565b8152600060203d92013e5b156140b757565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b6140b0565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b6141759061439f565b60038151166141d65761419161418c825160021c90565b6136e5565b9060005b82518110156141d15780612a546141b76141b16141cc94612d37565b856145d7565b6141c183876126b9565b9063ffffffff169052565b614195565b505090565b60405162461bcd60e51b815260206004820152602360248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f60448201526219880d60ea1b6064820152608490fd5b1561422e57565b60405162461bcd60e51b815260206004820152602560248201527f536f7572636520737472696e67206e6f742070726f7065726c7920666f726d616044820152643a3a32b21760d91b6064820152608490fd5b805160011015610b255760210190565b908151811015610b25570160200190565b156142a957565b60405162461bcd60e51b815260206004820152602360248201527f536f7572636520737472696e67206d75737420737461727420776974682027306044820152623c139760e91b6064820152608490fd5b604051602081018181106001600160401b038211176104245760405260008152906000368137565b6040519061432f82610429565b6014825260203681840137565b9061434682610484565b6143536040519182610444565b828152809261370d601f1991610484565b60041b90610ff060f0831692168203610a4a57565b60ff600a9116019060ff8211610a4a57565b9060ff8091169116019060ff8211610a4a57565b906143ae600283511015614227565b6143e96001600160f81b0319600360fc1b816143da6143cc876126ac565b516001600160f81b03191690565b161490816144a2575b506142a2565b60028251146144985761440d6144086144028451612bec565b60011c90565b61433c565b60025b8351811015614493578061446e61445e61444061443b6144366143cc61448e978b614291565b61451b565b614364565b6144586144366143cc6144528761209c565b8b614291565b9061438b565b60f81b6001600160f81b03191690565b61448861447d61440284612bec565b9160001a9185614291565b5361208e565b614410565b509150565b90506102b16142fa565b9050600f60fb1b816144b66143cc87614281565b16149081156144c7575b50386143e3565b600b60fb1b91506144da6143cc86614281565b1614386144c0565b60ff602f199116019060ff8211610a4a57565b60ff6060199116019060ff8211610a4a57565b60ff6040199116019060ff8211610a4a57565b60f81c6030811015806145cc575b6145c3576061811015806145b8575b6145ac576041811015806145a1575b6145905760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642063686172616374657220696e20737472696e6700000000006044820152606490fd5b61459c6102b191614508565b614379565b506046811115614547565b61459c6102b1916144f5565b506066811115614538565b6102b1906144e2565b506039811115614529565b9060048101808211610a4a578251106145f257016004015190565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606490fd5b6146369061439f565b6014808251066146d05781516014900490614650826136e5565b92600090815b84811061466557505050505090565b8361466e614322565b845b828110614692575061468d9291612a5491015161119b838a6126b9565b614656565b6146c89192506146b66143cc6146b0836146ab88612d4d565b6120aa565b87614291565b861a6146c28285614291565b536128f5565b908591614670565b60405162461bcd60e51b815260206004820152602a60248201527f44617461206c656e677468206d7573742062652061206d756c7469706c65206f6044820152696620323020627974657360b01b6064820152608490fdfea2646970667358221220f1fb224b7e537fa9d1640e6b6632ce6ef9e3d2c57e521f29fc059f60910310dd64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addRewardMechanism(string,string,address,uint256[])": {
        "details": "Only callable by the owner",
        "params": {
          "_functionForwader": "chainlink automation forwarder address",
          "_rewardDistributions": "the reward distributions for the topK agents",
          "_sourceCode": "sourceID to Forwarder address",
          "_sourceName": "sourceID to Forwarder address"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_donID": "Chainlink's contract chainID => donID",
          "_oracle": "The address of the Chainlink Function oracle",
          "_subscriptionId": "The subscription ID for Chainlink Functions",
          "_unlockContract": "The address of the Chainlink oracle Automation Forwarder"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseSubscription(uint32,uint256,string)": {
        "details": "PurchaseSubscription function for an agentID",
        "params": {
          "_agentID": "to subscribe",
          "_value": "array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendRequest(bytes32)": {
        "params": {
          "sourceID": "The ID of the source to send the request to"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint32)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_agentID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "RocketAI (Decentralized Artificial Intelligence Marketplace)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewardMechanism(string,string,address,uint256[])": {
        "notice": "Set the setRewardMechanism that `performUpkeep` is called from a trusted address the chainlink forwarder"
      },
      "constructor": {
        "notice": "Initializes the contract"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "sendRequest(bytes32)": {
        "notice": "Sends an HTTP request for character information"
      },
      "withdraw(uint32)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "notice": "@dev",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2508,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2629,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2635,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2637,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 5861,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 5863,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agentPlaceTreasury",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5865,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "oracle",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5868,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "gasLimit",
        "offset": 20,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 5875,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "max",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5878,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "month",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5880,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "donID",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 5904,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agents",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint32,t_struct(AgentStruct)5887_storage)"
      },
      {
        "astId": 5908,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "agentVersions",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 5912,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "roundWinners",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5916,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "sources",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 5922,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "rewardDistributions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5927,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "functionData",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_struct(FunctionData)5899_storage)"
      },
      {
        "astId": 5932,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "requestData",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_struct(RequestData)5892_storage)"
      },
      {
        "astId": 6382,
        "contract": "contracts/RocketAI.sol:RocketAI",
        "label": "unlockContract",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IUnlockV12)5830"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUnlockV12)5830": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(FunctionData)5899_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ChainlinkConsumer.FunctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(FunctionData)5899_storage"
      },
      "t_mapping(t_bytes32,t_struct(RequestData)5892_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ChainlinkConsumer.RequestData)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestData)5892_storage"
      },
      "t_mapping(t_uint32,t_struct(AgentStruct)5887_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ChainlinkConsumer.AgentStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentStruct)5887_storage"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentStruct)5887_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.AgentStruct",
        "members": [
          {
            "astId": 5882,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5884,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5886,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "isOpenForContributions",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FunctionData)5899_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.FunctionData",
        "members": [
          {
            "astId": 5894,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "functionForwarder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5896,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "numberOfWinners",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5898,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "usersOrAgents",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RequestData)5892_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkConsumer.RequestData",
        "members": [
          {
            "astId": 5889,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "executed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5891,
            "contract": "contracts/RocketAI.sol:RocketAI",
            "label": "sourceID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}