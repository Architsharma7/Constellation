## Creator
type Creator @entity {
  id: Bytes!
  address: Bytes!
  agentsCreated: [Agent!] @derivedFrom(field: "creator")
  roundsWon: [Round!] @derivedFrom(field: "topkUsers")
}
# Extra maybe Rounds won , total rev

## User
type User @entity {
  id: Bytes!
  address: Bytes!
  agentsSubscribedTo: [SubscriptionEntity!] @derivedFrom(field: "buyer")
}
# roundWon: [Round!] @derivedFrom(field: "topkUsers")
# Extra maybe Rounds won

## Agent
type Agent @entity {
  id: Bytes!
  assistantId: String!
  agentID: BigInt! # uint16
  creator: Creator! # address
  unlockSubAddress: Bytes! # address
  keyPrice: BigInt! # uint256
  basisPoint: BigInt! # uint256
  rewardCategory: RewardMechanism! # string // convert category name into ID to load
  agentCategory: String! # string
  isOpenForContributions: Boolean! # bool
  isImprovedVersion: Boolean!
  AgentVersions: [Agent!] @derivedFrom(field: "parentAgent")
  parentAgent: Agent
  metadataCID: String
}
# roundWon: [Round!] @derivedFrom(field: "topkAgents") - the issue the link is on the basis of Id
# Rounds won

## Subscription
type SubscriptionEntity @entity {
  id: Bytes!
  agent: Agent!
  agentCreator: Creator!
  buyer: User!
  threadID: String! # string
  tokenId: BigInt! # uint256
  createdAt: BigInt!
  expiresAt: BigInt!
}

type RewardMechanism @entity {
  id: Bytes! # sourceId
  sourceName: String! #rewardCategory
  sourceCode: String!
  rewardDistributions: [BigInt!]!
  recentRounds: [Round!] @derivedFrom(field: "rewardMechanism")
}

type Round @entity {
  id: Bytes! # requestId
  rewardMechanism: RewardMechanism! # bytes32
  topkAgents: [Agent!]! # uint16[] could be Agent
  topkUsers: [Creator!]! # address[] could be Users
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

## Locks from unlock

## keys from unlock

# type RoundRewardsDistributed @entity(immutable: true) {
#   id: Bytes!
#   requestId: Bytes! # bytes32
#   sourceID: Bytes! # bytes32
#   topkAgents: [BigInt!]! # uint32[]
#   topkUsers: [Bytes!]! # address[]
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type RoundWinners @entity(immutable: true) {
#   id: Bytes!
#   requestId: Bytes! # bytes32
#   sourceID: Bytes! # bytes32
#   response: Bytes! # bytes
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type agentRegistered @entity(immutable: true) {
#   id: Bytes!
#   agentName: String! # string
#   agentID: BigInt! # uint32
#   creator: Bytes! # address
#   unlockSubscriptionContract: Bytes! # address
#   keyPrice: BigInt! # uint256
#   basisPoint: BigInt! # uint256
#   rewardCategory: String! # string
#   actualCategory: String! # string
#   isOpenForContributions: Boolean! # bool
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type agentSubscriptionPurchased @entity(immutable: true) {
#   id: Bytes!
#   agentID: BigInt! # uint32
#   tokenId: BigInt! # uint256
#   threadID: String! # string
#   agentCreator: Bytes! # address
#   subscriber: Bytes! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type agentVersionRegistered @entity(immutable: true) {
#   id: Bytes!
#   agentID: BigInt! # uint32
#   agentVersionName: String! # string
#   agentVersionID: BigInt! # uint32
#   creator: Bytes! # address
#   agentMetadataCID: String! # string
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }
