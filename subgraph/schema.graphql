## Creator
type Creator @entity {
  id: Bytes!
  address: Bytes!
  agnentCreated:[Agent] @derivedFrom("creator")
}

## User
type User @entity {
  id: Bytes!
  address: Bytes!
  agnentSubscribedTo:[Subscription] @derivedFrom("buyer")
}

## Agent
type Agent @entity {
  id: Bytes!
  agentId: Int!
  assistantId: String!
  agentID: Int! # uint16
  creator: Creator! # address
  unlockSubAddress: Bytes! # address
  KeyPrice: BigInt! # uint256
  basisPoint: BigInt! # uint256
  categories: String! # string
  isOpenForContributions: Boolean! # bool
  AgentVersions: [Agent!] @derivedFrom("parentAgent")
  parentAgent: Agent
  metadataCID: String
}

## Subscription
type Subscription @entity {
  id: Bytes!
  agent: Agent!
  agentCreator: Creator!
  buyer: User!
  createdAt: BigInt!
  expiresAt: BigInt!
}

## Locks from unlock

## keys from unlock

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestFulfilled @entity(immutable: true) {
  id: Bytes!
  AgentHandler_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestSent @entity(immutable: true) {
  id: Bytes!
  AgentHandler_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Response @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes! # bytes32
  response: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type agentRegistered @entity(immutable: true) {
  id: Bytes!
  agentName: String! # string
  agentID: Int! # uint16
  creator: Bytes! # address
  UnlockSubscriptionContract: Bytes! # address
  KeyPrice: BigInt! # uint256
  basisPoint: BigInt! # uint256
  categories: String! # string
  isOpenForContributions: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type agentSubscriptionPurchased @entity(immutable: true) {
  id: Bytes!
  agentID: Int! # uint16
  agentCreator: Bytes! # address
  subscriber: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type agentVersionRegistered @entity(immutable: true) {
  id: Bytes!
  agentID: Int! # uint16
  agentVersionName: String! # string
  agentVersionID: Int! # uint16
  creator: Bytes! # address
  agentMetadataCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type rewardMechanismRegistered @entity(immutable: true) {
  id: Bytes!
  sourceName: String! # string
  sourceCode: String! # string
  sourceID: Bytes! # bytes32
  rewardDistributions: [Int!]! # uint8[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
