## Creator
## User
## Agent
## Subscription
## Locks from unlock
## keys from unlock

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestFulfilled @entity(immutable: true) {
  id: Bytes!
  AgentHandler_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestSent @entity(immutable: true) {
  id: Bytes!
  AgentHandler_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Response @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes! # bytes32
  response: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type agentRegistered @entity(immutable: true) {
  id: Bytes!
  agentID: Int! # uint16
  creator: Bytes! # address
  UnlockSubscriptionContract: Bytes! # address
  isOpenForContributions: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type agentVersionRegistered @entity(immutable: true) {
  id: Bytes!
  agentID: Int! # uint16
  agentVersionID: Int! # uint16
  creator: Bytes! # address
  agentMetadataCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
